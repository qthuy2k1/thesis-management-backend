// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: attachment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonAttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonAttachmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonAttachmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonAttachmentResponseMultiError, or nil if none found.
func (m *CommonAttachmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonAttachmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Message

	if len(errors) > 0 {
		return CommonAttachmentResponseMultiError(errors)
	}

	return nil
}

// CommonAttachmentResponseMultiError is an error wrapping multiple validation
// errors returned by CommonAttachmentResponse.ValidateAll() if the designated
// constraints aren't met.
type CommonAttachmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonAttachmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonAttachmentResponseMultiError) AllErrors() []error { return m }

// CommonAttachmentResponseValidationError is the validation error returned by
// CommonAttachmentResponse.Validate if the designated constraints aren't met.
type CommonAttachmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonAttachmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonAttachmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonAttachmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonAttachmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonAttachmentResponseValidationError) ErrorName() string {
	return "CommonAttachmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommonAttachmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonAttachmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonAttachmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonAttachmentResponseValidationError{}

// Validate checks the field values on AttachmentInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AttachmentInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttachmentInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttachmentInputMultiError, or nil if none found.
func (m *AttachmentInput) ValidateAll() error {
	return m.validate(true)
}

func (m *AttachmentInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileURL

	// no validation rules for Status

	// no validation rules for SubmissionID

	// no validation rules for ExerciseID

	// no validation rules for AuthorID

	if len(errors) > 0 {
		return AttachmentInputMultiError(errors)
	}

	return nil
}

// AttachmentInputMultiError is an error wrapping multiple validation errors
// returned by AttachmentInput.ValidateAll() if the designated constraints
// aren't met.
type AttachmentInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachmentInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachmentInputMultiError) AllErrors() []error { return m }

// AttachmentInputValidationError is the validation error returned by
// AttachmentInput.Validate if the designated constraints aren't met.
type AttachmentInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachmentInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachmentInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachmentInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachmentInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachmentInputValidationError) ErrorName() string { return "AttachmentInputValidationError" }

// Error satisfies the builtin error interface
func (e AttachmentInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachmentInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachmentInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachmentInputValidationError{}

// Validate checks the field values on AttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttachmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttachmentResponseMultiError, or nil if none found.
func (m *AttachmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttachmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FileURL

	// no validation rules for Status

	// no validation rules for SubmissionID

	// no validation rules for ExerciseID

	// no validation rules for AuthorID

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttachmentResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttachmentResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttachmentResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttachmentResponseMultiError(errors)
	}

	return nil
}

// AttachmentResponseMultiError is an error wrapping multiple validation errors
// returned by AttachmentResponse.ValidateAll() if the designated constraints
// aren't met.
type AttachmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttachmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttachmentResponseMultiError) AllErrors() []error { return m }

// AttachmentResponseValidationError is the validation error returned by
// AttachmentResponse.Validate if the designated constraints aren't met.
type AttachmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttachmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttachmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttachmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttachmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttachmentResponseValidationError) ErrorName() string {
	return "AttachmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttachmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttachmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttachmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttachmentResponseValidationError{}

// Validate checks the field values on CreateAttachmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttachmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttachmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttachmentRequestMultiError, or nil if none found.
func (m *CreateAttachmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttachmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAttachment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAttachmentRequestValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAttachmentRequestValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAttachmentRequestValidationError{
				field:  "Attachment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAttachmentRequestMultiError(errors)
	}

	return nil
}

// CreateAttachmentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAttachmentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAttachmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttachmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttachmentRequestMultiError) AllErrors() []error { return m }

// CreateAttachmentRequestValidationError is the validation error returned by
// CreateAttachmentRequest.Validate if the designated constraints aren't met.
type CreateAttachmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttachmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttachmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttachmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttachmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttachmentRequestValidationError) ErrorName() string {
	return "CreateAttachmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttachmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttachmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttachmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttachmentRequestValidationError{}

// Validate checks the field values on CreateAttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAttachmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAttachmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAttachmentResponseMultiError, or nil if none found.
func (m *CreateAttachmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAttachmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAttachmentResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAttachmentResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAttachmentResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAttachmentResponseMultiError(errors)
	}

	return nil
}

// CreateAttachmentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAttachmentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAttachmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAttachmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAttachmentResponseMultiError) AllErrors() []error { return m }

// CreateAttachmentResponseValidationError is the validation error returned by
// CreateAttachmentResponse.Validate if the designated constraints aren't met.
type CreateAttachmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAttachmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAttachmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAttachmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAttachmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAttachmentResponseValidationError) ErrorName() string {
	return "CreateAttachmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAttachmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAttachmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAttachmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAttachmentResponseValidationError{}

// Validate checks the field values on GetAttachmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAttachmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttachmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAttachmentRequestMultiError, or nil if none found.
func (m *GetAttachmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttachmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAttachmentRequestMultiError(errors)
	}

	return nil
}

// GetAttachmentRequestMultiError is an error wrapping multiple validation
// errors returned by GetAttachmentRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAttachmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttachmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttachmentRequestMultiError) AllErrors() []error { return m }

// GetAttachmentRequestValidationError is the validation error returned by
// GetAttachmentRequest.Validate if the designated constraints aren't met.
type GetAttachmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttachmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttachmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttachmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttachmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttachmentRequestValidationError) ErrorName() string {
	return "GetAttachmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttachmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttachmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttachmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttachmentRequestValidationError{}

// Validate checks the field values on GetAttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAttachmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAttachmentResponseMultiError, or nil if none found.
func (m *GetAttachmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttachmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAttachmentResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAttachmentResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAttachmentResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAttachment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAttachmentResponseValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAttachmentResponseValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAttachmentResponseValidationError{
				field:  "Attachment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAttachmentResponseMultiError(errors)
	}

	return nil
}

// GetAttachmentResponseMultiError is an error wrapping multiple validation
// errors returned by GetAttachmentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAttachmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttachmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttachmentResponseMultiError) AllErrors() []error { return m }

// GetAttachmentResponseValidationError is the validation error returned by
// GetAttachmentResponse.Validate if the designated constraints aren't met.
type GetAttachmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttachmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttachmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttachmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttachmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttachmentResponseValidationError) ErrorName() string {
	return "GetAttachmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttachmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttachmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttachmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttachmentResponseValidationError{}

// Validate checks the field values on CheckAttachmentExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckAttachmentExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAttachmentExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckAttachmentExistsRequestMultiError, or nil if none found.
func (m *CheckAttachmentExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAttachmentExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AttachmentID

	if len(errors) > 0 {
		return CheckAttachmentExistsRequestMultiError(errors)
	}

	return nil
}

// CheckAttachmentExistsRequestMultiError is an error wrapping multiple
// validation errors returned by CheckAttachmentExistsRequest.ValidateAll() if
// the designated constraints aren't met.
type CheckAttachmentExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAttachmentExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAttachmentExistsRequestMultiError) AllErrors() []error { return m }

// CheckAttachmentExistsRequestValidationError is the validation error returned
// by CheckAttachmentExistsRequest.Validate if the designated constraints
// aren't met.
type CheckAttachmentExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAttachmentExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAttachmentExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAttachmentExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAttachmentExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAttachmentExistsRequestValidationError) ErrorName() string {
	return "CheckAttachmentExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAttachmentExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAttachmentExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAttachmentExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAttachmentExistsRequestValidationError{}

// Validate checks the field values on CheckAttachmentExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckAttachmentExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckAttachmentExistsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckAttachmentExistsResponseMultiError, or nil if none found.
func (m *CheckAttachmentExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckAttachmentExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckAttachmentExistsResponseMultiError(errors)
	}

	return nil
}

// CheckAttachmentExistsResponseMultiError is an error wrapping multiple
// validation errors returned by CheckAttachmentExistsResponse.ValidateAll()
// if the designated constraints aren't met.
type CheckAttachmentExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckAttachmentExistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckAttachmentExistsResponseMultiError) AllErrors() []error { return m }

// CheckAttachmentExistsResponseValidationError is the validation error
// returned by CheckAttachmentExistsResponse.Validate if the designated
// constraints aren't met.
type CheckAttachmentExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckAttachmentExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckAttachmentExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckAttachmentExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckAttachmentExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckAttachmentExistsResponseValidationError) ErrorName() string {
	return "CheckAttachmentExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckAttachmentExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckAttachmentExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckAttachmentExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckAttachmentExistsResponseValidationError{}

// Validate checks the field values on UpdateAttachmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAttachmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAttachmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAttachmentRequestMultiError, or nil if none found.
func (m *UpdateAttachmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAttachmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetAttachment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAttachmentRequestValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAttachmentRequestValidationError{
					field:  "Attachment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAttachment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAttachmentRequestValidationError{
				field:  "Attachment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAttachmentRequestMultiError(errors)
	}

	return nil
}

// UpdateAttachmentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAttachmentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAttachmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAttachmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAttachmentRequestMultiError) AllErrors() []error { return m }

// UpdateAttachmentRequestValidationError is the validation error returned by
// UpdateAttachmentRequest.Validate if the designated constraints aren't met.
type UpdateAttachmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAttachmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAttachmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAttachmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAttachmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAttachmentRequestValidationError) ErrorName() string {
	return "UpdateAttachmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAttachmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAttachmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAttachmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAttachmentRequestValidationError{}

// Validate checks the field values on UpdateAttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAttachmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAttachmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAttachmentResponseMultiError, or nil if none found.
func (m *UpdateAttachmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAttachmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAttachmentResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAttachmentResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAttachmentResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAttachmentResponseMultiError(errors)
	}

	return nil
}

// UpdateAttachmentResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAttachmentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAttachmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAttachmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAttachmentResponseMultiError) AllErrors() []error { return m }

// UpdateAttachmentResponseValidationError is the validation error returned by
// UpdateAttachmentResponse.Validate if the designated constraints aren't met.
type UpdateAttachmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAttachmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAttachmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAttachmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAttachmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAttachmentResponseValidationError) ErrorName() string {
	return "UpdateAttachmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAttachmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAttachmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAttachmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAttachmentResponseValidationError{}

// Validate checks the field values on DeleteAttachmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAttachmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAttachmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAttachmentRequestMultiError, or nil if none found.
func (m *DeleteAttachmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAttachmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAttachmentRequestMultiError(errors)
	}

	return nil
}

// DeleteAttachmentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAttachmentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAttachmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAttachmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAttachmentRequestMultiError) AllErrors() []error { return m }

// DeleteAttachmentRequestValidationError is the validation error returned by
// DeleteAttachmentRequest.Validate if the designated constraints aren't met.
type DeleteAttachmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAttachmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAttachmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAttachmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAttachmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAttachmentRequestValidationError) ErrorName() string {
	return "DeleteAttachmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAttachmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAttachmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAttachmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAttachmentRequestValidationError{}

// Validate checks the field values on DeleteAttachmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAttachmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAttachmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAttachmentResponseMultiError, or nil if none found.
func (m *DeleteAttachmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAttachmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteAttachmentResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteAttachmentResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteAttachmentResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteAttachmentResponseMultiError(errors)
	}

	return nil
}

// DeleteAttachmentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAttachmentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAttachmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAttachmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAttachmentResponseMultiError) AllErrors() []error { return m }

// DeleteAttachmentResponseValidationError is the validation error returned by
// DeleteAttachmentResponse.Validate if the designated constraints aren't met.
type DeleteAttachmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAttachmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAttachmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAttachmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAttachmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAttachmentResponseValidationError) ErrorName() string {
	return "DeleteAttachmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAttachmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAttachmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAttachmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAttachmentResponseValidationError{}

// Validate checks the field values on GetAttachmentsOfExerciseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAttachmentsOfExerciseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttachmentsOfExerciseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAttachmentsOfExerciseRequestMultiError, or nil if none found.
func (m *GetAttachmentsOfExerciseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttachmentsOfExerciseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExerciseID

	if len(errors) > 0 {
		return GetAttachmentsOfExerciseRequestMultiError(errors)
	}

	return nil
}

// GetAttachmentsOfExerciseRequestMultiError is an error wrapping multiple
// validation errors returned by GetAttachmentsOfExerciseRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAttachmentsOfExerciseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttachmentsOfExerciseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttachmentsOfExerciseRequestMultiError) AllErrors() []error { return m }

// GetAttachmentsOfExerciseRequestValidationError is the validation error
// returned by GetAttachmentsOfExerciseRequest.Validate if the designated
// constraints aren't met.
type GetAttachmentsOfExerciseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttachmentsOfExerciseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttachmentsOfExerciseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttachmentsOfExerciseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttachmentsOfExerciseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttachmentsOfExerciseRequestValidationError) ErrorName() string {
	return "GetAttachmentsOfExerciseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttachmentsOfExerciseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttachmentsOfExerciseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttachmentsOfExerciseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttachmentsOfExerciseRequestValidationError{}

// Validate checks the field values on GetAttachmentsOfExerciseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetAttachmentsOfExerciseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAttachmentsOfExerciseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAttachmentsOfExerciseResponseMultiError, or nil if none found.
func (m *GetAttachmentsOfExerciseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAttachmentsOfExerciseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAttachmentsOfExerciseResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAttachmentsOfExerciseResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAttachmentsOfExerciseResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAttachments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAttachmentsOfExerciseResponseValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAttachmentsOfExerciseResponseValidationError{
						field:  fmt.Sprintf("Attachments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAttachmentsOfExerciseResponseValidationError{
					field:  fmt.Sprintf("Attachments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAttachmentsOfExerciseResponseMultiError(errors)
	}

	return nil
}

// GetAttachmentsOfExerciseResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetAttachmentsOfExerciseResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAttachmentsOfExerciseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAttachmentsOfExerciseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAttachmentsOfExerciseResponseMultiError) AllErrors() []error { return m }

// GetAttachmentsOfExerciseResponseValidationError is the validation error
// returned by GetAttachmentsOfExerciseResponse.Validate if the designated
// constraints aren't met.
type GetAttachmentsOfExerciseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAttachmentsOfExerciseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAttachmentsOfExerciseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAttachmentsOfExerciseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAttachmentsOfExerciseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAttachmentsOfExerciseResponseValidationError) ErrorName() string {
	return "GetAttachmentsOfExerciseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAttachmentsOfExerciseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAttachmentsOfExerciseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAttachmentsOfExerciseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAttachmentsOfExerciseResponseValidationError{}
