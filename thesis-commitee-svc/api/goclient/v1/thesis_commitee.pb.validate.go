// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: thesis_commitee.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonCommiteeResponseMultiError, or nil if none found.
func (m *CommonCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Message

	if len(errors) > 0 {
		return CommonCommiteeResponseMultiError(errors)
	}

	return nil
}

// CommonCommiteeResponseMultiError is an error wrapping multiple validation
// errors returned by CommonCommiteeResponse.ValidateAll() if the designated
// constraints aren't met.
type CommonCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonCommiteeResponseMultiError) AllErrors() []error { return m }

// CommonCommiteeResponseValidationError is the validation error returned by
// CommonCommiteeResponse.Validate if the designated constraints aren't met.
type CommonCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonCommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonCommiteeResponseValidationError) ErrorName() string {
	return "CommonCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommonCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonCommiteeResponseValidationError{}

// Validate checks the field values on CommiteeInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommiteeInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommiteeInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommiteeInputMultiError, or
// nil if none found.
func (m *CommiteeInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CommiteeInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommiteeInputValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommiteeInputValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommiteeInputValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Shift

	// no validation rules for RoomID

	if len(errors) > 0 {
		return CommiteeInputMultiError(errors)
	}

	return nil
}

// CommiteeInputMultiError is an error wrapping multiple validation errors
// returned by CommiteeInput.ValidateAll() if the designated constraints
// aren't met.
type CommiteeInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommiteeInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommiteeInputMultiError) AllErrors() []error { return m }

// CommiteeInputValidationError is the validation error returned by
// CommiteeInput.Validate if the designated constraints aren't met.
type CommiteeInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommiteeInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommiteeInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommiteeInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommiteeInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommiteeInputValidationError) ErrorName() string { return "CommiteeInputValidationError" }

// Error satisfies the builtin error interface
func (e CommiteeInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommiteeInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommiteeInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommiteeInputValidationError{}

// Validate checks the field values on CommiteeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommiteeResponseMultiError, or nil if none found.
func (m *CommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommiteeResponseValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommiteeResponseValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommiteeResponseValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Shift

	// no validation rules for RoomID

	if len(errors) > 0 {
		return CommiteeResponseMultiError(errors)
	}

	return nil
}

// CommiteeResponseMultiError is an error wrapping multiple validation errors
// returned by CommiteeResponse.ValidateAll() if the designated constraints
// aren't met.
type CommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommiteeResponseMultiError) AllErrors() []error { return m }

// CommiteeResponseValidationError is the validation error returned by
// CommiteeResponse.Validate if the designated constraints aren't met.
type CommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommiteeResponseValidationError) ErrorName() string { return "CommiteeResponseValidationError" }

// Error satisfies the builtin error interface
func (e CommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommiteeResponseValidationError{}

// Validate checks the field values on CreateCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommiteeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommiteeRequestMultiError, or nil if none found.
func (m *CreateCommiteeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommiteeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommitee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommiteeRequestValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommiteeRequestValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommitee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommiteeRequestValidationError{
				field:  "Commitee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommiteeRequestMultiError(errors)
	}

	return nil
}

// CreateCommiteeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommiteeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommiteeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommiteeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommiteeRequestMultiError) AllErrors() []error { return m }

// CreateCommiteeRequestValidationError is the validation error returned by
// CreateCommiteeRequest.Validate if the designated constraints aren't met.
type CreateCommiteeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommiteeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommiteeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommiteeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommiteeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommiteeRequestValidationError) ErrorName() string {
	return "CreateCommiteeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommiteeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommiteeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommiteeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommiteeRequestValidationError{}

// Validate checks the field values on CreateCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommiteeResponseMultiError, or nil if none found.
func (m *CreateCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommiteeResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCommitee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommiteeResponseValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommiteeResponseValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommitee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommiteeResponseValidationError{
				field:  "Commitee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommiteeResponseMultiError(errors)
	}

	return nil
}

// CreateCommiteeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCommiteeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommiteeResponseMultiError) AllErrors() []error { return m }

// CreateCommiteeResponseValidationError is the validation error returned by
// CreateCommiteeResponse.Validate if the designated constraints aren't met.
type CreateCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommiteeResponseValidationError) ErrorName() string {
	return "CreateCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommiteeResponseValidationError{}

// Validate checks the field values on GetCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommiteeRequestMultiError, or nil if none found.
func (m *GetCommiteeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCommiteeRequestMultiError(errors)
	}

	return nil
}

// GetCommiteeRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommiteeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommiteeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteeRequestMultiError) AllErrors() []error { return m }

// GetCommiteeRequestValidationError is the validation error returned by
// GetCommiteeRequest.Validate if the designated constraints aren't met.
type GetCommiteeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteeRequestValidationError) ErrorName() string {
	return "GetCommiteeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteeRequestValidationError{}

// Validate checks the field values on GetCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommiteeResponseMultiError, or nil if none found.
func (m *GetCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommiteeResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCommitee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommiteeResponseValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommiteeResponseValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommitee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommiteeResponseValidationError{
				field:  "Commitee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommiteeResponseMultiError(errors)
	}

	return nil
}

// GetCommiteeResponseMultiError is an error wrapping multiple validation
// errors returned by GetCommiteeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteeResponseMultiError) AllErrors() []error { return m }

// GetCommiteeResponseValidationError is the validation error returned by
// GetCommiteeResponse.Validate if the designated constraints aren't met.
type GetCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteeResponseValidationError) ErrorName() string {
	return "GetCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteeResponseValidationError{}

// Validate checks the field values on UpdateCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommiteeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommiteeRequestMultiError, or nil if none found.
func (m *UpdateCommiteeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommiteeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCommitee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommiteeRequestValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommiteeRequestValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommitee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommiteeRequestValidationError{
				field:  "Commitee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCommiteeRequestMultiError(errors)
	}

	return nil
}

// UpdateCommiteeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCommiteeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommiteeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommiteeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommiteeRequestMultiError) AllErrors() []error { return m }

// UpdateCommiteeRequestValidationError is the validation error returned by
// UpdateCommiteeRequest.Validate if the designated constraints aren't met.
type UpdateCommiteeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommiteeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommiteeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommiteeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommiteeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommiteeRequestValidationError) ErrorName() string {
	return "UpdateCommiteeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommiteeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommiteeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommiteeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommiteeRequestValidationError{}

// Validate checks the field values on UpdateCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommiteeResponseMultiError, or nil if none found.
func (m *UpdateCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommiteeResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCommiteeResponseMultiError(errors)
	}

	return nil
}

// UpdateCommiteeResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCommiteeResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommiteeResponseMultiError) AllErrors() []error { return m }

// UpdateCommiteeResponseValidationError is the validation error returned by
// UpdateCommiteeResponse.Validate if the designated constraints aren't met.
type UpdateCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommiteeResponseValidationError) ErrorName() string {
	return "UpdateCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommiteeResponseValidationError{}

// Validate checks the field values on DeleteCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommiteeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommiteeRequestMultiError, or nil if none found.
func (m *DeleteCommiteeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommiteeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCommiteeRequestMultiError(errors)
	}

	return nil
}

// DeleteCommiteeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommiteeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommiteeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommiteeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommiteeRequestMultiError) AllErrors() []error { return m }

// DeleteCommiteeRequestValidationError is the validation error returned by
// DeleteCommiteeRequest.Validate if the designated constraints aren't met.
type DeleteCommiteeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommiteeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommiteeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommiteeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommiteeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommiteeRequestValidationError) ErrorName() string {
	return "DeleteCommiteeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommiteeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommiteeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommiteeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommiteeRequestValidationError{}

// Validate checks the field values on DeleteCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommiteeResponseMultiError, or nil if none found.
func (m *DeleteCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCommiteeResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteCommiteeResponseMultiError(errors)
	}

	return nil
}

// DeleteCommiteeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCommiteeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommiteeResponseMultiError) AllErrors() []error { return m }

// DeleteCommiteeResponseValidationError is the validation error returned by
// DeleteCommiteeResponse.Validate if the designated constraints aren't met.
type DeleteCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommiteeResponseValidationError) ErrorName() string {
	return "DeleteCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommiteeResponseValidationError{}

// Validate checks the field values on GetCommiteesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommiteesRequestMultiError, or nil if none found.
func (m *GetCommiteesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCommiteesRequestMultiError(errors)
	}

	return nil
}

// GetCommiteesRequestMultiError is an error wrapping multiple validation
// errors returned by GetCommiteesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCommiteesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteesRequestMultiError) AllErrors() []error { return m }

// GetCommiteesRequestValidationError is the validation error returned by
// GetCommiteesRequest.Validate if the designated constraints aren't met.
type GetCommiteesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteesRequestValidationError) ErrorName() string {
	return "GetCommiteesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteesRequestValidationError{}

// Validate checks the field values on GetCommiteesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommiteesResponseMultiError, or nil if none found.
func (m *GetCommiteesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommiteesResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommiteesResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommiteesResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalCount

	for idx, item := range m.GetCommitees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommiteesResponseValidationError{
						field:  fmt.Sprintf("Commitees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommiteesResponseValidationError{
						field:  fmt.Sprintf("Commitees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommiteesResponseValidationError{
					field:  fmt.Sprintf("Commitees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommiteesResponseMultiError(errors)
	}

	return nil
}

// GetCommiteesResponseMultiError is an error wrapping multiple validation
// errors returned by GetCommiteesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCommiteesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteesResponseMultiError) AllErrors() []error { return m }

// GetCommiteesResponseValidationError is the validation error returned by
// GetCommiteesResponse.Validate if the designated constraints aren't met.
type GetCommiteesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteesResponseValidationError) ErrorName() string {
	return "GetCommiteesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteesResponseValidationError{}

// Validate checks the field values on CommiteeUserDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommiteeUserDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommiteeUserDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommiteeUserDetailMultiError, or nil if none found.
func (m *CommiteeUserDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *CommiteeUserDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommiteeID

	// no validation rules for LecturerID

	if len(errors) > 0 {
		return CommiteeUserDetailMultiError(errors)
	}

	return nil
}

// CommiteeUserDetailMultiError is an error wrapping multiple validation errors
// returned by CommiteeUserDetail.ValidateAll() if the designated constraints
// aren't met.
type CommiteeUserDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommiteeUserDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommiteeUserDetailMultiError) AllErrors() []error { return m }

// CommiteeUserDetailValidationError is the validation error returned by
// CommiteeUserDetail.Validate if the designated constraints aren't met.
type CommiteeUserDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommiteeUserDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommiteeUserDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommiteeUserDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommiteeUserDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommiteeUserDetailValidationError) ErrorName() string {
	return "CommiteeUserDetailValidationError"
}

// Error satisfies the builtin error interface
func (e CommiteeUserDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommiteeUserDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommiteeUserDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommiteeUserDetailValidationError{}

// Validate checks the field values on CreateCommiteeUserDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommiteeUserDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommiteeUserDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCommiteeUserDetailRequestMultiError, or nil if none found.
func (m *CreateCommiteeUserDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommiteeUserDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommiteeUserDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommiteeUserDetailRequestValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommiteeUserDetailRequestValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommiteeUserDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommiteeUserDetailRequestValidationError{
				field:  "CommiteeUserDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommiteeUserDetailRequestMultiError(errors)
	}

	return nil
}

// CreateCommiteeUserDetailRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCommiteeUserDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateCommiteeUserDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommiteeUserDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommiteeUserDetailRequestMultiError) AllErrors() []error { return m }

// CreateCommiteeUserDetailRequestValidationError is the validation error
// returned by CreateCommiteeUserDetailRequest.Validate if the designated
// constraints aren't met.
type CreateCommiteeUserDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommiteeUserDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommiteeUserDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommiteeUserDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommiteeUserDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommiteeUserDetailRequestValidationError) ErrorName() string {
	return "CreateCommiteeUserDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommiteeUserDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommiteeUserDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommiteeUserDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommiteeUserDetailRequestValidationError{}

// Validate checks the field values on CreateCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCommiteeUserDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCommiteeUserDetailResponseMultiError, or nil if none found.
func (m *CreateCommiteeUserDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommiteeUserDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommiteeUserDetailResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCommiteeUserDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommiteeUserDetailResponseValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommiteeUserDetailResponseValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommiteeUserDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommiteeUserDetailResponseValidationError{
				field:  "CommiteeUserDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommiteeUserDetailResponseMultiError(errors)
	}

	return nil
}

// CreateCommiteeUserDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateCommiteeUserDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommiteeUserDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommiteeUserDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommiteeUserDetailResponseMultiError) AllErrors() []error { return m }

// CreateCommiteeUserDetailResponseValidationError is the validation error
// returned by CreateCommiteeUserDetailResponse.Validate if the designated
// constraints aren't met.
type CreateCommiteeUserDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommiteeUserDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommiteeUserDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommiteeUserDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommiteeUserDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommiteeUserDetailResponseValidationError) ErrorName() string {
	return "CreateCommiteeUserDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommiteeUserDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommiteeUserDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommiteeUserDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommiteeUserDetailResponseValidationError{}

// Validate checks the field values on GetCommiteeUserDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteeUserDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteeUserDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommiteeUserDetailRequestMultiError, or nil if none found.
func (m *GetCommiteeUserDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteeUserDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCommiteeUserDetailRequestMultiError(errors)
	}

	return nil
}

// GetCommiteeUserDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GetCommiteeUserDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCommiteeUserDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteeUserDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteeUserDetailRequestMultiError) AllErrors() []error { return m }

// GetCommiteeUserDetailRequestValidationError is the validation error returned
// by GetCommiteeUserDetailRequest.Validate if the designated constraints
// aren't met.
type GetCommiteeUserDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteeUserDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteeUserDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteeUserDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteeUserDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteeUserDetailRequestValidationError) ErrorName() string {
	return "GetCommiteeUserDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteeUserDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteeUserDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteeUserDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteeUserDetailRequestValidationError{}

// Validate checks the field values on GetCommiteeUserDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteeUserDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCommiteeUserDetailResponseMultiError, or nil if none found.
func (m *GetCommiteeUserDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteeUserDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommiteeUserDetailResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCommiteeUserDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommiteeUserDetailResponseValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommiteeUserDetailResponseValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommiteeUserDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommiteeUserDetailResponseValidationError{
				field:  "CommiteeUserDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommiteeUserDetailResponseMultiError(errors)
	}

	return nil
}

// GetCommiteeUserDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetCommiteeUserDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCommiteeUserDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteeUserDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteeUserDetailResponseMultiError) AllErrors() []error { return m }

// GetCommiteeUserDetailResponseValidationError is the validation error
// returned by GetCommiteeUserDetailResponse.Validate if the designated
// constraints aren't met.
type GetCommiteeUserDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteeUserDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteeUserDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteeUserDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteeUserDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteeUserDetailResponseValidationError) ErrorName() string {
	return "GetCommiteeUserDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteeUserDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteeUserDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteeUserDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteeUserDetailResponseValidationError{}

// Validate checks the field values on UpdateCommiteeUserDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommiteeUserDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommiteeUserDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCommiteeUserDetailRequestMultiError, or nil if none found.
func (m *UpdateCommiteeUserDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommiteeUserDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCommiteeUserDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommiteeUserDetailRequestValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommiteeUserDetailRequestValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommiteeUserDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommiteeUserDetailRequestValidationError{
				field:  "CommiteeUserDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCommiteeUserDetailRequestMultiError(errors)
	}

	return nil
}

// UpdateCommiteeUserDetailRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCommiteeUserDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateCommiteeUserDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommiteeUserDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommiteeUserDetailRequestMultiError) AllErrors() []error { return m }

// UpdateCommiteeUserDetailRequestValidationError is the validation error
// returned by UpdateCommiteeUserDetailRequest.Validate if the designated
// constraints aren't met.
type UpdateCommiteeUserDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommiteeUserDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommiteeUserDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommiteeUserDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommiteeUserDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommiteeUserDetailRequestValidationError) ErrorName() string {
	return "UpdateCommiteeUserDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommiteeUserDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommiteeUserDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommiteeUserDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommiteeUserDetailRequestValidationError{}

// Validate checks the field values on UpdateCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCommiteeUserDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCommiteeUserDetailResponseMultiError, or nil if none found.
func (m *UpdateCommiteeUserDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommiteeUserDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommiteeUserDetailResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCommiteeUserDetailResponseMultiError(errors)
	}

	return nil
}

// UpdateCommiteeUserDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCommiteeUserDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommiteeUserDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommiteeUserDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommiteeUserDetailResponseMultiError) AllErrors() []error { return m }

// UpdateCommiteeUserDetailResponseValidationError is the validation error
// returned by UpdateCommiteeUserDetailResponse.Validate if the designated
// constraints aren't met.
type UpdateCommiteeUserDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommiteeUserDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommiteeUserDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommiteeUserDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommiteeUserDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommiteeUserDetailResponseValidationError) ErrorName() string {
	return "UpdateCommiteeUserDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommiteeUserDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommiteeUserDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommiteeUserDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommiteeUserDetailResponseValidationError{}

// Validate checks the field values on DeleteCommiteeUserDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommiteeUserDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommiteeUserDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCommiteeUserDetailRequestMultiError, or nil if none found.
func (m *DeleteCommiteeUserDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommiteeUserDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommiteeID

	// no validation rules for LecturerID

	if len(errors) > 0 {
		return DeleteCommiteeUserDetailRequestMultiError(errors)
	}

	return nil
}

// DeleteCommiteeUserDetailRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCommiteeUserDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteCommiteeUserDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommiteeUserDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommiteeUserDetailRequestMultiError) AllErrors() []error { return m }

// DeleteCommiteeUserDetailRequestValidationError is the validation error
// returned by DeleteCommiteeUserDetailRequest.Validate if the designated
// constraints aren't met.
type DeleteCommiteeUserDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommiteeUserDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommiteeUserDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommiteeUserDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommiteeUserDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommiteeUserDetailRequestValidationError) ErrorName() string {
	return "DeleteCommiteeUserDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommiteeUserDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommiteeUserDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommiteeUserDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommiteeUserDetailRequestValidationError{}

// Validate checks the field values on DeleteCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteCommiteeUserDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCommiteeUserDetailResponseMultiError, or nil if none found.
func (m *DeleteCommiteeUserDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommiteeUserDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCommiteeUserDetailResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteCommiteeUserDetailResponseMultiError(errors)
	}

	return nil
}

// DeleteCommiteeUserDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteCommiteeUserDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommiteeUserDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommiteeUserDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommiteeUserDetailResponseMultiError) AllErrors() []error { return m }

// DeleteCommiteeUserDetailResponseValidationError is the validation error
// returned by DeleteCommiteeUserDetailResponse.Validate if the designated
// constraints aren't met.
type DeleteCommiteeUserDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommiteeUserDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommiteeUserDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommiteeUserDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommiteeUserDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommiteeUserDetailResponseValidationError) ErrorName() string {
	return "DeleteCommiteeUserDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommiteeUserDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommiteeUserDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommiteeUserDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommiteeUserDetailResponseValidationError{}

// Validate checks the field values on GetCommiteeUserDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteeUserDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteeUserDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCommiteeUserDetailsRequestMultiError, or nil if none found.
func (m *GetCommiteeUserDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteeUserDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCommiteeUserDetailsRequestMultiError(errors)
	}

	return nil
}

// GetCommiteeUserDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by GetCommiteeUserDetailsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetCommiteeUserDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteeUserDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteeUserDetailsRequestMultiError) AllErrors() []error { return m }

// GetCommiteeUserDetailsRequestValidationError is the validation error
// returned by GetCommiteeUserDetailsRequest.Validate if the designated
// constraints aren't met.
type GetCommiteeUserDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteeUserDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteeUserDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteeUserDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteeUserDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteeUserDetailsRequestValidationError) ErrorName() string {
	return "GetCommiteeUserDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteeUserDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteeUserDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteeUserDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteeUserDetailsRequestValidationError{}

// Validate checks the field values on GetCommiteeUserDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteeUserDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteeUserDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCommiteeUserDetailsResponseMultiError, or nil if none found.
func (m *GetCommiteeUserDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteeUserDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommiteeUserDetailsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommiteeUserDetailsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommiteeUserDetailsResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalCount

	for idx, item := range m.GetCommiteeUserDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommiteeUserDetailsResponseValidationError{
						field:  fmt.Sprintf("CommiteeUserDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommiteeUserDetailsResponseValidationError{
						field:  fmt.Sprintf("CommiteeUserDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommiteeUserDetailsResponseValidationError{
					field:  fmt.Sprintf("CommiteeUserDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommiteeUserDetailsResponseMultiError(errors)
	}

	return nil
}

// GetCommiteeUserDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by GetCommiteeUserDetailsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCommiteeUserDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteeUserDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteeUserDetailsResponseMultiError) AllErrors() []error { return m }

// GetCommiteeUserDetailsResponseValidationError is the validation error
// returned by GetCommiteeUserDetailsResponse.Validate if the designated
// constraints aren't met.
type GetCommiteeUserDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteeUserDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteeUserDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteeUserDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteeUserDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteeUserDetailsResponseValidationError) ErrorName() string {
	return "GetCommiteeUserDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteeUserDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteeUserDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteeUserDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteeUserDetailsResponseValidationError{}

// Validate checks the field values on
// GetAllCommiteeUserDetailsFromCommiteeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAllCommiteeUserDetailsFromCommiteeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetAllCommiteeUserDetailsFromCommiteeRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetAllCommiteeUserDetailsFromCommiteeRequestMultiError, or nil if none found.
func (m *GetAllCommiteeUserDetailsFromCommiteeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllCommiteeUserDetailsFromCommiteeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommiteeID

	if len(errors) > 0 {
		return GetAllCommiteeUserDetailsFromCommiteeRequestMultiError(errors)
	}

	return nil
}

// GetAllCommiteeUserDetailsFromCommiteeRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetAllCommiteeUserDetailsFromCommiteeRequest.ValidateAll() if the
// designated constraints aren't met.
type GetAllCommiteeUserDetailsFromCommiteeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllCommiteeUserDetailsFromCommiteeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllCommiteeUserDetailsFromCommiteeRequestMultiError) AllErrors() []error { return m }

// GetAllCommiteeUserDetailsFromCommiteeRequestValidationError is the
// validation error returned by
// GetAllCommiteeUserDetailsFromCommiteeRequest.Validate if the designated
// constraints aren't met.
type GetAllCommiteeUserDetailsFromCommiteeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllCommiteeUserDetailsFromCommiteeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllCommiteeUserDetailsFromCommiteeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllCommiteeUserDetailsFromCommiteeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllCommiteeUserDetailsFromCommiteeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllCommiteeUserDetailsFromCommiteeRequestValidationError) ErrorName() string {
	return "GetAllCommiteeUserDetailsFromCommiteeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllCommiteeUserDetailsFromCommiteeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllCommiteeUserDetailsFromCommiteeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllCommiteeUserDetailsFromCommiteeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllCommiteeUserDetailsFromCommiteeRequestValidationError{}

// Validate checks the field values on
// GetAllCommiteeUserDetailsFromCommiteeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetAllCommiteeUserDetailsFromCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetAllCommiteeUserDetailsFromCommiteeResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetAllCommiteeUserDetailsFromCommiteeResponseMultiError, or nil if none found.
func (m *GetAllCommiteeUserDetailsFromCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllCommiteeUserDetailsFromCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllCommiteeUserDetailsFromCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllCommiteeUserDetailsFromCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllCommiteeUserDetailsFromCommiteeResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCommiteeUserDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllCommiteeUserDetailsFromCommiteeResponseValidationError{
						field:  fmt.Sprintf("CommiteeUserDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllCommiteeUserDetailsFromCommiteeResponseValidationError{
						field:  fmt.Sprintf("CommiteeUserDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllCommiteeUserDetailsFromCommiteeResponseValidationError{
					field:  fmt.Sprintf("CommiteeUserDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllCommiteeUserDetailsFromCommiteeResponseMultiError(errors)
	}

	return nil
}

// GetAllCommiteeUserDetailsFromCommiteeResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetAllCommiteeUserDetailsFromCommiteeResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAllCommiteeUserDetailsFromCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllCommiteeUserDetailsFromCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllCommiteeUserDetailsFromCommiteeResponseMultiError) AllErrors() []error { return m }

// GetAllCommiteeUserDetailsFromCommiteeResponseValidationError is the
// validation error returned by
// GetAllCommiteeUserDetailsFromCommiteeResponse.Validate if the designated
// constraints aren't met.
type GetAllCommiteeUserDetailsFromCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllCommiteeUserDetailsFromCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllCommiteeUserDetailsFromCommiteeResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetAllCommiteeUserDetailsFromCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllCommiteeUserDetailsFromCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllCommiteeUserDetailsFromCommiteeResponseValidationError) ErrorName() string {
	return "GetAllCommiteeUserDetailsFromCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllCommiteeUserDetailsFromCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllCommiteeUserDetailsFromCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllCommiteeUserDetailsFromCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllCommiteeUserDetailsFromCommiteeResponseValidationError{}

// Validate checks the field values on RoomInput with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomInput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomInputMultiError, or nil
// if none found.
func (m *RoomInput) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for School

	// no validation rules for Description

	if len(errors) > 0 {
		return RoomInputMultiError(errors)
	}

	return nil
}

// RoomInputMultiError is an error wrapping multiple validation errors returned
// by RoomInput.ValidateAll() if the designated constraints aren't met.
type RoomInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomInputMultiError) AllErrors() []error { return m }

// RoomInputValidationError is the validation error returned by
// RoomInput.Validate if the designated constraints aren't met.
type RoomInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomInputValidationError) ErrorName() string { return "RoomInputValidationError" }

// Error satisfies the builtin error interface
func (e RoomInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomInputValidationError{}

// Validate checks the field values on RoomResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomResponseMultiError, or
// nil if none found.
func (m *RoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for School

	// no validation rules for Description

	if len(errors) > 0 {
		return RoomResponseMultiError(errors)
	}

	return nil
}

// RoomResponseMultiError is an error wrapping multiple validation errors
// returned by RoomResponse.ValidateAll() if the designated constraints aren't met.
type RoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomResponseMultiError) AllErrors() []error { return m }

// RoomResponseValidationError is the validation error returned by
// RoomResponse.Validate if the designated constraints aren't met.
type RoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomResponseValidationError) ErrorName() string { return "RoomResponseValidationError" }

// Error satisfies the builtin error interface
func (e RoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomResponseValidationError{}

// Validate checks the field values on CreateRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomRequestMultiError, or nil if none found.
func (m *CreateRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoomRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoomRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoomRequestValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoomRequestMultiError(errors)
	}

	return nil
}

// CreateRoomRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomRequestMultiError) AllErrors() []error { return m }

// CreateRoomRequestValidationError is the validation error returned by
// CreateRoomRequest.Validate if the designated constraints aren't met.
type CreateRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomRequestValidationError) ErrorName() string {
	return "CreateRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomRequestValidationError{}

// Validate checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomResponseMultiError, or nil if none found.
func (m *CreateRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoomResponseValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoomResponseMultiError(errors)
	}

	return nil
}

// CreateRoomResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomResponseMultiError) AllErrors() []error { return m }

// CreateRoomResponseValidationError is the validation error returned by
// CreateRoomResponse.Validate if the designated constraints aren't met.
type CreateRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomResponseValidationError) ErrorName() string {
	return "CreateRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomResponseValidationError{}

// Validate checks the field values on GetRoomRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoomRequestMultiError,
// or nil if none found.
func (m *GetRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRoomRequestMultiError(errors)
	}

	return nil
}

// GetRoomRequestMultiError is an error wrapping multiple validation errors
// returned by GetRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomRequestMultiError) AllErrors() []error { return m }

// GetRoomRequestValidationError is the validation error returned by
// GetRoomRequest.Validate if the designated constraints aren't met.
type GetRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomRequestValidationError) ErrorName() string { return "GetRoomRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomRequestValidationError{}

// Validate checks the field values on GetRoomResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomResponseMultiError, or nil if none found.
func (m *GetRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoomResponseValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRoomResponseMultiError(errors)
	}

	return nil
}

// GetRoomResponseMultiError is an error wrapping multiple validation errors
// returned by GetRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomResponseMultiError) AllErrors() []error { return m }

// GetRoomResponseValidationError is the validation error returned by
// GetRoomResponse.Validate if the designated constraints aren't met.
type GetRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomResponseValidationError) ErrorName() string { return "GetRoomResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomResponseValidationError{}

// Validate checks the field values on UpdateRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoomRequestMultiError, or nil if none found.
func (m *UpdateRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoomRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoomRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoomRequestValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoomRequestMultiError(errors)
	}

	return nil
}

// UpdateRoomRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoomRequestMultiError) AllErrors() []error { return m }

// UpdateRoomRequestValidationError is the validation error returned by
// UpdateRoomRequest.Validate if the designated constraints aren't met.
type UpdateRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoomRequestValidationError) ErrorName() string {
	return "UpdateRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoomRequestValidationError{}

// Validate checks the field values on UpdateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoomResponseMultiError, or nil if none found.
func (m *UpdateRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoomResponseMultiError(errors)
	}

	return nil
}

// UpdateRoomResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoomResponseMultiError) AllErrors() []error { return m }

// UpdateRoomResponseValidationError is the validation error returned by
// UpdateRoomResponse.Validate if the designated constraints aren't met.
type UpdateRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoomResponseValidationError) ErrorName() string {
	return "UpdateRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoomResponseValidationError{}

// Validate checks the field values on DeleteRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoomRequestMultiError, or nil if none found.
func (m *DeleteRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRoomRequestMultiError(errors)
	}

	return nil
}

// DeleteRoomRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoomRequestMultiError) AllErrors() []error { return m }

// DeleteRoomRequestValidationError is the validation error returned by
// DeleteRoomRequest.Validate if the designated constraints aren't met.
type DeleteRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoomRequestValidationError) ErrorName() string {
	return "DeleteRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoomRequestValidationError{}

// Validate checks the field values on DeleteRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoomResponseMultiError, or nil if none found.
func (m *DeleteRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRoomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteRoomResponseMultiError(errors)
	}

	return nil
}

// DeleteRoomResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoomResponseMultiError) AllErrors() []error { return m }

// DeleteRoomResponseValidationError is the validation error returned by
// DeleteRoomResponse.Validate if the designated constraints aren't met.
type DeleteRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoomResponseValidationError) ErrorName() string {
	return "DeleteRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoomResponseValidationError{}

// Validate checks the field values on GetRoomsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoomsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomsRequestMultiError, or nil if none found.
func (m *GetRoomsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.School != nil {
		// no validation rules for School
	}

	if len(errors) > 0 {
		return GetRoomsRequestMultiError(errors)
	}

	return nil
}

// GetRoomsRequestMultiError is an error wrapping multiple validation errors
// returned by GetRoomsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRoomsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomsRequestMultiError) AllErrors() []error { return m }

// GetRoomsRequestValidationError is the validation error returned by
// GetRoomsRequest.Validate if the designated constraints aren't met.
type GetRoomsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomsRequestValidationError) ErrorName() string { return "GetRoomsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRoomsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomsRequestValidationError{}

// Validate checks the field values on GetRoomsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoomsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomsResponseMultiError, or nil if none found.
func (m *GetRoomsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoomsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoomsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoomsResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalCount

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoomsResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoomsResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoomsResponseValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoomsResponseMultiError(errors)
	}

	return nil
}

// GetRoomsResponseMultiError is an error wrapping multiple validation errors
// returned by GetRoomsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRoomsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomsResponseMultiError) AllErrors() []error { return m }

// GetRoomsResponseValidationError is the validation error returned by
// GetRoomsResponse.Validate if the designated constraints aren't met.
type GetRoomsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomsResponseValidationError) ErrorName() string { return "GetRoomsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRoomsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomsResponseValidationError{}

// Validate checks the field values on GetAllRoomsFromCommiteeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllRoomsFromCommiteeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRoomsFromCommiteeRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAllRoomsFromCommiteeRequestMultiError, or nil if none found.
func (m *GetAllRoomsFromCommiteeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRoomsFromCommiteeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommiteeID

	if len(errors) > 0 {
		return GetAllRoomsFromCommiteeRequestMultiError(errors)
	}

	return nil
}

// GetAllRoomsFromCommiteeRequestMultiError is an error wrapping multiple
// validation errors returned by GetAllRoomsFromCommiteeRequest.ValidateAll()
// if the designated constraints aren't met.
type GetAllRoomsFromCommiteeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRoomsFromCommiteeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRoomsFromCommiteeRequestMultiError) AllErrors() []error { return m }

// GetAllRoomsFromCommiteeRequestValidationError is the validation error
// returned by GetAllRoomsFromCommiteeRequest.Validate if the designated
// constraints aren't met.
type GetAllRoomsFromCommiteeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRoomsFromCommiteeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRoomsFromCommiteeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRoomsFromCommiteeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRoomsFromCommiteeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRoomsFromCommiteeRequestValidationError) ErrorName() string {
	return "GetAllRoomsFromCommiteeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllRoomsFromCommiteeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRoomsFromCommiteeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRoomsFromCommiteeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRoomsFromCommiteeRequestValidationError{}

// Validate checks the field values on GetAllRoomsFromCommiteeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllRoomsFromCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllRoomsFromCommiteeResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetAllRoomsFromCommiteeResponseMultiError, or nil if none found.
func (m *GetAllRoomsFromCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllRoomsFromCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllRoomsFromCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllRoomsFromCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllRoomsFromCommiteeResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllRoomsFromCommiteeResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllRoomsFromCommiteeResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllRoomsFromCommiteeResponseValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllRoomsFromCommiteeResponseMultiError(errors)
	}

	return nil
}

// GetAllRoomsFromCommiteeResponseMultiError is an error wrapping multiple
// validation errors returned by GetAllRoomsFromCommiteeResponse.ValidateAll()
// if the designated constraints aren't met.
type GetAllRoomsFromCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllRoomsFromCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllRoomsFromCommiteeResponseMultiError) AllErrors() []error { return m }

// GetAllRoomsFromCommiteeResponseValidationError is the validation error
// returned by GetAllRoomsFromCommiteeResponse.Validate if the designated
// constraints aren't met.
type GetAllRoomsFromCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllRoomsFromCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllRoomsFromCommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllRoomsFromCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllRoomsFromCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllRoomsFromCommiteeResponseValidationError) ErrorName() string {
	return "GetAllRoomsFromCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllRoomsFromCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllRoomsFromCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllRoomsFromCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllRoomsFromCommiteeResponseValidationError{}
