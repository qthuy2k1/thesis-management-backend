// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: schedule_commitee.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TimeSlot with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeSlot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeSlot with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeSlotMultiError, or nil
// if none found.
func (m *TimeSlot) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeSlot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Date

	// no validation rules for Shift

	// no validation rules for Id

	// no validation rules for Time

	// no validation rules for TimeSlotsID

	if len(errors) > 0 {
		return TimeSlotMultiError(errors)
	}

	return nil
}

// TimeSlotMultiError is an error wrapping multiple validation errors returned
// by TimeSlot.ValidateAll() if the designated constraints aren't met.
type TimeSlotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeSlotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeSlotMultiError) AllErrors() []error { return m }

// TimeSlotValidationError is the validation error returned by
// TimeSlot.Validate if the designated constraints aren't met.
type TimeSlotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeSlotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeSlotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeSlotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeSlotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeSlotValidationError) ErrorName() string { return "TimeSlotValidationError" }

// Error satisfies the builtin error interface
func (e TimeSlotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeSlot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeSlotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeSlotValidationError{}

// Validate checks the field values on TimeSlotsInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeSlotsInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeSlotsInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeSlotsInputMultiError,
// or nil if none found.
func (m *TimeSlotsInput) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeSlotsInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ScheduleID

	if len(errors) > 0 {
		return TimeSlotsInputMultiError(errors)
	}

	return nil
}

// TimeSlotsInputMultiError is an error wrapping multiple validation errors
// returned by TimeSlotsInput.ValidateAll() if the designated constraints
// aren't met.
type TimeSlotsInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeSlotsInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeSlotsInputMultiError) AllErrors() []error { return m }

// TimeSlotsInputValidationError is the validation error returned by
// TimeSlotsInput.Validate if the designated constraints aren't met.
type TimeSlotsInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeSlotsInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeSlotsInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeSlotsInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeSlotsInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeSlotsInputValidationError) ErrorName() string { return "TimeSlotsInputValidationError" }

// Error satisfies the builtin error interface
func (e TimeSlotsInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeSlotsInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeSlotsInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeSlotsInputValidationError{}

// Validate checks the field values on TimeSlotsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimeSlotsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeSlotsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeSlotsResponseMultiError, or nil if none found.
func (m *TimeSlotsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeSlotsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ScheduleID

	if all {
		switch v := interface{}(m.GetTimeSlot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeSlotsResponseValidationError{
					field:  "TimeSlot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeSlotsResponseValidationError{
					field:  "TimeSlot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeSlot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeSlotsResponseValidationError{
				field:  "TimeSlot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimeSlotsResponseMultiError(errors)
	}

	return nil
}

// TimeSlotsResponseMultiError is an error wrapping multiple validation errors
// returned by TimeSlotsResponse.ValidateAll() if the designated constraints
// aren't met.
type TimeSlotsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeSlotsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeSlotsResponseMultiError) AllErrors() []error { return m }

// TimeSlotsResponseValidationError is the validation error returned by
// TimeSlotsResponse.Validate if the designated constraints aren't met.
type TimeSlotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeSlotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeSlotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeSlotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeSlotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeSlotsResponseValidationError) ErrorName() string {
	return "TimeSlotsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TimeSlotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeSlotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeSlotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeSlotsResponseValidationError{}

// Validate checks the field values on RoomSchedule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomScheduleMultiError, or
// nil if none found.
func (m *RoomSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for School

	// no validation rules for Type

	// no validation rules for Description

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return RoomScheduleMultiError(errors)
	}

	return nil
}

// RoomScheduleMultiError is an error wrapping multiple validation errors
// returned by RoomSchedule.ValidateAll() if the designated constraints aren't met.
type RoomScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomScheduleMultiError) AllErrors() []error { return m }

// RoomScheduleValidationError is the validation error returned by
// RoomSchedule.Validate if the designated constraints aren't met.
type RoomScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomScheduleValidationError) ErrorName() string { return "RoomScheduleValidationError" }

// Error satisfies the builtin error interface
func (e RoomScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomScheduleValidationError{}

// Validate checks the field values on ScheduleInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScheduleInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScheduleInputMultiError, or
// nil if none found.
func (m *ScheduleInput) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomID

	// no validation rules for ThesisID

	if len(errors) > 0 {
		return ScheduleInputMultiError(errors)
	}

	return nil
}

// ScheduleInputMultiError is an error wrapping multiple validation errors
// returned by ScheduleInput.ValidateAll() if the designated constraints
// aren't met.
type ScheduleInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleInputMultiError) AllErrors() []error { return m }

// ScheduleInputValidationError is the validation error returned by
// ScheduleInput.Validate if the designated constraints aren't met.
type ScheduleInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleInputValidationError) ErrorName() string { return "ScheduleInputValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleInputValidationError{}

// Validate checks the field values on ScheduleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScheduleResponseMultiError, or nil if none found.
func (m *ScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetTimeSlots() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScheduleResponseValidationError{
						field:  fmt.Sprintf("TimeSlots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScheduleResponseValidationError{
						field:  fmt.Sprintf("TimeSlots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScheduleResponseValidationError{
					field:  fmt.Sprintf("TimeSlots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleResponseValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ThesisID

	if len(errors) > 0 {
		return ScheduleResponseMultiError(errors)
	}

	return nil
}

// ScheduleResponseMultiError is an error wrapping multiple validation errors
// returned by ScheduleResponse.ValidateAll() if the designated constraints
// aren't met.
type ScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleResponseMultiError) AllErrors() []error { return m }

// ScheduleResponseValidationError is the validation error returned by
// ScheduleResponse.Validate if the designated constraints aren't met.
type ScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleResponseValidationError) ErrorName() string { return "ScheduleResponseValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleResponseValidationError{}

// Validate checks the field values on Thesis with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Thesis) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Thesis with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ThesisMultiError, or nil if none found.
func (m *Thesis) ValidateAll() error {
	return m.validate(true)
}

func (m *Thesis) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThesisValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThesisValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThesisValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ThesisMultiError(errors)
	}

	return nil
}

// ThesisMultiError is an error wrapping multiple validation errors returned by
// Thesis.ValidateAll() if the designated constraints aren't met.
type ThesisMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThesisMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThesisMultiError) AllErrors() []error { return m }

// ThesisValidationError is the validation error returned by Thesis.Validate if
// the designated constraints aren't met.
type ThesisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThesisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThesisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThesisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThesisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThesisValidationError) ErrorName() string { return "ThesisValidationError" }

// Error satisfies the builtin error interface
func (e ThesisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThesis.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThesisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThesisValidationError{}

// Validate checks the field values on ThesisResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ThesisResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThesisResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ThesisResponseMultiError,
// or nil if none found.
func (m *ThesisResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ThesisResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetThesis()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ThesisResponseValidationError{
					field:  "Thesis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ThesisResponseValidationError{
					field:  "Thesis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThesis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ThesisResponseValidationError{
				field:  "Thesis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ThesisResponseMultiError(errors)
	}

	return nil
}

// ThesisResponseMultiError is an error wrapping multiple validation errors
// returned by ThesisResponse.ValidateAll() if the designated constraints
// aren't met.
type ThesisResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThesisResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThesisResponseMultiError) AllErrors() []error { return m }

// ThesisResponseValidationError is the validation error returned by
// ThesisResponse.Validate if the designated constraints aren't met.
type ThesisResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThesisResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThesisResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThesisResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThesisResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThesisResponseValidationError) ErrorName() string { return "ThesisResponseValidationError" }

// Error satisfies the builtin error interface
func (e ThesisResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThesisResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThesisResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThesisResponseValidationError{}

// Validate checks the field values on GetThesisesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThesisesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThesisesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThesisesRequestMultiError, or nil if none found.
func (m *GetThesisesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThesisesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetThesisesRequestMultiError(errors)
	}

	return nil
}

// GetThesisesRequestMultiError is an error wrapping multiple validation errors
// returned by GetThesisesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetThesisesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThesisesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThesisesRequestMultiError) AllErrors() []error { return m }

// GetThesisesRequestValidationError is the validation error returned by
// GetThesisesRequest.Validate if the designated constraints aren't met.
type GetThesisesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThesisesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThesisesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThesisesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThesisesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThesisesRequestValidationError) ErrorName() string {
	return "GetThesisesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetThesisesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThesisesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThesisesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThesisesRequestValidationError{}

// Validate checks the field values on GetThesisesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThesisesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThesisesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThesisesResponseMultiError, or nil if none found.
func (m *GetThesisesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThesisesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScheduleReport()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetThesisesResponseValidationError{
					field:  "ScheduleReport",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetThesisesResponseValidationError{
					field:  "ScheduleReport",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduleReport()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetThesisesResponseValidationError{
				field:  "ScheduleReport",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetThesisesResponseMultiError(errors)
	}

	return nil
}

// GetThesisesResponseMultiError is an error wrapping multiple validation
// errors returned by GetThesisesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetThesisesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThesisesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThesisesResponseMultiError) AllErrors() []error { return m }

// GetThesisesResponseValidationError is the validation error returned by
// GetThesisesResponse.Validate if the designated constraints aren't met.
type GetThesisesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThesisesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThesisesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThesisesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThesisesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThesisesResponseValidationError) ErrorName() string {
	return "GetThesisesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetThesisesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThesisesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThesisesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThesisesResponseValidationError{}

// Validate checks the field values on CommonScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonScheduleResponseMultiError, or nil if none found.
func (m *CommonScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Message

	if len(errors) > 0 {
		return CommonScheduleResponseMultiError(errors)
	}

	return nil
}

// CommonScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by CommonScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type CommonScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonScheduleResponseMultiError) AllErrors() []error { return m }

// CommonScheduleResponseValidationError is the validation error returned by
// CommonScheduleResponse.Validate if the designated constraints aren't met.
type CommonScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonScheduleResponseValidationError) ErrorName() string {
	return "CommonScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommonScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonScheduleResponseValidationError{}

// Validate checks the field values on CouncilInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouncilInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouncilInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouncilInputMultiError, or
// nil if none found.
func (m *CouncilInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CouncilInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LecturerID

	// no validation rules for ThesisID

	if len(errors) > 0 {
		return CouncilInputMultiError(errors)
	}

	return nil
}

// CouncilInputMultiError is an error wrapping multiple validation errors
// returned by CouncilInput.ValidateAll() if the designated constraints aren't met.
type CouncilInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouncilInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouncilInputMultiError) AllErrors() []error { return m }

// CouncilInputValidationError is the validation error returned by
// CouncilInput.Validate if the designated constraints aren't met.
type CouncilInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouncilInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouncilInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouncilInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouncilInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouncilInputValidationError) ErrorName() string { return "CouncilInputValidationError" }

// Error satisfies the builtin error interface
func (e CouncilInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouncilInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouncilInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouncilInputValidationError{}

// Validate checks the field values on CouncilResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CouncilResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouncilResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouncilResponseMultiError, or nil if none found.
func (m *CouncilResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CouncilResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for LecturerID

	// no validation rules for ThesisID

	if len(errors) > 0 {
		return CouncilResponseMultiError(errors)
	}

	return nil
}

// CouncilResponseMultiError is an error wrapping multiple validation errors
// returned by CouncilResponse.ValidateAll() if the designated constraints
// aren't met.
type CouncilResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouncilResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouncilResponseMultiError) AllErrors() []error { return m }

// CouncilResponseValidationError is the validation error returned by
// CouncilResponse.Validate if the designated constraints aren't met.
type CouncilResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouncilResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouncilResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouncilResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouncilResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouncilResponseValidationError) ErrorName() string { return "CouncilResponseValidationError" }

// Error satisfies the builtin error interface
func (e CouncilResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouncilResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouncilResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouncilResponseValidationError{}

// Validate checks the field values on CreateCouncilRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCouncilRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCouncilRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCouncilRequestMultiError, or nil if none found.
func (m *CreateCouncilRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCouncilRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCouncil()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCouncilRequestValidationError{
					field:  "Council",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCouncilRequestValidationError{
					field:  "Council",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCouncil()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCouncilRequestValidationError{
				field:  "Council",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCouncilRequestMultiError(errors)
	}

	return nil
}

// CreateCouncilRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCouncilRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCouncilRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCouncilRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCouncilRequestMultiError) AllErrors() []error { return m }

// CreateCouncilRequestValidationError is the validation error returned by
// CreateCouncilRequest.Validate if the designated constraints aren't met.
type CreateCouncilRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCouncilRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCouncilRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCouncilRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCouncilRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCouncilRequestValidationError) ErrorName() string {
	return "CreateCouncilRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCouncilRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCouncilRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCouncilRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCouncilRequestValidationError{}

// Validate checks the field values on CreateCouncilResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCouncilResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCouncilResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCouncilResponseMultiError, or nil if none found.
func (m *CreateCouncilResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCouncilResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCouncilResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCouncilResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCouncilResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCouncilResponseMultiError(errors)
	}

	return nil
}

// CreateCouncilResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCouncilResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCouncilResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCouncilResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCouncilResponseMultiError) AllErrors() []error { return m }

// CreateCouncilResponseValidationError is the validation error returned by
// CreateCouncilResponse.Validate if the designated constraints aren't met.
type CreateCouncilResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCouncilResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCouncilResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCouncilResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCouncilResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCouncilResponseValidationError) ErrorName() string {
	return "CreateCouncilResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCouncilResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCouncilResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCouncilResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCouncilResponseValidationError{}

// Validate checks the field values on GetCouncilRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCouncilRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouncilRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouncilRequestMultiError, or nil if none found.
func (m *GetCouncilRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouncilRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCouncilRequestMultiError(errors)
	}

	return nil
}

// GetCouncilRequestMultiError is an error wrapping multiple validation errors
// returned by GetCouncilRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCouncilRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouncilRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouncilRequestMultiError) AllErrors() []error { return m }

// GetCouncilRequestValidationError is the validation error returned by
// GetCouncilRequest.Validate if the designated constraints aren't met.
type GetCouncilRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouncilRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouncilRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouncilRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouncilRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouncilRequestValidationError) ErrorName() string {
	return "GetCouncilRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouncilRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouncilRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouncilRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouncilRequestValidationError{}

// Validate checks the field values on GetCouncilResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCouncilResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouncilResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouncilResponseMultiError, or nil if none found.
func (m *GetCouncilResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouncilResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCouncil()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCouncilResponseValidationError{
					field:  "Council",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCouncilResponseValidationError{
					field:  "Council",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCouncil()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCouncilResponseValidationError{
				field:  "Council",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCouncilResponseMultiError(errors)
	}

	return nil
}

// GetCouncilResponseMultiError is an error wrapping multiple validation errors
// returned by GetCouncilResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCouncilResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouncilResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouncilResponseMultiError) AllErrors() []error { return m }

// GetCouncilResponseValidationError is the validation error returned by
// GetCouncilResponse.Validate if the designated constraints aren't met.
type GetCouncilResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouncilResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouncilResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouncilResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouncilResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouncilResponseValidationError) ErrorName() string {
	return "GetCouncilResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouncilResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouncilResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouncilResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouncilResponseValidationError{}

// Validate checks the field values on GetCouncilsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCouncilsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouncilsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouncilsRequestMultiError, or nil if none found.
func (m *GetCouncilsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouncilsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCouncilsRequestMultiError(errors)
	}

	return nil
}

// GetCouncilsRequestMultiError is an error wrapping multiple validation errors
// returned by GetCouncilsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCouncilsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouncilsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouncilsRequestMultiError) AllErrors() []error { return m }

// GetCouncilsRequestValidationError is the validation error returned by
// GetCouncilsRequest.Validate if the designated constraints aren't met.
type GetCouncilsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouncilsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouncilsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouncilsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouncilsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouncilsRequestValidationError) ErrorName() string {
	return "GetCouncilsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouncilsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouncilsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouncilsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouncilsRequestValidationError{}

// Validate checks the field values on GetCouncilsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCouncilsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouncilsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouncilsResponseMultiError, or nil if none found.
func (m *GetCouncilsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouncilsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCouncils() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCouncilsResponseValidationError{
						field:  fmt.Sprintf("Councils[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCouncilsResponseValidationError{
						field:  fmt.Sprintf("Councils[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCouncilsResponseValidationError{
					field:  fmt.Sprintf("Councils[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCouncilsResponseMultiError(errors)
	}

	return nil
}

// GetCouncilsResponseMultiError is an error wrapping multiple validation
// errors returned by GetCouncilsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCouncilsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouncilsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouncilsResponseMultiError) AllErrors() []error { return m }

// GetCouncilsResponseValidationError is the validation error returned by
// GetCouncilsResponse.Validate if the designated constraints aren't met.
type GetCouncilsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouncilsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouncilsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouncilsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouncilsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouncilsResponseValidationError) ErrorName() string {
	return "GetCouncilsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouncilsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouncilsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouncilsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouncilsResponseValidationError{}

// Validate checks the field values on GetCouncilsByThesisIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCouncilsByThesisIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouncilsByThesisIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouncilsByThesisIDRequestMultiError, or nil if none found.
func (m *GetCouncilsByThesisIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouncilsByThesisIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThesisID

	if len(errors) > 0 {
		return GetCouncilsByThesisIDRequestMultiError(errors)
	}

	return nil
}

// GetCouncilsByThesisIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetCouncilsByThesisIDRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCouncilsByThesisIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouncilsByThesisIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouncilsByThesisIDRequestMultiError) AllErrors() []error { return m }

// GetCouncilsByThesisIDRequestValidationError is the validation error returned
// by GetCouncilsByThesisIDRequest.Validate if the designated constraints
// aren't met.
type GetCouncilsByThesisIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouncilsByThesisIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouncilsByThesisIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouncilsByThesisIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouncilsByThesisIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouncilsByThesisIDRequestValidationError) ErrorName() string {
	return "GetCouncilsByThesisIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouncilsByThesisIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouncilsByThesisIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouncilsByThesisIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouncilsByThesisIDRequestValidationError{}

// Validate checks the field values on GetCouncilsByThesisIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCouncilsByThesisIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouncilsByThesisIDResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCouncilsByThesisIDResponseMultiError, or nil if none found.
func (m *GetCouncilsByThesisIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouncilsByThesisIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCouncils() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCouncilsByThesisIDResponseValidationError{
						field:  fmt.Sprintf("Councils[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCouncilsByThesisIDResponseValidationError{
						field:  fmt.Sprintf("Councils[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCouncilsByThesisIDResponseValidationError{
					field:  fmt.Sprintf("Councils[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCouncilsByThesisIDResponseMultiError(errors)
	}

	return nil
}

// GetCouncilsByThesisIDResponseMultiError is an error wrapping multiple
// validation errors returned by GetCouncilsByThesisIDResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCouncilsByThesisIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouncilsByThesisIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouncilsByThesisIDResponseMultiError) AllErrors() []error { return m }

// GetCouncilsByThesisIDResponseValidationError is the validation error
// returned by GetCouncilsByThesisIDResponse.Validate if the designated
// constraints aren't met.
type GetCouncilsByThesisIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouncilsByThesisIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouncilsByThesisIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouncilsByThesisIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouncilsByThesisIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouncilsByThesisIDResponseValidationError) ErrorName() string {
	return "GetCouncilsByThesisIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouncilsByThesisIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouncilsByThesisIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouncilsByThesisIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouncilsByThesisIDResponseValidationError{}

// Validate checks the field values on CreateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScheduleRequestMultiError, or nil if none found.
func (m *CreateScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateScheduleRequestValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateScheduleRequestValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateScheduleRequestValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateScheduleRequestMultiError(errors)
	}

	return nil
}

// CreateScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScheduleRequestMultiError) AllErrors() []error { return m }

// CreateScheduleRequestValidationError is the validation error returned by
// CreateScheduleRequest.Validate if the designated constraints aren't met.
type CreateScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScheduleRequestValidationError) ErrorName() string {
	return "CreateScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScheduleRequestValidationError{}

// Validate checks the field values on CreateScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateScheduleResponseMultiError, or nil if none found.
func (m *CreateScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateScheduleResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateScheduleResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateScheduleResponseValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateScheduleResponseMultiError(errors)
	}

	return nil
}

// CreateScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateScheduleResponseMultiError) AllErrors() []error { return m }

// CreateScheduleResponseValidationError is the validation error returned by
// CreateScheduleResponse.Validate if the designated constraints aren't met.
type CreateScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateScheduleResponseValidationError) ErrorName() string {
	return "CreateScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateScheduleResponseValidationError{}

// Validate checks the field values on GetScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScheduleRequestMultiError, or nil if none found.
func (m *GetScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetScheduleRequestMultiError(errors)
	}

	return nil
}

// GetScheduleRequestMultiError is an error wrapping multiple validation errors
// returned by GetScheduleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScheduleRequestMultiError) AllErrors() []error { return m }

// GetScheduleRequestValidationError is the validation error returned by
// GetScheduleRequest.Validate if the designated constraints aren't met.
type GetScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScheduleRequestValidationError) ErrorName() string {
	return "GetScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScheduleRequestValidationError{}

// Validate checks the field values on GetScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScheduleResponseMultiError, or nil if none found.
func (m *GetScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetScheduleResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetScheduleResponseValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetScheduleResponseValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetScheduleResponseMultiError(errors)
	}

	return nil
}

// GetScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by GetScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type GetScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScheduleResponseMultiError) AllErrors() []error { return m }

// GetScheduleResponseValidationError is the validation error returned by
// GetScheduleResponse.Validate if the designated constraints aren't met.
type GetScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScheduleResponseValidationError) ErrorName() string {
	return "GetScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScheduleResponseValidationError{}

// Validate checks the field values on GetSchedulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSchedulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSchedulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSchedulesRequestMultiError, or nil if none found.
func (m *GetSchedulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSchedulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSchedulesRequestMultiError(errors)
	}

	return nil
}

// GetSchedulesRequestMultiError is an error wrapping multiple validation
// errors returned by GetSchedulesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSchedulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSchedulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSchedulesRequestMultiError) AllErrors() []error { return m }

// GetSchedulesRequestValidationError is the validation error returned by
// GetSchedulesRequest.Validate if the designated constraints aren't met.
type GetSchedulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSchedulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSchedulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSchedulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSchedulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSchedulesRequestValidationError) ErrorName() string {
	return "GetSchedulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSchedulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSchedulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSchedulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSchedulesRequestValidationError{}

// Validate checks the field values on GetSchedulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSchedulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSchedulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSchedulesResponseMultiError, or nil if none found.
func (m *GetSchedulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSchedulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSchedules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSchedulesResponseValidationError{
						field:  fmt.Sprintf("Schedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSchedulesResponseValidationError{
						field:  fmt.Sprintf("Schedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSchedulesResponseValidationError{
					field:  fmt.Sprintf("Schedules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSchedulesResponseMultiError(errors)
	}

	return nil
}

// GetSchedulesResponseMultiError is an error wrapping multiple validation
// errors returned by GetSchedulesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSchedulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSchedulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSchedulesResponseMultiError) AllErrors() []error { return m }

// GetSchedulesResponseValidationError is the validation error returned by
// GetSchedulesResponse.Validate if the designated constraints aren't met.
type GetSchedulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSchedulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSchedulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSchedulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSchedulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSchedulesResponseValidationError) ErrorName() string {
	return "GetSchedulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSchedulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSchedulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSchedulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSchedulesResponseValidationError{}

// Validate checks the field values on GetSchedulesByThesisIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSchedulesByThesisIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSchedulesByThesisIDRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetSchedulesByThesisIDRequestMultiError, or nil if none found.
func (m *GetSchedulesByThesisIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSchedulesByThesisIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThesisID

	if len(errors) > 0 {
		return GetSchedulesByThesisIDRequestMultiError(errors)
	}

	return nil
}

// GetSchedulesByThesisIDRequestMultiError is an error wrapping multiple
// validation errors returned by GetSchedulesByThesisIDRequest.ValidateAll()
// if the designated constraints aren't met.
type GetSchedulesByThesisIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSchedulesByThesisIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSchedulesByThesisIDRequestMultiError) AllErrors() []error { return m }

// GetSchedulesByThesisIDRequestValidationError is the validation error
// returned by GetSchedulesByThesisIDRequest.Validate if the designated
// constraints aren't met.
type GetSchedulesByThesisIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSchedulesByThesisIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSchedulesByThesisIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSchedulesByThesisIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSchedulesByThesisIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSchedulesByThesisIDRequestValidationError) ErrorName() string {
	return "GetSchedulesByThesisIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSchedulesByThesisIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSchedulesByThesisIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSchedulesByThesisIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSchedulesByThesisIDRequestValidationError{}
