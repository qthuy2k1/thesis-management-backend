// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: schedule_commitee.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScheduleService_CreateCouncil_FullMethodName          = "/commitee.v1.ScheduleService/CreateCouncil"
	ScheduleService_GetCouncil_FullMethodName             = "/commitee.v1.ScheduleService/GetCouncil"
	ScheduleService_GetCouncilsByThesisID_FullMethodName  = "/commitee.v1.ScheduleService/GetCouncilsByThesisID"
	ScheduleService_GetCouncils_FullMethodName            = "/commitee.v1.ScheduleService/GetCouncils"
	ScheduleService_CreateSchedule_FullMethodName         = "/commitee.v1.ScheduleService/CreateSchedule"
	ScheduleService_GetSchedule_FullMethodName            = "/commitee.v1.ScheduleService/GetSchedule"
	ScheduleService_GetSchedulesByThesisID_FullMethodName = "/commitee.v1.ScheduleService/GetSchedulesByThesisID"
	ScheduleService_GetSchedules_FullMethodName           = "/commitee.v1.ScheduleService/GetSchedules"
)

// ScheduleServiceClient is the client API for ScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleServiceClient interface {
	CreateCouncil(ctx context.Context, in *CreateCouncilRequest, opts ...grpc.CallOption) (*CreateCouncilResponse, error)
	GetCouncil(ctx context.Context, in *GetCouncilRequest, opts ...grpc.CallOption) (*GetCouncilResponse, error)
	// rpc UpdateCouncil(UpdateCouncilRequest) returns (UpdateCouncilResponse){}
	// rpc DeleteCouncil(DeleteCouncilRequest) returns (DeleteCouncilResponse){}
	GetCouncilsByThesisID(ctx context.Context, in *GetCouncilsByThesisIDRequest, opts ...grpc.CallOption) (*GetCouncilsByThesisIDResponse, error)
	GetCouncils(ctx context.Context, in *GetCouncilsRequest, opts ...grpc.CallOption) (*GetCouncilsResponse, error)
	CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreateScheduleResponse, error)
	GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*GetScheduleResponse, error)
	// rpc UpdateSchedule(UpdateScheduleRequest) returns (UpdateScheduleResponse){}
	// rpc DeleteSchedule(DeleteScheduleRequest) returns (DeleteScheduleResponse){}
	GetSchedulesByThesisID(ctx context.Context, in *GetSchedulesByThesisIDRequest, opts ...grpc.CallOption) (*GetSchedulesResponse, error)
	GetSchedules(ctx context.Context, in *GetSchedulesRequest, opts ...grpc.CallOption) (*GetSchedulesResponse, error)
}

type scheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleServiceClient(cc grpc.ClientConnInterface) ScheduleServiceClient {
	return &scheduleServiceClient{cc}
}

func (c *scheduleServiceClient) CreateCouncil(ctx context.Context, in *CreateCouncilRequest, opts ...grpc.CallOption) (*CreateCouncilResponse, error) {
	out := new(CreateCouncilResponse)
	err := c.cc.Invoke(ctx, ScheduleService_CreateCouncil_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetCouncil(ctx context.Context, in *GetCouncilRequest, opts ...grpc.CallOption) (*GetCouncilResponse, error) {
	out := new(GetCouncilResponse)
	err := c.cc.Invoke(ctx, ScheduleService_GetCouncil_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetCouncilsByThesisID(ctx context.Context, in *GetCouncilsByThesisIDRequest, opts ...grpc.CallOption) (*GetCouncilsByThesisIDResponse, error) {
	out := new(GetCouncilsByThesisIDResponse)
	err := c.cc.Invoke(ctx, ScheduleService_GetCouncilsByThesisID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetCouncils(ctx context.Context, in *GetCouncilsRequest, opts ...grpc.CallOption) (*GetCouncilsResponse, error) {
	out := new(GetCouncilsResponse)
	err := c.cc.Invoke(ctx, ScheduleService_GetCouncils_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) CreateSchedule(ctx context.Context, in *CreateScheduleRequest, opts ...grpc.CallOption) (*CreateScheduleResponse, error) {
	out := new(CreateScheduleResponse)
	err := c.cc.Invoke(ctx, ScheduleService_CreateSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetSchedule(ctx context.Context, in *GetScheduleRequest, opts ...grpc.CallOption) (*GetScheduleResponse, error) {
	out := new(GetScheduleResponse)
	err := c.cc.Invoke(ctx, ScheduleService_GetSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetSchedulesByThesisID(ctx context.Context, in *GetSchedulesByThesisIDRequest, opts ...grpc.CallOption) (*GetSchedulesResponse, error) {
	out := new(GetSchedulesResponse)
	err := c.cc.Invoke(ctx, ScheduleService_GetSchedulesByThesisID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetSchedules(ctx context.Context, in *GetSchedulesRequest, opts ...grpc.CallOption) (*GetSchedulesResponse, error) {
	out := new(GetSchedulesResponse)
	err := c.cc.Invoke(ctx, ScheduleService_GetSchedules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleServiceServer is the server API for ScheduleService service.
// All implementations must embed UnimplementedScheduleServiceServer
// for forward compatibility
type ScheduleServiceServer interface {
	CreateCouncil(context.Context, *CreateCouncilRequest) (*CreateCouncilResponse, error)
	GetCouncil(context.Context, *GetCouncilRequest) (*GetCouncilResponse, error)
	// rpc UpdateCouncil(UpdateCouncilRequest) returns (UpdateCouncilResponse){}
	// rpc DeleteCouncil(DeleteCouncilRequest) returns (DeleteCouncilResponse){}
	GetCouncilsByThesisID(context.Context, *GetCouncilsByThesisIDRequest) (*GetCouncilsByThesisIDResponse, error)
	GetCouncils(context.Context, *GetCouncilsRequest) (*GetCouncilsResponse, error)
	CreateSchedule(context.Context, *CreateScheduleRequest) (*CreateScheduleResponse, error)
	GetSchedule(context.Context, *GetScheduleRequest) (*GetScheduleResponse, error)
	// rpc UpdateSchedule(UpdateScheduleRequest) returns (UpdateScheduleResponse){}
	// rpc DeleteSchedule(DeleteScheduleRequest) returns (DeleteScheduleResponse){}
	GetSchedulesByThesisID(context.Context, *GetSchedulesByThesisIDRequest) (*GetSchedulesResponse, error)
	GetSchedules(context.Context, *GetSchedulesRequest) (*GetSchedulesResponse, error)
	mustEmbedUnimplementedScheduleServiceServer()
}

// UnimplementedScheduleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleServiceServer struct {
}

func (UnimplementedScheduleServiceServer) CreateCouncil(context.Context, *CreateCouncilRequest) (*CreateCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCouncil not implemented")
}
func (UnimplementedScheduleServiceServer) GetCouncil(context.Context, *GetCouncilRequest) (*GetCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouncil not implemented")
}
func (UnimplementedScheduleServiceServer) GetCouncilsByThesisID(context.Context, *GetCouncilsByThesisIDRequest) (*GetCouncilsByThesisIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouncilsByThesisID not implemented")
}
func (UnimplementedScheduleServiceServer) GetCouncils(context.Context, *GetCouncilsRequest) (*GetCouncilsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouncils not implemented")
}
func (UnimplementedScheduleServiceServer) CreateSchedule(context.Context, *CreateScheduleRequest) (*CreateScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) GetSchedule(context.Context, *GetScheduleRequest) (*GetScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) GetSchedulesByThesisID(context.Context, *GetSchedulesByThesisIDRequest) (*GetSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulesByThesisID not implemented")
}
func (UnimplementedScheduleServiceServer) GetSchedules(context.Context, *GetSchedulesRequest) (*GetSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedules not implemented")
}
func (UnimplementedScheduleServiceServer) mustEmbedUnimplementedScheduleServiceServer() {}

// UnsafeScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServiceServer will
// result in compilation errors.
type UnsafeScheduleServiceServer interface {
	mustEmbedUnimplementedScheduleServiceServer()
}

func RegisterScheduleServiceServer(s grpc.ServiceRegistrar, srv ScheduleServiceServer) {
	s.RegisterService(&ScheduleService_ServiceDesc, srv)
}

func _ScheduleService_CreateCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).CreateCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_CreateCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).CreateCouncil(ctx, req.(*CreateCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetCouncil_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetCouncil(ctx, req.(*GetCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetCouncilsByThesisID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouncilsByThesisIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetCouncilsByThesisID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetCouncilsByThesisID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetCouncilsByThesisID(ctx, req.(*GetCouncilsByThesisIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetCouncils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouncilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetCouncils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetCouncils_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetCouncils(ctx, req.(*GetCouncilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_CreateSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).CreateSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_CreateSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).CreateSchedule(ctx, req.(*CreateScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetSchedule(ctx, req.(*GetScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetSchedulesByThesisID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulesByThesisIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetSchedulesByThesisID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetSchedulesByThesisID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetSchedulesByThesisID(ctx, req.(*GetSchedulesByThesisIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScheduleService_GetSchedules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetSchedules(ctx, req.(*GetSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleService_ServiceDesc is the grpc.ServiceDesc for ScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commitee.v1.ScheduleService",
	HandlerType: (*ScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCouncil",
			Handler:    _ScheduleService_CreateCouncil_Handler,
		},
		{
			MethodName: "GetCouncil",
			Handler:    _ScheduleService_GetCouncil_Handler,
		},
		{
			MethodName: "GetCouncilsByThesisID",
			Handler:    _ScheduleService_GetCouncilsByThesisID_Handler,
		},
		{
			MethodName: "GetCouncils",
			Handler:    _ScheduleService_GetCouncils_Handler,
		},
		{
			MethodName: "CreateSchedule",
			Handler:    _ScheduleService_CreateSchedule_Handler,
		},
		{
			MethodName: "GetSchedule",
			Handler:    _ScheduleService_GetSchedule_Handler,
		},
		{
			MethodName: "GetSchedulesByThesisID",
			Handler:    _ScheduleService_GetSchedulesByThesisID_Handler,
		},
		{
			MethodName: "GetSchedules",
			Handler:    _ScheduleService_GetSchedules_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule_commitee.proto",
}
