// Code generated by mockery v2.37.1. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIClassroomRepo is an autogenerated mock type for the IClassroomRepo type
type MockIClassroomRepo struct {
	mock.Mock
}

// CreateClassroom provides a mock function with given fields: ctx, clr
func (_m *MockIClassroomRepo) CreateClassroom(ctx context.Context, clr ClassroomInputRepo) error {
	ret := _m.Called(ctx, clr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ClassroomInputRepo) error); ok {
		r0 = rf(ctx, clr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClassroom provides a mock function with given fields: ctx, id
func (_m *MockIClassroomRepo) DeleteClassroom(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClassroom provides a mock function with given fields: ctx, id
func (_m *MockIClassroomRepo) GetClassroom(ctx context.Context, id int) (ClassroomOutputRepo, error) {
	ret := _m.Called(ctx, id)

	var r0 ClassroomOutputRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (ClassroomOutputRepo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) ClassroomOutputRepo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(ClassroomOutputRepo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClassrooms provides a mock function with given fields: ctx, filter
func (_m *MockIClassroomRepo) GetClassrooms(ctx context.Context, filter ClassroomFilterRepo) ([]ClassroomOutputRepo, int, error) {
	ret := _m.Called(ctx, filter)

	var r0 []ClassroomOutputRepo
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, ClassroomFilterRepo) ([]ClassroomOutputRepo, int, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ClassroomFilterRepo) []ClassroomOutputRepo); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ClassroomOutputRepo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ClassroomFilterRepo) int); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, ClassroomFilterRepo) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsClassroomExists provides a mock function with given fields: ctx, title
func (_m *MockIClassroomRepo) IsClassroomExists(ctx context.Context, title string) (bool, error) {
	ret := _m.Called(ctx, title)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, title)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClassroom provides a mock function with given fields: ctx, id, classroom
func (_m *MockIClassroomRepo) UpdateClassroom(ctx context.Context, id int, classroom ClassroomInputRepo) error {
	ret := _m.Called(ctx, id, classroom)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ClassroomInputRepo) error); ok {
		r0 = rf(ctx, id, classroom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockIClassroomRepo creates a new instance of MockIClassroomRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIClassroomRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIClassroomRepo {
	mock := &MockIClassroomRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
