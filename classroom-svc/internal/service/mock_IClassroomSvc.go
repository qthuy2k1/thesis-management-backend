// Code generated by mockery v2.37.1. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIClassroomSvc is an autogenerated mock type for the IClassroomSvc type
type MockIClassroomSvc struct {
	mock.Mock
}

// CheckClassroomExists provides a mock function with given fields: ctx, id
func (_m *MockIClassroomSvc) CheckClassroomExists(ctx context.Context, id int) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (bool, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClassroom provides a mock function with given fields: ctx, clr
func (_m *MockIClassroomSvc) CreateClassroom(ctx context.Context, clr ClassroomInputSvc) error {
	ret := _m.Called(ctx, clr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ClassroomInputSvc) error); ok {
		r0 = rf(ctx, clr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClassroom provides a mock function with given fields: ctx, id
func (_m *MockIClassroomSvc) DeleteClassroom(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetClassroom provides a mock function with given fields: ctx, id
func (_m *MockIClassroomSvc) GetClassroom(ctx context.Context, id int) (ClassroomOutputSvc, error) {
	ret := _m.Called(ctx, id)

	var r0 ClassroomOutputSvc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (ClassroomOutputSvc, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) ClassroomOutputSvc); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(ClassroomOutputSvc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClassrooms provides a mock function with given fields: ctx, filter
func (_m *MockIClassroomSvc) GetClassrooms(ctx context.Context, filter ClassroomFilterSvc) ([]ClassroomOutputSvc, int, error) {
	ret := _m.Called(ctx, filter)

	var r0 []ClassroomOutputSvc
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, ClassroomFilterSvc) ([]ClassroomOutputSvc, int, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ClassroomFilterSvc) []ClassroomOutputSvc); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ClassroomOutputSvc)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ClassroomFilterSvc) int); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, ClassroomFilterSvc) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateClassroom provides a mock function with given fields: ctx, id, classroom
func (_m *MockIClassroomSvc) UpdateClassroom(ctx context.Context, id int, classroom ClassroomInputSvc) error {
	ret := _m.Called(ctx, id, classroom)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ClassroomInputSvc) error); ok {
		r0 = rf(ctx, id, classroom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockIClassroomSvc creates a new instance of MockIClassroomSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIClassroomSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIClassroomSvc {
	mock := &MockIClassroomSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
