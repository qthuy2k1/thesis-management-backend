// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_CreateUser_FullMethodName                    = "/user.v1.UserService/CreateUser"
	UserService_GetUser_FullMethodName                       = "/user.v1.UserService/GetUser"
	UserService_UpdateUser_FullMethodName                    = "/user.v1.UserService/UpdateUser"
	UserService_DeleteUser_FullMethodName                    = "/user.v1.UserService/DeleteUser"
	UserService_GetUsers_FullMethodName                      = "/user.v1.UserService/GetUsers"
	UserService_GetAllLecturers_FullMethodName               = "/user.v1.UserService/GetAllLecturers"
	UserService_UnsubscribeClassroom_FullMethodName          = "/user.v1.UserService/UnsubscribeClassroom"
	UserService_CreateMember_FullMethodName                  = "/user.v1.UserService/CreateMember"
	UserService_GetMember_FullMethodName                     = "/user.v1.UserService/GetMember"
	UserService_UpdateMember_FullMethodName                  = "/user.v1.UserService/UpdateMember"
	UserService_DeleteMember_FullMethodName                  = "/user.v1.UserService/DeleteMember"
	UserService_GetMembers_FullMethodName                    = "/user.v1.UserService/GetMembers"
	UserService_GetAllMembersOfClassroom_FullMethodName      = "/user.v1.UserService/GetAllMembersOfClassroom"
	UserService_IsUserJoinedClassroom_FullMethodName         = "/user.v1.UserService/IsUserJoinedClassroom"
	UserService_GetUserMember_FullMethodName                 = "/user.v1.UserService/GetUserMember"
	UserService_CreateStudentDef_FullMethodName              = "/user.v1.UserService/CreateStudentDef"
	UserService_GetStudentDef_FullMethodName                 = "/user.v1.UserService/GetStudentDef"
	UserService_UpdateStudentDef_FullMethodName              = "/user.v1.UserService/UpdateStudentDef"
	UserService_DeleteStudentDef_FullMethodName              = "/user.v1.UserService/DeleteStudentDef"
	UserService_GetStudentDefs_FullMethodName                = "/user.v1.UserService/GetStudentDefs"
	UserService_GetAllStudentDefsOfInstructor_FullMethodName = "/user.v1.UserService/GetAllStudentDefsOfInstructor"
	UserService_GetStudentDefByTimeSlotsID_FullMethodName    = "/user.v1.UserService/GetStudentDefByTimeSlotsID"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	GetAllLecturers(ctx context.Context, in *GetAllLecturersRequest, opts ...grpc.CallOption) (*GetAllLecturersResponse, error)
	UnsubscribeClassroom(ctx context.Context, in *UnsubscribeClassroomRequest, opts ...grpc.CallOption) (*UnsubscribeClassroomResponse, error)
	CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error)
	GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error)
	UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*UpdateMemberResponse, error)
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error)
	GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
	GetAllMembersOfClassroom(ctx context.Context, in *GetAllMembersOfClassroomRequest, opts ...grpc.CallOption) (*GetAllMembersOfClassroomResponse, error)
	IsUserJoinedClassroom(ctx context.Context, in *IsUserJoinedClassroomRequest, opts ...grpc.CallOption) (*IsUserJoinedClassroomResponse, error)
	GetUserMember(ctx context.Context, in *GetUserMemberRequest, opts ...grpc.CallOption) (*GetUserMemberResponse, error)
	CreateStudentDef(ctx context.Context, in *CreateStudentDefRequest, opts ...grpc.CallOption) (*CreateStudentDefResponse, error)
	GetStudentDef(ctx context.Context, in *GetStudentDefRequest, opts ...grpc.CallOption) (*GetStudentDefResponse, error)
	UpdateStudentDef(ctx context.Context, in *UpdateStudentDefRequest, opts ...grpc.CallOption) (*UpdateStudentDefResponse, error)
	DeleteStudentDef(ctx context.Context, in *DeleteStudentDefRequest, opts ...grpc.CallOption) (*DeleteStudentDefResponse, error)
	GetStudentDefs(ctx context.Context, in *GetStudentDefsRequest, opts ...grpc.CallOption) (*GetStudentDefsResponse, error)
	GetAllStudentDefsOfInstructor(ctx context.Context, in *GetAllStudentDefsOfInstructorRequest, opts ...grpc.CallOption) (*GetAllStudentDefsOfInstructorResponse, error)
	GetStudentDefByTimeSlotsID(ctx context.Context, in *GetStudentDefByTimeSlotsIDRequest, opts ...grpc.CallOption) (*GetStudentDefByTimeSlotsIDResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, UserService_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllLecturers(ctx context.Context, in *GetAllLecturersRequest, opts ...grpc.CallOption) (*GetAllLecturersResponse, error) {
	out := new(GetAllLecturersResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllLecturers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnsubscribeClassroom(ctx context.Context, in *UnsubscribeClassroomRequest, opts ...grpc.CallOption) (*UnsubscribeClassroomResponse, error) {
	out := new(UnsubscribeClassroomResponse)
	err := c.cc.Invoke(ctx, UserService_UnsubscribeClassroom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateMember(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error) {
	out := new(CreateMemberResponse)
	err := c.cc.Invoke(ctx, UserService_CreateMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMember(ctx context.Context, in *GetMemberRequest, opts ...grpc.CallOption) (*GetMemberResponse, error) {
	out := new(GetMemberResponse)
	err := c.cc.Invoke(ctx, UserService_GetMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateMember(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*UpdateMemberResponse, error) {
	out := new(UpdateMemberResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error) {
	out := new(DeleteMemberResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	out := new(GetMembersResponse)
	err := c.cc.Invoke(ctx, UserService_GetMembers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllMembersOfClassroom(ctx context.Context, in *GetAllMembersOfClassroomRequest, opts ...grpc.CallOption) (*GetAllMembersOfClassroomResponse, error) {
	out := new(GetAllMembersOfClassroomResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllMembersOfClassroom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) IsUserJoinedClassroom(ctx context.Context, in *IsUserJoinedClassroomRequest, opts ...grpc.CallOption) (*IsUserJoinedClassroomResponse, error) {
	out := new(IsUserJoinedClassroomResponse)
	err := c.cc.Invoke(ctx, UserService_IsUserJoinedClassroom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserMember(ctx context.Context, in *GetUserMemberRequest, opts ...grpc.CallOption) (*GetUserMemberResponse, error) {
	out := new(GetUserMemberResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateStudentDef(ctx context.Context, in *CreateStudentDefRequest, opts ...grpc.CallOption) (*CreateStudentDefResponse, error) {
	out := new(CreateStudentDefResponse)
	err := c.cc.Invoke(ctx, UserService_CreateStudentDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetStudentDef(ctx context.Context, in *GetStudentDefRequest, opts ...grpc.CallOption) (*GetStudentDefResponse, error) {
	out := new(GetStudentDefResponse)
	err := c.cc.Invoke(ctx, UserService_GetStudentDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateStudentDef(ctx context.Context, in *UpdateStudentDefRequest, opts ...grpc.CallOption) (*UpdateStudentDefResponse, error) {
	out := new(UpdateStudentDefResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateStudentDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteStudentDef(ctx context.Context, in *DeleteStudentDefRequest, opts ...grpc.CallOption) (*DeleteStudentDefResponse, error) {
	out := new(DeleteStudentDefResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteStudentDef_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetStudentDefs(ctx context.Context, in *GetStudentDefsRequest, opts ...grpc.CallOption) (*GetStudentDefsResponse, error) {
	out := new(GetStudentDefsResponse)
	err := c.cc.Invoke(ctx, UserService_GetStudentDefs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllStudentDefsOfInstructor(ctx context.Context, in *GetAllStudentDefsOfInstructorRequest, opts ...grpc.CallOption) (*GetAllStudentDefsOfInstructorResponse, error) {
	out := new(GetAllStudentDefsOfInstructorResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllStudentDefsOfInstructor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetStudentDefByTimeSlotsID(ctx context.Context, in *GetStudentDefByTimeSlotsIDRequest, opts ...grpc.CallOption) (*GetStudentDefByTimeSlotsIDResponse, error) {
	out := new(GetStudentDefByTimeSlotsIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetStudentDefByTimeSlotsID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	GetAllLecturers(context.Context, *GetAllLecturersRequest) (*GetAllLecturersResponse, error)
	UnsubscribeClassroom(context.Context, *UnsubscribeClassroomRequest) (*UnsubscribeClassroomResponse, error)
	CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error)
	GetMember(context.Context, *GetMemberRequest) (*GetMemberResponse, error)
	UpdateMember(context.Context, *UpdateMemberRequest) (*UpdateMemberResponse, error)
	DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	GetAllMembersOfClassroom(context.Context, *GetAllMembersOfClassroomRequest) (*GetAllMembersOfClassroomResponse, error)
	IsUserJoinedClassroom(context.Context, *IsUserJoinedClassroomRequest) (*IsUserJoinedClassroomResponse, error)
	GetUserMember(context.Context, *GetUserMemberRequest) (*GetUserMemberResponse, error)
	CreateStudentDef(context.Context, *CreateStudentDefRequest) (*CreateStudentDefResponse, error)
	GetStudentDef(context.Context, *GetStudentDefRequest) (*GetStudentDefResponse, error)
	UpdateStudentDef(context.Context, *UpdateStudentDefRequest) (*UpdateStudentDefResponse, error)
	DeleteStudentDef(context.Context, *DeleteStudentDefRequest) (*DeleteStudentDefResponse, error)
	GetStudentDefs(context.Context, *GetStudentDefsRequest) (*GetStudentDefsResponse, error)
	GetAllStudentDefsOfInstructor(context.Context, *GetAllStudentDefsOfInstructorRequest) (*GetAllStudentDefsOfInstructorResponse, error)
	GetStudentDefByTimeSlotsID(context.Context, *GetStudentDefByTimeSlotsIDRequest) (*GetStudentDefByTimeSlotsIDResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServiceServer) GetAllLecturers(context.Context, *GetAllLecturersRequest) (*GetAllLecturersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLecturers not implemented")
}
func (UnimplementedUserServiceServer) UnsubscribeClassroom(context.Context, *UnsubscribeClassroomRequest) (*UnsubscribeClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeClassroom not implemented")
}
func (UnimplementedUserServiceServer) CreateMember(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMember not implemented")
}
func (UnimplementedUserServiceServer) GetMember(context.Context, *GetMemberRequest) (*GetMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedUserServiceServer) UpdateMember(context.Context, *UpdateMemberRequest) (*UpdateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMember not implemented")
}
func (UnimplementedUserServiceServer) DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedUserServiceServer) GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMembers not implemented")
}
func (UnimplementedUserServiceServer) GetAllMembersOfClassroom(context.Context, *GetAllMembersOfClassroomRequest) (*GetAllMembersOfClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMembersOfClassroom not implemented")
}
func (UnimplementedUserServiceServer) IsUserJoinedClassroom(context.Context, *IsUserJoinedClassroomRequest) (*IsUserJoinedClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserJoinedClassroom not implemented")
}
func (UnimplementedUserServiceServer) GetUserMember(context.Context, *GetUserMemberRequest) (*GetUserMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMember not implemented")
}
func (UnimplementedUserServiceServer) CreateStudentDef(context.Context, *CreateStudentDefRequest) (*CreateStudentDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudentDef not implemented")
}
func (UnimplementedUserServiceServer) GetStudentDef(context.Context, *GetStudentDefRequest) (*GetStudentDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentDef not implemented")
}
func (UnimplementedUserServiceServer) UpdateStudentDef(context.Context, *UpdateStudentDefRequest) (*UpdateStudentDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudentDef not implemented")
}
func (UnimplementedUserServiceServer) DeleteStudentDef(context.Context, *DeleteStudentDefRequest) (*DeleteStudentDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudentDef not implemented")
}
func (UnimplementedUserServiceServer) GetStudentDefs(context.Context, *GetStudentDefsRequest) (*GetStudentDefsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentDefs not implemented")
}
func (UnimplementedUserServiceServer) GetAllStudentDefsOfInstructor(context.Context, *GetAllStudentDefsOfInstructorRequest) (*GetAllStudentDefsOfInstructorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudentDefsOfInstructor not implemented")
}
func (UnimplementedUserServiceServer) GetStudentDefByTimeSlotsID(context.Context, *GetStudentDefByTimeSlotsIDRequest) (*GetStudentDefByTimeSlotsIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentDefByTimeSlotsID not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllLecturers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLecturersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllLecturers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllLecturers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllLecturers(ctx, req.(*GetAllLecturersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnsubscribeClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnsubscribeClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnsubscribeClassroom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnsubscribeClassroom(ctx, req.(*UnsubscribeClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateMember(ctx, req.(*CreateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMember(ctx, req.(*GetMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateMember(ctx, req.(*UpdateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMembers(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllMembersOfClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMembersOfClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllMembersOfClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllMembersOfClassroom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllMembersOfClassroom(ctx, req.(*GetAllMembersOfClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_IsUserJoinedClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserJoinedClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).IsUserJoinedClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_IsUserJoinedClassroom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).IsUserJoinedClassroom(ctx, req.(*IsUserJoinedClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserMember(ctx, req.(*GetUserMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateStudentDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateStudentDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateStudentDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateStudentDef(ctx, req.(*CreateStudentDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetStudentDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetStudentDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetStudentDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetStudentDef(ctx, req.(*GetStudentDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateStudentDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateStudentDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateStudentDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateStudentDef(ctx, req.(*UpdateStudentDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteStudentDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteStudentDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteStudentDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteStudentDef(ctx, req.(*DeleteStudentDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetStudentDefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentDefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetStudentDefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetStudentDefs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetStudentDefs(ctx, req.(*GetStudentDefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllStudentDefsOfInstructor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStudentDefsOfInstructorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllStudentDefsOfInstructor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllStudentDefsOfInstructor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllStudentDefsOfInstructor(ctx, req.(*GetAllStudentDefsOfInstructorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetStudentDefByTimeSlotsID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentDefByTimeSlotsIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetStudentDefByTimeSlotsID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetStudentDefByTimeSlotsID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetStudentDefByTimeSlotsID(ctx, req.(*GetStudentDefByTimeSlotsIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "GetAllLecturers",
			Handler:    _UserService_GetAllLecturers_Handler,
		},
		{
			MethodName: "UnsubscribeClassroom",
			Handler:    _UserService_UnsubscribeClassroom_Handler,
		},
		{
			MethodName: "CreateMember",
			Handler:    _UserService_CreateMember_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _UserService_GetMember_Handler,
		},
		{
			MethodName: "UpdateMember",
			Handler:    _UserService_UpdateMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _UserService_DeleteMember_Handler,
		},
		{
			MethodName: "GetMembers",
			Handler:    _UserService_GetMembers_Handler,
		},
		{
			MethodName: "GetAllMembersOfClassroom",
			Handler:    _UserService_GetAllMembersOfClassroom_Handler,
		},
		{
			MethodName: "IsUserJoinedClassroom",
			Handler:    _UserService_IsUserJoinedClassroom_Handler,
		},
		{
			MethodName: "GetUserMember",
			Handler:    _UserService_GetUserMember_Handler,
		},
		{
			MethodName: "CreateStudentDef",
			Handler:    _UserService_CreateStudentDef_Handler,
		},
		{
			MethodName: "GetStudentDef",
			Handler:    _UserService_GetStudentDef_Handler,
		},
		{
			MethodName: "UpdateStudentDef",
			Handler:    _UserService_UpdateStudentDef_Handler,
		},
		{
			MethodName: "DeleteStudentDef",
			Handler:    _UserService_DeleteStudentDef_Handler,
		},
		{
			MethodName: "GetStudentDefs",
			Handler:    _UserService_GetStudentDefs_Handler,
		},
		{
			MethodName: "GetAllStudentDefsOfInstructor",
			Handler:    _UserService_GetAllStudentDefsOfInstructor_Handler,
		},
		{
			MethodName: "GetStudentDefByTimeSlotsID",
			Handler:    _UserService_GetStudentDefByTimeSlotsID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
