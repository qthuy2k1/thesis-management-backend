// Code generated by mockery v2.37.1. DO NOT EDIT.

package repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIUserRepo is an autogenerated mock type for the IUserRepo type
type MockIUserRepo struct {
	mock.Mock
}

// CreateMember provides a mock function with given fields: ctx, u
func (_m *MockIUserRepo) CreateMember(ctx context.Context, u MemberInputRepo) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, MemberInputRepo) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStudentDef provides a mock function with given fields: ctx, u
func (_m *MockIUserRepo) CreateStudentDef(ctx context.Context, u StudentDefInputRepo) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, StudentDefInputRepo) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, u
func (_m *MockIUserRepo) CreateUser(ctx context.Context, u UserInputRepo) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UserInputRepo) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMember provides a mock function with given fields: ctx, id
func (_m *MockIUserRepo) DeleteMember(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStudentDef provides a mock function with given fields: ctx, id
func (_m *MockIUserRepo) DeleteStudentDef(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockIUserRepo) DeleteUser(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllLecturers provides a mock function with given fields: ctx
func (_m *MockIUserRepo) GetAllLecturers(ctx context.Context) ([]UserOutputRepo, int, error) {
	ret := _m.Called(ctx)

	var r0 []UserOutputRepo
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]UserOutputRepo, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []UserOutputRepo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]UserOutputRepo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllMembersOfClassroom provides a mock function with given fields: ctx, classroomID
func (_m *MockIUserRepo) GetAllMembersOfClassroom(ctx context.Context, classroomID int) ([]MemberOutputRepo, int, error) {
	ret := _m.Called(ctx, classroomID)

	var r0 []MemberOutputRepo
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]MemberOutputRepo, int, error)); ok {
		return rf(ctx, classroomID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []MemberOutputRepo); ok {
		r0 = rf(ctx, classroomID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]MemberOutputRepo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) int); ok {
		r1 = rf(ctx, classroomID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, classroomID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllStudentDefsOfInstructor provides a mock function with given fields: ctx, instructorID
func (_m *MockIUserRepo) GetAllStudentDefsOfInstructor(ctx context.Context, instructorID string) ([]StudentDefOutputRepo, int, error) {
	ret := _m.Called(ctx, instructorID)

	var r0 []StudentDefOutputRepo
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]StudentDefOutputRepo, int, error)); ok {
		return rf(ctx, instructorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []StudentDefOutputRepo); ok {
		r0 = rf(ctx, instructorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]StudentDefOutputRepo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, instructorID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, instructorID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMember provides a mock function with given fields: ctx, id
func (_m *MockIUserRepo) GetMember(ctx context.Context, id int) (MemberOutputRepo, error) {
	ret := _m.Called(ctx, id)

	var r0 MemberOutputRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (MemberOutputRepo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) MemberOutputRepo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(MemberOutputRepo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: ctx
func (_m *MockIUserRepo) GetMembers(ctx context.Context) ([]MemberOutputRepo, int, error) {
	ret := _m.Called(ctx)

	var r0 []MemberOutputRepo
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]MemberOutputRepo, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []MemberOutputRepo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]MemberOutputRepo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStudentDef provides a mock function with given fields: ctx, id
func (_m *MockIUserRepo) GetStudentDef(ctx context.Context, id int) (StudentDefOutputRepo, error) {
	ret := _m.Called(ctx, id)

	var r0 StudentDefOutputRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (StudentDefOutputRepo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) StudentDefOutputRepo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(StudentDefOutputRepo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentDefByTimeSlotsID provides a mock function with given fields: ctx, timeSlotsID
func (_m *MockIUserRepo) GetStudentDefByTimeSlotsID(ctx context.Context, timeSlotsID int) (StudentDefOutputRepo, error) {
	ret := _m.Called(ctx, timeSlotsID)

	var r0 StudentDefOutputRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (StudentDefOutputRepo, error)); ok {
		return rf(ctx, timeSlotsID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) StudentDefOutputRepo); ok {
		r0 = rf(ctx, timeSlotsID)
	} else {
		r0 = ret.Get(0).(StudentDefOutputRepo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, timeSlotsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentDefs provides a mock function with given fields: ctx
func (_m *MockIUserRepo) GetStudentDefs(ctx context.Context) ([]StudentDefOutputRepo, int, error) {
	ret := _m.Called(ctx)

	var r0 []StudentDefOutputRepo
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]StudentDefOutputRepo, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []StudentDefOutputRepo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]StudentDefOutputRepo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *MockIUserRepo) GetUser(ctx context.Context, id string) (UserOutputRepo, error) {
	ret := _m.Called(ctx, id)

	var r0 UserOutputRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (UserOutputRepo, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) UserOutputRepo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(UserOutputRepo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserMember provides a mock function with given fields: ctx, userID
func (_m *MockIUserRepo) GetUserMember(ctx context.Context, userID string) (MemberOutputRepo, error) {
	ret := _m.Called(ctx, userID)

	var r0 MemberOutputRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (MemberOutputRepo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) MemberOutputRepo); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(MemberOutputRepo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx
func (_m *MockIUserRepo) GetUsers(ctx context.Context) ([]UserOutputRepo, int, error) {
	ret := _m.Called(ctx)

	var r0 []UserOutputRepo
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]UserOutputRepo, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []UserOutputRepo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]UserOutputRepo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsMemberExists provides a mock function with given fields: ctx, memberID
func (_m *MockIUserRepo) IsMemberExists(ctx context.Context, memberID string) (bool, error) {
	ret := _m.Called(ctx, memberID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, memberID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, memberID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, memberID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsStudentDefExists provides a mock function with given fields: ctx, userID
func (_m *MockIUserRepo) IsStudentDefExists(ctx context.Context, userID string) (bool, error) {
	ret := _m.Called(ctx, userID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserExists provides a mock function with given fields: ctx, email, id
func (_m *MockIUserRepo) IsUserExists(ctx context.Context, email string, id string) (bool, error) {
	ret := _m.Called(ctx, email, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, email, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, email, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserJoinedClassroom provides a mock function with given fields: ctx, userID
func (_m *MockIUserRepo) IsUserJoinedClassroom(ctx context.Context, userID string) (MemberOutputRepo, error) {
	ret := _m.Called(ctx, userID)

	var r0 MemberOutputRepo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (MemberOutputRepo, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) MemberOutputRepo); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(MemberOutputRepo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsubscribeClassroom provides a mock function with given fields: ctx, userID, classroomID
func (_m *MockIUserRepo) UnsubscribeClassroom(ctx context.Context, userID string, classroomID int) error {
	ret := _m.Called(ctx, userID, classroomID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, userID, classroomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMember provides a mock function with given fields: ctx, id, member
func (_m *MockIUserRepo) UpdateMember(ctx context.Context, id int, member MemberInputRepo) error {
	ret := _m.Called(ctx, id, member)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, MemberInputRepo) error); ok {
		r0 = rf(ctx, id, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStudentDef provides a mock function with given fields: ctx, id, member
func (_m *MockIUserRepo) UpdateStudentDef(ctx context.Context, id int, member StudentDefInputRepo) error {
	ret := _m.Called(ctx, id, member)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, StudentDefInputRepo) error); ok {
		r0 = rf(ctx, id, member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, id, user
func (_m *MockIUserRepo) UpdateUser(ctx context.Context, id string, user UserInputRepo) error {
	ret := _m.Called(ctx, id, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, UserInputRepo) error); ok {
		r0 = rf(ctx, id, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockIUserRepo creates a new instance of MockIUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserRepo {
	mock := &MockIUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
