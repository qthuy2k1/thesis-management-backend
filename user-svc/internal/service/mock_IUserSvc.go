// Code generated by mockery v2.37.1. DO NOT EDIT.

package service

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockIUserSvc is an autogenerated mock type for the IUserSvc type
type MockIUserSvc struct {
	mock.Mock
}

// CreateMember provides a mock function with given fields: ctx, p
func (_m *MockIUserSvc) CreateMember(ctx context.Context, p MemberInputSvc) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, MemberInputSvc) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStudentDef provides a mock function with given fields: ctx, p
func (_m *MockIUserSvc) CreateStudentDef(ctx context.Context, p StudentDefInputSvc) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, StudentDefInputSvc) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, p
func (_m *MockIUserSvc) CreateUser(ctx context.Context, p UserInputSvc) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, UserInputSvc) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMember provides a mock function with given fields: ctx, id
func (_m *MockIUserSvc) DeleteMember(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStudentDef provides a mock function with given fields: ctx, id
func (_m *MockIUserSvc) DeleteStudentDef(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *MockIUserSvc) DeleteUser(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllLecturers provides a mock function with given fields: ctx
func (_m *MockIUserSvc) GetAllLecturers(ctx context.Context) ([]UserOutputSvc, int, error) {
	ret := _m.Called(ctx)

	var r0 []UserOutputSvc
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]UserOutputSvc, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []UserOutputSvc); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]UserOutputSvc)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllMembersOfClassroom provides a mock function with given fields: ctx, classroomID
func (_m *MockIUserSvc) GetAllMembersOfClassroom(ctx context.Context, classroomID int) ([]MemberOutputSvc, int, error) {
	ret := _m.Called(ctx, classroomID)

	var r0 []MemberOutputSvc
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]MemberOutputSvc, int, error)); ok {
		return rf(ctx, classroomID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []MemberOutputSvc); ok {
		r0 = rf(ctx, classroomID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]MemberOutputSvc)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) int); ok {
		r1 = rf(ctx, classroomID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, classroomID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllStudentDefsOfInstructor provides a mock function with given fields: ctx, instructorID
func (_m *MockIUserSvc) GetAllStudentDefsOfInstructor(ctx context.Context, instructorID string) ([]StudentDefOutputSvc, int, error) {
	ret := _m.Called(ctx, instructorID)

	var r0 []StudentDefOutputSvc
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]StudentDefOutputSvc, int, error)); ok {
		return rf(ctx, instructorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []StudentDefOutputSvc); ok {
		r0 = rf(ctx, instructorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]StudentDefOutputSvc)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, instructorID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, instructorID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetMember provides a mock function with given fields: ctx, id
func (_m *MockIUserSvc) GetMember(ctx context.Context, id int) (MemberOutputSvc, error) {
	ret := _m.Called(ctx, id)

	var r0 MemberOutputSvc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (MemberOutputSvc, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) MemberOutputSvc); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(MemberOutputSvc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: ctx
func (_m *MockIUserSvc) GetMembers(ctx context.Context) ([]MemberOutputSvc, int, error) {
	ret := _m.Called(ctx)

	var r0 []MemberOutputSvc
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]MemberOutputSvc, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []MemberOutputSvc); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]MemberOutputSvc)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStudentDef provides a mock function with given fields: ctx, id
func (_m *MockIUserSvc) GetStudentDef(ctx context.Context, id int) (StudentDefOutputSvc, error) {
	ret := _m.Called(ctx, id)

	var r0 StudentDefOutputSvc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (StudentDefOutputSvc, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) StudentDefOutputSvc); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(StudentDefOutputSvc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentDefByTimeSlotsID provides a mock function with given fields: ctx, timeSlotsID
func (_m *MockIUserSvc) GetStudentDefByTimeSlotsID(ctx context.Context, timeSlotsID int) (StudentDefOutputSvc, error) {
	ret := _m.Called(ctx, timeSlotsID)

	var r0 StudentDefOutputSvc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (StudentDefOutputSvc, error)); ok {
		return rf(ctx, timeSlotsID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) StudentDefOutputSvc); ok {
		r0 = rf(ctx, timeSlotsID)
	} else {
		r0 = ret.Get(0).(StudentDefOutputSvc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, timeSlotsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentDefs provides a mock function with given fields: ctx
func (_m *MockIUserSvc) GetStudentDefs(ctx context.Context) ([]StudentDefOutputSvc, int, error) {
	ret := _m.Called(ctx)

	var r0 []StudentDefOutputSvc
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]StudentDefOutputSvc, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []StudentDefOutputSvc); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]StudentDefOutputSvc)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *MockIUserSvc) GetUser(ctx context.Context, id string) (UserOutputSvc, error) {
	ret := _m.Called(ctx, id)

	var r0 UserOutputSvc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (UserOutputSvc, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) UserOutputSvc); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(UserOutputSvc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx
func (_m *MockIUserSvc) GetUsers(ctx context.Context) ([]UserOutputSvc, int, error) {
	ret := _m.Called(ctx)

	var r0 []UserOutputSvc
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]UserOutputSvc, int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []UserOutputSvc); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]UserOutputSvc)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IsUserJoinedClassroom provides a mock function with given fields: ctx, userID
func (_m *MockIUserSvc) IsUserJoinedClassroom(ctx context.Context, userID string) (MemberOutputSvc, error) {
	ret := _m.Called(ctx, userID)

	var r0 MemberOutputSvc
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (MemberOutputSvc, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) MemberOutputSvc); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(MemberOutputSvc)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnsubscribeClassroom provides a mock function with given fields: ctx, userID, classroomID
func (_m *MockIUserSvc) UnsubscribeClassroom(ctx context.Context, userID string, classroomID int) error {
	ret := _m.Called(ctx, userID, classroomID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = rf(ctx, userID, classroomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMember provides a mock function with given fields: ctx, id, classroom
func (_m *MockIUserSvc) UpdateMember(ctx context.Context, id int, classroom MemberInputSvc) error {
	ret := _m.Called(ctx, id, classroom)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, MemberInputSvc) error); ok {
		r0 = rf(ctx, id, classroom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStudentDef provides a mock function with given fields: ctx, id, classroom
func (_m *MockIUserSvc) UpdateStudentDef(ctx context.Context, id int, classroom StudentDefInputSvc) error {
	ret := _m.Called(ctx, id, classroom)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, StudentDefInputSvc) error); ok {
		r0 = rf(ctx, id, classroom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, id, classroom
func (_m *MockIUserSvc) UpdateUser(ctx context.Context, id string, classroom UserInputSvc) error {
	ret := _m.Called(ctx, id, classroom)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, UserInputSvc) error); ok {
		r0 = rf(ctx, id, classroom)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockIUserSvc creates a new instance of MockIUserSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIUserSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIUserSvc {
	mock := &MockIUserSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
