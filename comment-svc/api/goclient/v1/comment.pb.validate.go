// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: comment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonCommentResponseMultiError, or nil if none found.
func (m *CommonCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Message

	if len(errors) > 0 {
		return CommonCommentResponseMultiError(errors)
	}

	return nil
}

// CommonCommentResponseMultiError is an error wrapping multiple validation
// errors returned by CommonCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type CommonCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonCommentResponseMultiError) AllErrors() []error { return m }

// CommonCommentResponseValidationError is the validation error returned by
// CommonCommentResponse.Validate if the designated constraints aren't met.
type CommonCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonCommentResponseValidationError) ErrorName() string {
	return "CommonCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommonCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonCommentResponseValidationError{}

// Validate checks the field values on CommentInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommentInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommentInputMultiError, or
// nil if none found.
func (m *CommentInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Content

	if m.PostID != nil {
		// no validation rules for PostID
	}

	if m.ExerciseID != nil {
		// no validation rules for ExerciseID
	}

	if len(errors) > 0 {
		return CommentInputMultiError(errors)
	}

	return nil
}

// CommentInputMultiError is an error wrapping multiple validation errors
// returned by CommentInput.ValidateAll() if the designated constraints aren't met.
type CommentInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentInputMultiError) AllErrors() []error { return m }

// CommentInputValidationError is the validation error returned by
// CommentInput.Validate if the designated constraints aren't met.
type CommentInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentInputValidationError) ErrorName() string { return "CommentInputValidationError" }

// Error satisfies the builtin error interface
func (e CommentInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentInputValidationError{}

// Validate checks the field values on CommentResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommentResponseMultiError, or nil if none found.
func (m *CommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserID

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommentResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommentResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommentResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.PostID != nil {
		// no validation rules for PostID
	}

	if m.ExerciseID != nil {
		// no validation rules for ExerciseID
	}

	if len(errors) > 0 {
		return CommentResponseMultiError(errors)
	}

	return nil
}

// CommentResponseMultiError is an error wrapping multiple validation errors
// returned by CommentResponse.ValidateAll() if the designated constraints
// aren't met.
type CommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentResponseMultiError) AllErrors() []error { return m }

// CommentResponseValidationError is the validation error returned by
// CommentResponse.Validate if the designated constraints aren't met.
type CommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentResponseValidationError) ErrorName() string { return "CommentResponseValidationError" }

// Error satisfies the builtin error interface
func (e CommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentResponseValidationError{}

// Validate checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentRequestMultiError, or nil if none found.
func (m *CreateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommentRequestMultiError(errors)
	}

	return nil
}

// CreateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentRequestMultiError) AllErrors() []error { return m }

// CreateCommentRequestValidationError is the validation error returned by
// CreateCommentRequest.Validate if the designated constraints aren't met.
type CreateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRequestValidationError) ErrorName() string {
	return "CreateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRequestValidationError{}

// Validate checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentResponseMultiError, or nil if none found.
func (m *CreateCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommentResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommentResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommentResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommentResponseMultiError(errors)
	}

	return nil
}

// CreateCommentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentResponseMultiError) AllErrors() []error { return m }

// CreateCommentResponseValidationError is the validation error returned by
// CreateCommentResponse.Validate if the designated constraints aren't met.
type CreateCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentResponseValidationError) ErrorName() string {
	return "CreateCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentResponseValidationError{}

// Validate checks the field values on GetCommentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentRequestMultiError, or nil if none found.
func (m *GetCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCommentRequestMultiError(errors)
	}

	return nil
}

// GetCommentRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentRequestMultiError) AllErrors() []error { return m }

// GetCommentRequestValidationError is the validation error returned by
// GetCommentRequest.Validate if the designated constraints aren't met.
type GetCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentRequestValidationError) ErrorName() string {
	return "GetCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentRequestValidationError{}

// Validate checks the field values on GetCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentResponseMultiError, or nil if none found.
func (m *GetCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommentResponseMultiError(errors)
	}

	return nil
}

// GetCommentResponseMultiError is an error wrapping multiple validation errors
// returned by GetCommentResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentResponseMultiError) AllErrors() []error { return m }

// GetCommentResponseValidationError is the validation error returned by
// GetCommentResponse.Validate if the designated constraints aren't met.
type GetCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentResponseValidationError) ErrorName() string {
	return "GetCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentResponseValidationError{}

// Validate checks the field values on GetCommentsOfAPostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsOfAPostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsOfAPostRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsOfAPostRequestMultiError, or nil if none found.
func (m *GetCommentsOfAPostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsOfAPostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PostID

	if len(errors) > 0 {
		return GetCommentsOfAPostRequestMultiError(errors)
	}

	return nil
}

// GetCommentsOfAPostRequestMultiError is an error wrapping multiple validation
// errors returned by GetCommentsOfAPostRequest.ValidateAll() if the
// designated constraints aren't met.
type GetCommentsOfAPostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsOfAPostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsOfAPostRequestMultiError) AllErrors() []error { return m }

// GetCommentsOfAPostRequestValidationError is the validation error returned by
// GetCommentsOfAPostRequest.Validate if the designated constraints aren't met.
type GetCommentsOfAPostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsOfAPostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsOfAPostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsOfAPostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsOfAPostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsOfAPostRequestValidationError) ErrorName() string {
	return "GetCommentsOfAPostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsOfAPostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsOfAPostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsOfAPostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsOfAPostRequestValidationError{}

// Validate checks the field values on GetCommentsOfAExerciseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsOfAExerciseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsOfAExerciseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCommentsOfAExerciseRequestMultiError, or nil if none found.
func (m *GetCommentsOfAExerciseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsOfAExerciseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExerciseID

	if len(errors) > 0 {
		return GetCommentsOfAExerciseRequestMultiError(errors)
	}

	return nil
}

// GetCommentsOfAExerciseRequestMultiError is an error wrapping multiple
// validation errors returned by GetCommentsOfAExerciseRequest.ValidateAll()
// if the designated constraints aren't met.
type GetCommentsOfAExerciseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsOfAExerciseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsOfAExerciseRequestMultiError) AllErrors() []error { return m }

// GetCommentsOfAExerciseRequestValidationError is the validation error
// returned by GetCommentsOfAExerciseRequest.Validate if the designated
// constraints aren't met.
type GetCommentsOfAExerciseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsOfAExerciseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsOfAExerciseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsOfAExerciseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsOfAExerciseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsOfAExerciseRequestValidationError) ErrorName() string {
	return "GetCommentsOfAExerciseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsOfAExerciseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsOfAExerciseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsOfAExerciseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsOfAExerciseRequestValidationError{}

// Validate checks the field values on GetCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsResponseMultiError, or nil if none found.
func (m *GetCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentsResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentsResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentsResponseMultiError(errors)
	}

	return nil
}

// GetCommentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetCommentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsResponseMultiError) AllErrors() []error { return m }

// GetCommentsResponseValidationError is the validation error returned by
// GetCommentsResponse.Validate if the designated constraints aren't met.
type GetCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsResponseValidationError) ErrorName() string {
	return "GetCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsResponseValidationError{}
