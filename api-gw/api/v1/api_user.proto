syntax = "proto3";

package api.user.v1;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "google/protobuf/timestamp.proto";

option go_package="github.com/qthuy2k1/thesis_management_backend/user/api/v1";

service UserService {
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse){
        option (google.api.http) = {
            post: "/api/user"
            body: "*"
        };
    }
    
    rpc GetUser(GetUserRequest) returns (GetUserResponse){
        option (google.api.http) = {
            get: "/api/user/{id}"
        };
    }

    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse){
        option (google.api.http) = {
            put: "/api/user/{id}"
            body: "*"
        };
    }

    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse){
        option (google.api.http) = {
            delete: "/api/user/{id}"
        };
    }

    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {
        option (google.api.http) = {
            get: "/api/user"
        };
    }

    rpc GetAllUsersOfClassroom(GetAllUsersOfClassroomRequest) returns (GetAllUsersOfClassroomResponse) {
        option (google.api.http) = {
            get: "/api/classroom/{classroomID}/user"
        };
    }

    rpc ApproveUserJoinClassroom(ApproveUserJoinClassroomRequest) returns (ApproveUserJoinClassroomResponse) {
        option (google.api.http) = {
            put: "/api/classroom/{classroomID}/approve/{userID}"
        };
    }

    rpc CheckStatusUserJoinClassroom(CheckStatusUserJoinClassroomRequest) returns (CheckStatusUserJoinClassroomResponse) {
        option (google.api.http) = {
            get: "/api/user/{id}/classroom-status"
        };
    }

}

message CommonUserResponse {
    int32 statusCode = 1 [(validate.rules).int32.gte = 1];
    string message = 2 [(validate.rules).string = {min_len: 2}];
}


// ====== user ======
message UserInput {
    string id = 1;
    string class = 2 [(validate.rules).string = {min_len: 4, max_len: 10}];
    optional string major = 3 [(validate.rules).string = {min_len: 2}];
    optional string phone = 4 [(validate.rules).string = {min_len: 10, max_len: 11}];
    string photoSrc = 5;
    string role = 6 [(validate.rules).string = {in: ["teacher", "student", "admin"]}];
    string name = 7 [(validate.rules).string = {min_len: 2, max_len: 200}];
    string email = 8 [(validate.rules).string.email = true];
    optional string classroomID = 9;
}

message UserResponse {
    string id = 1;
    string class = 2 [(validate.rules).string = {min_len: 4, max_len: 10}];
    optional string major = 3 [(validate.rules).string = {min_len: 2}];
    optional string phone = 4 [(validate.rules).string = {min_len: 10, max_len: 11}];
    string photoSrc = 5;
    string role = 6 [(validate.rules).string = {in: ["teacher", "student", "admin"]}];
    string name = 7 [(validate.rules).string = {min_len: 2, max_len: 200}];
    string email = 8 [(validate.rules).string.email = true];
    optional string classroomID = 9;
}

message CreateUserRequest {
   UserInput user = 1 [(validate.rules).message = {required: true}];
}

message CreateUserResponse {
    CommonUserResponse response = 1 [(validate.rules).message = {required: true}];
}


// ====== GET ======
message GetUserRequest {
    string id = 1;
}

message GetUserResponse {
    CommonUserResponse response = 1 [(validate.rules).message = {required: true}];
    UserResponse user = 2 [(validate.rules).message = {required: true}];
}

// ====== PUT ======
message UpdateUserRequest {
    string id = 1;
    UserInput user = 2 [(validate.rules).message = {required: true}];
}

message UpdateUserResponse {
    CommonUserResponse response = 1 [(validate.rules).message = {required: true}];
}

// ====== DELETE ======
message DeleteUserRequest {
    string id = 1;
}

message DeleteUserResponse {
    CommonUserResponse response = 1 [(validate.rules).message = {required: true}];
}


// ====== GET ALL ======
message GetUsersRequest {}

message GetUsersResponse {
    CommonUserResponse response = 1 [(validate.rules).message = {required: true}];
    int32 totalCount = 2 [(validate.rules).int32.gte = 0];
    repeated UserResponse users = 3;
}

// ====== GET ALL OF CLASSROOM ======
message GetAllUsersOfClassroomRequest {
    int32 classroomID = 1 [(validate.rules).int32.gte = 1];
}

message GetAllUsersOfClassroomResponse {
    CommonUserResponse response = 1 [(validate.rules).message = {required: true}];
    int32 totalCount = 2 [(validate.rules).int32.gte = 0];
    repeated UserResponse users = 3;
}

// ====== APPROVE USER JOIN CLASSROOM ======
message ApproveUserJoinClassroomRequest {
    int32 classroomID = 1 [(validate.rules).int32.gte = 1];
    string userID = 2;
}

message ApproveUserJoinClassroomResponse {
    CommonUserResponse response = 1 [(validate.rules).message = {required: true}];
}


// ======= LOGIN ======
message LoginRequest {
    
}

message LoginResponse {}

message ClassroomUserResponse {
    int32 id = 1 [(validate.rules).int32.gte = 1];
    string title = 2 [(validate.rules).string = {min_len: 2, max_len: 200}];
    string description = 3 [(validate.rules).string = {min_len: 2}];
    string status = 4 [(validate.rules).string = {min_len: 2}];
    string lecturerId = 5;
    string codeClassroom = 6 [(validate.rules).string = {min_len: 2}];
    string topicTags = 7 [(validate.rules).string = {min_len: 2}];
    int32 quantity = 8 [(validate.rules).int32.gte = 0];
    google.protobuf.Timestamp createdAt = 9 [(validate.rules).timestamp.required = true];
    google.protobuf.Timestamp updatedAt = 10 [(validate.rules).timestamp.required = true];
}



// ====== CHECK USER JOIN CLASSROOM ======
message CheckStatusUserJoinClassroomRequest{
    string id = 1;
}

message CheckStatusUserJoinClassroomResponse{
    string status = 1;
    ClassroomUserResponse classroom = 2;
}