// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api_point.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserPointResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserPointResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserPointResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserPointResponseMultiError, or nil if none found.
func (m *UserPointResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserPointResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PhotoSrc

	// no validation rules for Role

	// no validation rules for Name

	// no validation rules for Email

	if m.Class != nil {
		// no validation rules for Class
	}

	if m.Major != nil {
		// no validation rules for Major
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if len(errors) > 0 {
		return UserPointResponseMultiError(errors)
	}

	return nil
}

// UserPointResponseMultiError is an error wrapping multiple validation errors
// returned by UserPointResponse.ValidateAll() if the designated constraints
// aren't met.
type UserPointResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserPointResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserPointResponseMultiError) AllErrors() []error { return m }

// UserPointResponseValidationError is the validation error returned by
// UserPointResponse.Validate if the designated constraints aren't met.
type UserPointResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserPointResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserPointResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserPointResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserPointResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserPointResponseValidationError) ErrorName() string {
	return "UserPointResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserPointResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserPointResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserPointResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserPointResponseValidationError{}

// Validate checks the field values on AssessItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssessItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssessItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssessItemResponseMultiError, or nil if none found.
func (m *AssessItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssessItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetLecturer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssessItemResponseValidationError{
					field:  "Lecturer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssessItemResponseValidationError{
					field:  "Lecturer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLecturer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssessItemResponseValidationError{
				field:  "Lecturer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Point

	// no validation rules for Comment

	if len(errors) > 0 {
		return AssessItemResponseMultiError(errors)
	}

	return nil
}

// AssessItemResponseMultiError is an error wrapping multiple validation errors
// returned by AssessItemResponse.ValidateAll() if the designated constraints
// aren't met.
type AssessItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssessItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssessItemResponseMultiError) AllErrors() []error { return m }

// AssessItemResponseValidationError is the validation error returned by
// AssessItemResponse.Validate if the designated constraints aren't met.
type AssessItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssessItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssessItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssessItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssessItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssessItemResponseValidationError) ErrorName() string {
	return "AssessItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssessItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssessItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssessItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssessItemResponseValidationError{}

// Validate checks the field values on AssessItemInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AssessItemInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssessItemInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssessItemInputMultiError, or nil if none found.
func (m *AssessItemInput) ValidateAll() error {
	return m.validate(true)
}

func (m *AssessItemInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for LecturerID

	// no validation rules for Point

	// no validation rules for Comment

	if len(errors) > 0 {
		return AssessItemInputMultiError(errors)
	}

	return nil
}

// AssessItemInputMultiError is an error wrapping multiple validation errors
// returned by AssessItemInput.ValidateAll() if the designated constraints
// aren't met.
type AssessItemInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssessItemInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssessItemInputMultiError) AllErrors() []error { return m }

// AssessItemInputValidationError is the validation error returned by
// AssessItemInput.Validate if the designated constraints aren't met.
type AssessItemInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssessItemInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssessItemInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssessItemInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssessItemInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssessItemInputValidationError) ErrorName() string { return "AssessItemInputValidationError" }

// Error satisfies the builtin error interface
func (e AssessItemInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssessItemInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssessItemInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssessItemInputValidationError{}

// Validate checks the field values on PointResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PointResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PointResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PointResponseMultiError, or
// nil if none found.
func (m *PointResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PointResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetStudent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PointResponseValidationError{
					field:  "Student",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PointResponseValidationError{
					field:  "Student",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PointResponseValidationError{
				field:  "Student",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAssesses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PointResponseValidationError{
						field:  fmt.Sprintf("Assesses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PointResponseValidationError{
						field:  fmt.Sprintf("Assesses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PointResponseValidationError{
					field:  fmt.Sprintf("Assesses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PointResponseMultiError(errors)
	}

	return nil
}

// PointResponseMultiError is an error wrapping multiple validation errors
// returned by PointResponse.ValidateAll() if the designated constraints
// aren't met.
type PointResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PointResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PointResponseMultiError) AllErrors() []error { return m }

// PointResponseValidationError is the validation error returned by
// PointResponse.Validate if the designated constraints aren't met.
type PointResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointResponseValidationError) ErrorName() string { return "PointResponseValidationError" }

// Error satisfies the builtin error interface
func (e PointResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPointResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointResponseValidationError{}

// Validate checks the field values on Point with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Point) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Point with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PointMultiError, or nil if none found.
func (m *Point) ValidateAll() error {
	return m.validate(true)
}

func (m *Point) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for StudentID

	for idx, item := range m.GetAssesses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PointValidationError{
						field:  fmt.Sprintf("Assesses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PointValidationError{
						field:  fmt.Sprintf("Assesses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PointValidationError{
					field:  fmt.Sprintf("Assesses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PointMultiError(errors)
	}

	return nil
}

// PointMultiError is an error wrapping multiple validation errors returned by
// Point.ValidateAll() if the designated constraints aren't met.
type PointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PointMultiError) AllErrors() []error { return m }

// PointValidationError is the validation error returned by Point.Validate if
// the designated constraints aren't met.
type PointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointValidationError) ErrorName() string { return "PointValidationError" }

// Error satisfies the builtin error interface
func (e PointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointValidationError{}

// Validate checks the field values on CreateOrUpdatePointDefRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdatePointDefRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdatePointDefRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdatePointDefRequestMultiError, or nil if none found.
func (m *CreateOrUpdatePointDefRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdatePointDefRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdatePointDefRequestValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdatePointDefRequestValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdatePointDefRequestValidationError{
				field:  "Point",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdatePointDefRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdatePointDefRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdatePointDefRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOrUpdatePointDefRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdatePointDefRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdatePointDefRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdatePointDefRequestValidationError is the validation error
// returned by CreateOrUpdatePointDefRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdatePointDefRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdatePointDefRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdatePointDefRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdatePointDefRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdatePointDefRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdatePointDefRequestValidationError) ErrorName() string {
	return "CreateOrUpdatePointDefRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdatePointDefRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdatePointDefRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdatePointDefRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdatePointDefRequestValidationError{}

// Validate checks the field values on CreateOrUpdatePointDefResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdatePointDefResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdatePointDefResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdatePointDefResponseMultiError, or nil if none found.
func (m *CreateOrUpdatePointDefResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdatePointDefResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdatePointDefResponseValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdatePointDefResponseValidationError{
					field:  "Point",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdatePointDefResponseValidationError{
				field:  "Point",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateOrUpdatePointDefResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdatePointDefResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdatePointDefResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOrUpdatePointDefResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdatePointDefResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdatePointDefResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdatePointDefResponseValidationError is the validation error
// returned by CreateOrUpdatePointDefResponse.Validate if the designated
// constraints aren't met.
type CreateOrUpdatePointDefResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdatePointDefResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdatePointDefResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdatePointDefResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdatePointDefResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdatePointDefResponseValidationError) ErrorName() string {
	return "CreateOrUpdatePointDefResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdatePointDefResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdatePointDefResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdatePointDefResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdatePointDefResponseValidationError{}

// Validate checks the field values on GetAllPointDefRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllPointDefRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllPointDefRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllPointDefRequestMultiError, or nil if none found.
func (m *GetAllPointDefRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllPointDefRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllPointDefRequestMultiError(errors)
	}

	return nil
}

// GetAllPointDefRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllPointDefRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllPointDefRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllPointDefRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllPointDefRequestMultiError) AllErrors() []error { return m }

// GetAllPointDefRequestValidationError is the validation error returned by
// GetAllPointDefRequest.Validate if the designated constraints aren't met.
type GetAllPointDefRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllPointDefRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllPointDefRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllPointDefRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllPointDefRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllPointDefRequestValidationError) ErrorName() string {
	return "GetAllPointDefRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllPointDefRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllPointDefRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllPointDefRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllPointDefRequestValidationError{}

// Validate checks the field values on GetAllPointDefResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllPointDefResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllPointDefResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllPointDefResponseMultiError, or nil if none found.
func (m *GetAllPointDefResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllPointDefResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllPointDefResponseValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllPointDefResponseValidationError{
						field:  fmt.Sprintf("Points[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllPointDefResponseValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllPointDefResponseMultiError(errors)
	}

	return nil
}

// GetAllPointDefResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllPointDefResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllPointDefResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllPointDefResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllPointDefResponseMultiError) AllErrors() []error { return m }

// GetAllPointDefResponseValidationError is the validation error returned by
// GetAllPointDefResponse.Validate if the designated constraints aren't met.
type GetAllPointDefResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllPointDefResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllPointDefResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllPointDefResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllPointDefResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllPointDefResponseValidationError) ErrorName() string {
	return "GetAllPointDefResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllPointDefResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllPointDefResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllPointDefResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllPointDefResponseValidationError{}
