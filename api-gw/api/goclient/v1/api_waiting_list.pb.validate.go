// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api_waiting_list.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonWaitingListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonWaitingListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonWaitingListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonWaitingListResponseMultiError, or nil if none found.
func (m *CommonWaitingListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonWaitingListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStatusCode() < 1 {
		err := CommonWaitingListResponseValidationError{
			field:  "StatusCode",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) < 2 {
		err := CommonWaitingListResponseValidationError{
			field:  "Message",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommonWaitingListResponseMultiError(errors)
	}

	return nil
}

// CommonWaitingListResponseMultiError is an error wrapping multiple validation
// errors returned by CommonWaitingListResponse.ValidateAll() if the
// designated constraints aren't met.
type CommonWaitingListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonWaitingListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonWaitingListResponseMultiError) AllErrors() []error { return m }

// CommonWaitingListResponseValidationError is the validation error returned by
// CommonWaitingListResponse.Validate if the designated constraints aren't met.
type CommonWaitingListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonWaitingListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonWaitingListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonWaitingListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonWaitingListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonWaitingListResponseValidationError) ErrorName() string {
	return "CommonWaitingListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommonWaitingListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonWaitingListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonWaitingListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonWaitingListResponseValidationError{}

// Validate checks the field values on WaitingListInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WaitingListInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WaitingListInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WaitingListInputMultiError, or nil if none found.
func (m *WaitingListInput) ValidateAll() error {
	return m.validate(true)
}

func (m *WaitingListInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClassroomID() < 1 {
		err := WaitingListInputValidationError{
			field:  "ClassroomID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserID() < 1 {
		err := WaitingListInputValidationError{
			field:  "UserID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WaitingListInputMultiError(errors)
	}

	return nil
}

// WaitingListInputMultiError is an error wrapping multiple validation errors
// returned by WaitingListInput.ValidateAll() if the designated constraints
// aren't met.
type WaitingListInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WaitingListInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WaitingListInputMultiError) AllErrors() []error { return m }

// WaitingListInputValidationError is the validation error returned by
// WaitingListInput.Validate if the designated constraints aren't met.
type WaitingListInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WaitingListInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WaitingListInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WaitingListInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WaitingListInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WaitingListInputValidationError) ErrorName() string { return "WaitingListInputValidationError" }

// Error satisfies the builtin error interface
func (e WaitingListInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWaitingListInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WaitingListInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WaitingListInputValidationError{}

// Validate checks the field values on WaitingListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WaitingListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WaitingListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WaitingListResponseMultiError, or nil if none found.
func (m *WaitingListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WaitingListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := WaitingListResponseValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassroomID() < 1 {
		err := WaitingListResponseValidationError{
			field:  "ClassroomID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserID() < 1 {
		err := WaitingListResponseValidationError{
			field:  "UserID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCreatedAt() == nil {
		err := WaitingListResponseValidationError{
			field:  "CreatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WaitingListResponseMultiError(errors)
	}

	return nil
}

// WaitingListResponseMultiError is an error wrapping multiple validation
// errors returned by WaitingListResponse.ValidateAll() if the designated
// constraints aren't met.
type WaitingListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WaitingListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WaitingListResponseMultiError) AllErrors() []error { return m }

// WaitingListResponseValidationError is the validation error returned by
// WaitingListResponse.Validate if the designated constraints aren't met.
type WaitingListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WaitingListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WaitingListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WaitingListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WaitingListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WaitingListResponseValidationError) ErrorName() string {
	return "WaitingListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WaitingListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWaitingListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WaitingListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WaitingListResponseValidationError{}

// Validate checks the field values on CreateWaitingListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWaitingListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWaitingListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWaitingListRequestMultiError, or nil if none found.
func (m *CreateWaitingListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWaitingListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWaitingList() == nil {
		err := CreateWaitingListRequestValidationError{
			field:  "WaitingList",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetWaitingList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWaitingListRequestValidationError{
					field:  "WaitingList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWaitingListRequestValidationError{
					field:  "WaitingList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWaitingList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWaitingListRequestValidationError{
				field:  "WaitingList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWaitingListRequestMultiError(errors)
	}

	return nil
}

// CreateWaitingListRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWaitingListRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWaitingListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWaitingListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWaitingListRequestMultiError) AllErrors() []error { return m }

// CreateWaitingListRequestValidationError is the validation error returned by
// CreateWaitingListRequest.Validate if the designated constraints aren't met.
type CreateWaitingListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWaitingListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWaitingListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWaitingListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWaitingListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWaitingListRequestValidationError) ErrorName() string {
	return "CreateWaitingListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWaitingListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWaitingListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWaitingListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWaitingListRequestValidationError{}

// Validate checks the field values on CreateWaitingListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWaitingListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWaitingListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWaitingListResponseMultiError, or nil if none found.
func (m *CreateWaitingListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWaitingListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := CreateWaitingListResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWaitingListResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWaitingListResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWaitingListResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWaitingListResponseMultiError(errors)
	}

	return nil
}

// CreateWaitingListResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWaitingListResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateWaitingListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWaitingListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWaitingListResponseMultiError) AllErrors() []error { return m }

// CreateWaitingListResponseValidationError is the validation error returned by
// CreateWaitingListResponse.Validate if the designated constraints aren't met.
type CreateWaitingListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWaitingListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWaitingListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWaitingListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWaitingListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWaitingListResponseValidationError) ErrorName() string {
	return "CreateWaitingListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWaitingListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWaitingListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWaitingListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWaitingListResponseValidationError{}

// Validate checks the field values on GetWaitingListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWaitingListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWaitingListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWaitingListRequestMultiError, or nil if none found.
func (m *GetWaitingListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWaitingListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetWaitingListRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWaitingListRequestMultiError(errors)
	}

	return nil
}

// GetWaitingListRequestMultiError is an error wrapping multiple validation
// errors returned by GetWaitingListRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWaitingListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWaitingListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWaitingListRequestMultiError) AllErrors() []error { return m }

// GetWaitingListRequestValidationError is the validation error returned by
// GetWaitingListRequest.Validate if the designated constraints aren't met.
type GetWaitingListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWaitingListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWaitingListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWaitingListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWaitingListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWaitingListRequestValidationError) ErrorName() string {
	return "GetWaitingListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWaitingListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWaitingListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWaitingListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWaitingListRequestValidationError{}

// Validate checks the field values on GetWaitingListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWaitingListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWaitingListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWaitingListResponseMultiError, or nil if none found.
func (m *GetWaitingListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWaitingListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetWaitingListResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWaitingListResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWaitingListResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWaitingListResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetWaitingList() == nil {
		err := GetWaitingListResponseValidationError{
			field:  "WaitingList",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetWaitingList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWaitingListResponseValidationError{
					field:  "WaitingList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWaitingListResponseValidationError{
					field:  "WaitingList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWaitingList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWaitingListResponseValidationError{
				field:  "WaitingList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWaitingListResponseMultiError(errors)
	}

	return nil
}

// GetWaitingListResponseMultiError is an error wrapping multiple validation
// errors returned by GetWaitingListResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWaitingListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWaitingListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWaitingListResponseMultiError) AllErrors() []error { return m }

// GetWaitingListResponseValidationError is the validation error returned by
// GetWaitingListResponse.Validate if the designated constraints aren't met.
type GetWaitingListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWaitingListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWaitingListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWaitingListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWaitingListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWaitingListResponseValidationError) ErrorName() string {
	return "GetWaitingListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWaitingListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWaitingListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWaitingListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWaitingListResponseValidationError{}

// Validate checks the field values on UpdateWaitingListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWaitingListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWaitingListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWaitingListRequestMultiError, or nil if none found.
func (m *UpdateWaitingListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWaitingListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateWaitingListRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWaitingList() == nil {
		err := UpdateWaitingListRequestValidationError{
			field:  "WaitingList",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetWaitingList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWaitingListRequestValidationError{
					field:  "WaitingList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWaitingListRequestValidationError{
					field:  "WaitingList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWaitingList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWaitingListRequestValidationError{
				field:  "WaitingList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWaitingListRequestMultiError(errors)
	}

	return nil
}

// UpdateWaitingListRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWaitingListRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWaitingListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWaitingListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWaitingListRequestMultiError) AllErrors() []error { return m }

// UpdateWaitingListRequestValidationError is the validation error returned by
// UpdateWaitingListRequest.Validate if the designated constraints aren't met.
type UpdateWaitingListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWaitingListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWaitingListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWaitingListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWaitingListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWaitingListRequestValidationError) ErrorName() string {
	return "UpdateWaitingListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWaitingListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWaitingListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWaitingListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWaitingListRequestValidationError{}

// Validate checks the field values on UpdateWaitingListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWaitingListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWaitingListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWaitingListResponseMultiError, or nil if none found.
func (m *UpdateWaitingListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWaitingListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := UpdateWaitingListResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWaitingListResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWaitingListResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWaitingListResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWaitingListResponseMultiError(errors)
	}

	return nil
}

// UpdateWaitingListResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateWaitingListResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateWaitingListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWaitingListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWaitingListResponseMultiError) AllErrors() []error { return m }

// UpdateWaitingListResponseValidationError is the validation error returned by
// UpdateWaitingListResponse.Validate if the designated constraints aren't met.
type UpdateWaitingListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWaitingListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWaitingListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWaitingListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWaitingListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWaitingListResponseValidationError) ErrorName() string {
	return "UpdateWaitingListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWaitingListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWaitingListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWaitingListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWaitingListResponseValidationError{}

// Validate checks the field values on DeleteWaitingListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWaitingListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWaitingListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWaitingListRequestMultiError, or nil if none found.
func (m *DeleteWaitingListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWaitingListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteWaitingListRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteWaitingListRequestMultiError(errors)
	}

	return nil
}

// DeleteWaitingListRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWaitingListRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWaitingListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWaitingListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWaitingListRequestMultiError) AllErrors() []error { return m }

// DeleteWaitingListRequestValidationError is the validation error returned by
// DeleteWaitingListRequest.Validate if the designated constraints aren't met.
type DeleteWaitingListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWaitingListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWaitingListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWaitingListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWaitingListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWaitingListRequestValidationError) ErrorName() string {
	return "DeleteWaitingListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWaitingListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWaitingListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWaitingListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWaitingListRequestValidationError{}

// Validate checks the field values on DeleteWaitingListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWaitingListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWaitingListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWaitingListResponseMultiError, or nil if none found.
func (m *DeleteWaitingListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWaitingListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := DeleteWaitingListResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteWaitingListResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteWaitingListResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteWaitingListResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteWaitingListResponseMultiError(errors)
	}

	return nil
}

// DeleteWaitingListResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteWaitingListResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteWaitingListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWaitingListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWaitingListResponseMultiError) AllErrors() []error { return m }

// DeleteWaitingListResponseValidationError is the validation error returned by
// DeleteWaitingListResponse.Validate if the designated constraints aren't met.
type DeleteWaitingListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWaitingListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWaitingListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWaitingListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWaitingListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWaitingListResponseValidationError) ErrorName() string {
	return "DeleteWaitingListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWaitingListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWaitingListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWaitingListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWaitingListResponseValidationError{}

// Validate checks the field values on GetWaitingListsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWaitingListsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWaitingListsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWaitingListsRequestMultiError, or nil if none found.
func (m *GetWaitingListsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWaitingListsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClassroomID() < 1 {
		err := GetWaitingListsRequestValidationError{
			field:  "ClassroomID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWaitingListsRequestMultiError(errors)
	}

	return nil
}

// GetWaitingListsRequestMultiError is an error wrapping multiple validation
// errors returned by GetWaitingListsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWaitingListsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWaitingListsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWaitingListsRequestMultiError) AllErrors() []error { return m }

// GetWaitingListsRequestValidationError is the validation error returned by
// GetWaitingListsRequest.Validate if the designated constraints aren't met.
type GetWaitingListsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWaitingListsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWaitingListsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWaitingListsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWaitingListsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWaitingListsRequestValidationError) ErrorName() string {
	return "GetWaitingListsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWaitingListsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWaitingListsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWaitingListsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWaitingListsRequestValidationError{}

// Validate checks the field values on GetWaitingListsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWaitingListsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWaitingListsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWaitingListsResponseMultiError, or nil if none found.
func (m *GetWaitingListsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWaitingListsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetWaitingListsResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWaitingListsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWaitingListsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWaitingListsResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWaitingLists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWaitingListsResponseValidationError{
						field:  fmt.Sprintf("WaitingLists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWaitingListsResponseValidationError{
						field:  fmt.Sprintf("WaitingLists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWaitingListsResponseValidationError{
					field:  fmt.Sprintf("WaitingLists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWaitingListsResponseMultiError(errors)
	}

	return nil
}

// GetWaitingListsResponseMultiError is an error wrapping multiple validation
// errors returned by GetWaitingListsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWaitingListsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWaitingListsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWaitingListsResponseMultiError) AllErrors() []error { return m }

// GetWaitingListsResponseValidationError is the validation error returned by
// GetWaitingListsResponse.Validate if the designated constraints aren't met.
type GetWaitingListsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWaitingListsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWaitingListsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWaitingListsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWaitingListsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWaitingListsResponseValidationError) ErrorName() string {
	return "GetWaitingListsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWaitingListsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWaitingListsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWaitingListsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWaitingListsResponseValidationError{}
