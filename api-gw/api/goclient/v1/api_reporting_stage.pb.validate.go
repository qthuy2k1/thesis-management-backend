// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api_reporting_stage.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonReportingStageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonReportingStageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonReportingStageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonReportingStageResponseMultiError, or nil if none found.
func (m *CommonReportingStageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonReportingStageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStatusCode() < 1 {
		err := CommonReportingStageResponseValidationError{
			field:  "StatusCode",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) < 2 {
		err := CommonReportingStageResponseValidationError{
			field:  "Message",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommonReportingStageResponseMultiError(errors)
	}

	return nil
}

// CommonReportingStageResponseMultiError is an error wrapping multiple
// validation errors returned by CommonReportingStageResponse.ValidateAll() if
// the designated constraints aren't met.
type CommonReportingStageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonReportingStageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonReportingStageResponseMultiError) AllErrors() []error { return m }

// CommonReportingStageResponseValidationError is the validation error returned
// by CommonReportingStageResponse.Validate if the designated constraints
// aren't met.
type CommonReportingStageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonReportingStageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonReportingStageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonReportingStageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonReportingStageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonReportingStageResponseValidationError) ErrorName() string {
	return "CommonReportingStageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommonReportingStageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonReportingStageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonReportingStageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonReportingStageResponseValidationError{}

// Validate checks the field values on ReportingStageInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportingStageInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportingStageInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportingStageInputMultiError, or nil if none found.
func (m *ReportingStageInput) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportingStageInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 2 {
		err := ReportingStageInputValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 2 {
		err := ReportingStageInputValidationError{
			field:  "Description",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReportingStageInputMultiError(errors)
	}

	return nil
}

// ReportingStageInputMultiError is an error wrapping multiple validation
// errors returned by ReportingStageInput.ValidateAll() if the designated
// constraints aren't met.
type ReportingStageInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportingStageInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportingStageInputMultiError) AllErrors() []error { return m }

// ReportingStageInputValidationError is the validation error returned by
// ReportingStageInput.Validate if the designated constraints aren't met.
type ReportingStageInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportingStageInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportingStageInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportingStageInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportingStageInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportingStageInputValidationError) ErrorName() string {
	return "ReportingStageInputValidationError"
}

// Error satisfies the builtin error interface
func (e ReportingStageInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportingStageInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportingStageInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportingStageInputValidationError{}

// Validate checks the field values on ReportingStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReportingStageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportingStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReportingStageResponseMultiError, or nil if none found.
func (m *ReportingStageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportingStageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := ReportingStageResponseValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 2 {
		err := ReportingStageResponseValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 2 {
		err := ReportingStageResponseValidationError{
			field:  "Description",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReportingStageResponseMultiError(errors)
	}

	return nil
}

// ReportingStageResponseMultiError is an error wrapping multiple validation
// errors returned by ReportingStageResponse.ValidateAll() if the designated
// constraints aren't met.
type ReportingStageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportingStageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportingStageResponseMultiError) AllErrors() []error { return m }

// ReportingStageResponseValidationError is the validation error returned by
// ReportingStageResponse.Validate if the designated constraints aren't met.
type ReportingStageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportingStageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportingStageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportingStageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportingStageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportingStageResponseValidationError) ErrorName() string {
	return "ReportingStageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReportingStageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportingStageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportingStageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportingStageResponseValidationError{}

// Validate checks the field values on CreateReportingStageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReportingStageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReportingStageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReportingStageRequestMultiError, or nil if none found.
func (m *CreateReportingStageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReportingStageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReportingStage() == nil {
		err := CreateReportingStageRequestValidationError{
			field:  "ReportingStage",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetReportingStage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReportingStageRequestValidationError{
					field:  "ReportingStage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReportingStageRequestValidationError{
					field:  "ReportingStage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportingStage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReportingStageRequestValidationError{
				field:  "ReportingStage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReportingStageRequestMultiError(errors)
	}

	return nil
}

// CreateReportingStageRequestMultiError is an error wrapping multiple
// validation errors returned by CreateReportingStageRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateReportingStageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReportingStageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReportingStageRequestMultiError) AllErrors() []error { return m }

// CreateReportingStageRequestValidationError is the validation error returned
// by CreateReportingStageRequest.Validate if the designated constraints
// aren't met.
type CreateReportingStageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReportingStageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReportingStageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReportingStageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReportingStageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReportingStageRequestValidationError) ErrorName() string {
	return "CreateReportingStageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReportingStageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReportingStageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReportingStageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReportingStageRequestValidationError{}

// Validate checks the field values on CreateReportingStageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReportingStageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReportingStageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReportingStageResponseMultiError, or nil if none found.
func (m *CreateReportingStageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReportingStageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := CreateReportingStageResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateReportingStageResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateReportingStageResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateReportingStageResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateReportingStageResponseMultiError(errors)
	}

	return nil
}

// CreateReportingStageResponseMultiError is an error wrapping multiple
// validation errors returned by CreateReportingStageResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateReportingStageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReportingStageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReportingStageResponseMultiError) AllErrors() []error { return m }

// CreateReportingStageResponseValidationError is the validation error returned
// by CreateReportingStageResponse.Validate if the designated constraints
// aren't met.
type CreateReportingStageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReportingStageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReportingStageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReportingStageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReportingStageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReportingStageResponseValidationError) ErrorName() string {
	return "CreateReportingStageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReportingStageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReportingStageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReportingStageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReportingStageResponseValidationError{}

// Validate checks the field values on GetReportingStageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReportingStageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReportingStageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReportingStageRequestMultiError, or nil if none found.
func (m *GetReportingStageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReportingStageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetReportingStageRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetReportingStageRequestMultiError(errors)
	}

	return nil
}

// GetReportingStageRequestMultiError is an error wrapping multiple validation
// errors returned by GetReportingStageRequest.ValidateAll() if the designated
// constraints aren't met.
type GetReportingStageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReportingStageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReportingStageRequestMultiError) AllErrors() []error { return m }

// GetReportingStageRequestValidationError is the validation error returned by
// GetReportingStageRequest.Validate if the designated constraints aren't met.
type GetReportingStageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportingStageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportingStageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportingStageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportingStageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportingStageRequestValidationError) ErrorName() string {
	return "GetReportingStageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReportingStageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportingStageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportingStageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportingStageRequestValidationError{}

// Validate checks the field values on GetReportingStageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReportingStageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReportingStageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReportingStageResponseMultiError, or nil if none found.
func (m *GetReportingStageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReportingStageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetReportingStageResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReportingStageResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReportingStageResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReportingStageResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetReportingStage() == nil {
		err := GetReportingStageResponseValidationError{
			field:  "ReportingStage",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetReportingStage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReportingStageResponseValidationError{
					field:  "ReportingStage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReportingStageResponseValidationError{
					field:  "ReportingStage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportingStage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReportingStageResponseValidationError{
				field:  "ReportingStage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetReportingStageResponseMultiError(errors)
	}

	return nil
}

// GetReportingStageResponseMultiError is an error wrapping multiple validation
// errors returned by GetReportingStageResponse.ValidateAll() if the
// designated constraints aren't met.
type GetReportingStageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReportingStageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReportingStageResponseMultiError) AllErrors() []error { return m }

// GetReportingStageResponseValidationError is the validation error returned by
// GetReportingStageResponse.Validate if the designated constraints aren't met.
type GetReportingStageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportingStageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportingStageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportingStageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportingStageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportingStageResponseValidationError) ErrorName() string {
	return "GetReportingStageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReportingStageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportingStageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportingStageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportingStageResponseValidationError{}

// Validate checks the field values on UpdateReportingStageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReportingStageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReportingStageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReportingStageRequestMultiError, or nil if none found.
func (m *UpdateReportingStageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReportingStageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateReportingStageRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReportingStage() == nil {
		err := UpdateReportingStageRequestValidationError{
			field:  "ReportingStage",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetReportingStage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReportingStageRequestValidationError{
					field:  "ReportingStage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReportingStageRequestValidationError{
					field:  "ReportingStage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReportingStage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReportingStageRequestValidationError{
				field:  "ReportingStage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateReportingStageRequestMultiError(errors)
	}

	return nil
}

// UpdateReportingStageRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateReportingStageRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateReportingStageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReportingStageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReportingStageRequestMultiError) AllErrors() []error { return m }

// UpdateReportingStageRequestValidationError is the validation error returned
// by UpdateReportingStageRequest.Validate if the designated constraints
// aren't met.
type UpdateReportingStageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReportingStageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReportingStageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReportingStageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReportingStageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReportingStageRequestValidationError) ErrorName() string {
	return "UpdateReportingStageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReportingStageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReportingStageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReportingStageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReportingStageRequestValidationError{}

// Validate checks the field values on UpdateReportingStageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateReportingStageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateReportingStageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateReportingStageResponseMultiError, or nil if none found.
func (m *UpdateReportingStageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateReportingStageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := UpdateReportingStageResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateReportingStageResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateReportingStageResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateReportingStageResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateReportingStageResponseMultiError(errors)
	}

	return nil
}

// UpdateReportingStageResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateReportingStageResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateReportingStageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateReportingStageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateReportingStageResponseMultiError) AllErrors() []error { return m }

// UpdateReportingStageResponseValidationError is the validation error returned
// by UpdateReportingStageResponse.Validate if the designated constraints
// aren't met.
type UpdateReportingStageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateReportingStageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateReportingStageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateReportingStageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateReportingStageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateReportingStageResponseValidationError) ErrorName() string {
	return "UpdateReportingStageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateReportingStageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateReportingStageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateReportingStageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateReportingStageResponseValidationError{}

// Validate checks the field values on DeleteReportingStageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReportingStageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReportingStageRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReportingStageRequestMultiError, or nil if none found.
func (m *DeleteReportingStageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReportingStageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteReportingStageRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteReportingStageRequestMultiError(errors)
	}

	return nil
}

// DeleteReportingStageRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteReportingStageRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteReportingStageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReportingStageRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReportingStageRequestMultiError) AllErrors() []error { return m }

// DeleteReportingStageRequestValidationError is the validation error returned
// by DeleteReportingStageRequest.Validate if the designated constraints
// aren't met.
type DeleteReportingStageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReportingStageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReportingStageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReportingStageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReportingStageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReportingStageRequestValidationError) ErrorName() string {
	return "DeleteReportingStageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReportingStageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReportingStageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReportingStageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReportingStageRequestValidationError{}

// Validate checks the field values on DeleteReportingStageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteReportingStageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteReportingStageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteReportingStageResponseMultiError, or nil if none found.
func (m *DeleteReportingStageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteReportingStageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := DeleteReportingStageResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteReportingStageResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteReportingStageResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteReportingStageResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteReportingStageResponseMultiError(errors)
	}

	return nil
}

// DeleteReportingStageResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteReportingStageResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteReportingStageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteReportingStageResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteReportingStageResponseMultiError) AllErrors() []error { return m }

// DeleteReportingStageResponseValidationError is the validation error returned
// by DeleteReportingStageResponse.Validate if the designated constraints
// aren't met.
type DeleteReportingStageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteReportingStageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteReportingStageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteReportingStageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteReportingStageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteReportingStageResponseValidationError) ErrorName() string {
	return "DeleteReportingStageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteReportingStageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteReportingStageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteReportingStageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteReportingStageResponseValidationError{}

// Validate checks the field values on GetReportingStagesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReportingStagesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReportingStagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReportingStagesRequestMultiError, or nil if none found.
func (m *GetReportingStagesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReportingStagesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetReportingStagesRequestMultiError(errors)
	}

	return nil
}

// GetReportingStagesRequestMultiError is an error wrapping multiple validation
// errors returned by GetReportingStagesRequest.ValidateAll() if the
// designated constraints aren't met.
type GetReportingStagesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReportingStagesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReportingStagesRequestMultiError) AllErrors() []error { return m }

// GetReportingStagesRequestValidationError is the validation error returned by
// GetReportingStagesRequest.Validate if the designated constraints aren't met.
type GetReportingStagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportingStagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportingStagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportingStagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportingStagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportingStagesRequestValidationError) ErrorName() string {
	return "GetReportingStagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReportingStagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportingStagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportingStagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportingStagesRequestValidationError{}

// Validate checks the field values on GetReportingStagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReportingStagesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReportingStagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetReportingStagesResponseMultiError, or nil if none found.
func (m *GetReportingStagesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReportingStagesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetReportingStagesResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReportingStagesResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReportingStagesResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReportingStagesResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetReportingStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetReportingStagesResponseValidationError{
						field:  fmt.Sprintf("ReportingStages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetReportingStagesResponseValidationError{
						field:  fmt.Sprintf("ReportingStages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetReportingStagesResponseValidationError{
					field:  fmt.Sprintf("ReportingStages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetReportingStagesResponseMultiError(errors)
	}

	return nil
}

// GetReportingStagesResponseMultiError is an error wrapping multiple
// validation errors returned by GetReportingStagesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetReportingStagesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReportingStagesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReportingStagesResponseMultiError) AllErrors() []error { return m }

// GetReportingStagesResponseValidationError is the validation error returned
// by GetReportingStagesResponse.Validate if the designated constraints aren't met.
type GetReportingStagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReportingStagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReportingStagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReportingStagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReportingStagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReportingStagesResponseValidationError) ErrorName() string {
	return "GetReportingStagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReportingStagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReportingStagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReportingStagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReportingStagesResponseValidationError{}
