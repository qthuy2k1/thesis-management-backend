// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api_classroom.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonClassroomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonClassroomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonClassroomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonClassroomResponseMultiError, or nil if none found.
func (m *CommonClassroomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonClassroomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStatusCode() < 1 {
		err := CommonClassroomResponseValidationError{
			field:  "StatusCode",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) < 2 {
		err := CommonClassroomResponseValidationError{
			field:  "Message",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommonClassroomResponseMultiError(errors)
	}

	return nil
}

// CommonClassroomResponseMultiError is an error wrapping multiple validation
// errors returned by CommonClassroomResponse.ValidateAll() if the designated
// constraints aren't met.
type CommonClassroomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonClassroomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonClassroomResponseMultiError) AllErrors() []error { return m }

// CommonClassroomResponseValidationError is the validation error returned by
// CommonClassroomResponse.Validate if the designated constraints aren't met.
type CommonClassroomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonClassroomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonClassroomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonClassroomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonClassroomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonClassroomResponseValidationError) ErrorName() string {
	return "CommonClassroomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommonClassroomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonClassroomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonClassroomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonClassroomResponseValidationError{}

// Validate checks the field values on ClassroomInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClassroomInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClassroomInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClassroomInputMultiError,
// or nil if none found.
func (m *ClassroomInput) ValidateAll() error {
	return m.validate(true)
}

func (m *ClassroomInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 2 || l > 200 {
		err := ClassroomInputValidationError{
			field:  "Title",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 2 {
		err := ClassroomInputValidationError{
			field:  "Description",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStatus()) < 2 {
		err := ClassroomInputValidationError{
			field:  "Status",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LecturerId

	if utf8.RuneCountInString(m.GetCodeClassroom()) < 2 {
		err := ClassroomInputValidationError{
			field:  "CodeClassroom",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTopicTags()) < 2 {
		err := ClassroomInputValidationError{
			field:  "TopicTags",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQuantity() < 0 {
		err := ClassroomInputValidationError{
			field:  "Quantity",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClassroomInputMultiError(errors)
	}

	return nil
}

// ClassroomInputMultiError is an error wrapping multiple validation errors
// returned by ClassroomInput.ValidateAll() if the designated constraints
// aren't met.
type ClassroomInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClassroomInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClassroomInputMultiError) AllErrors() []error { return m }

// ClassroomInputValidationError is the validation error returned by
// ClassroomInput.Validate if the designated constraints aren't met.
type ClassroomInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClassroomInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClassroomInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClassroomInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClassroomInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClassroomInputValidationError) ErrorName() string { return "ClassroomInputValidationError" }

// Error satisfies the builtin error interface
func (e ClassroomInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClassroomInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClassroomInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClassroomInputValidationError{}

// Validate checks the field values on ClassroomResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClassroomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClassroomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClassroomResponseMultiError, or nil if none found.
func (m *ClassroomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClassroomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := ClassroomResponseValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 2 || l > 200 {
		err := ClassroomResponseValidationError{
			field:  "Title",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 2 {
		err := ClassroomResponseValidationError{
			field:  "Description",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetStatus()) < 2 {
		err := ClassroomResponseValidationError{
			field:  "Status",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LecturerId

	if utf8.RuneCountInString(m.GetCodeClassroom()) < 2 {
		err := ClassroomResponseValidationError{
			field:  "CodeClassroom",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTopicTags()) < 2 {
		err := ClassroomResponseValidationError{
			field:  "TopicTags",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQuantity() < 0 {
		err := ClassroomResponseValidationError{
			field:  "Quantity",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCreatedAt() == nil {
		err := ClassroomResponseValidationError{
			field:  "CreatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() == nil {
		err := ClassroomResponseValidationError{
			field:  "UpdatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPostsAndExercises() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClassroomResponseValidationError{
						field:  fmt.Sprintf("PostsAndExercises[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClassroomResponseValidationError{
						field:  fmt.Sprintf("PostsAndExercises[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClassroomResponseValidationError{
					field:  fmt.Sprintf("PostsAndExercises[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ClassroomResponseMultiError(errors)
	}

	return nil
}

// ClassroomResponseMultiError is an error wrapping multiple validation errors
// returned by ClassroomResponse.ValidateAll() if the designated constraints
// aren't met.
type ClassroomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClassroomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClassroomResponseMultiError) AllErrors() []error { return m }

// ClassroomResponseValidationError is the validation error returned by
// ClassroomResponse.Validate if the designated constraints aren't met.
type ClassroomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClassroomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClassroomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClassroomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClassroomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClassroomResponseValidationError) ErrorName() string {
	return "ClassroomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClassroomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClassroomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClassroomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClassroomResponseValidationError{}

// Validate checks the field values on PostsAndExercisesOfClassroom with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostsAndExercisesOfClassroom) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostsAndExercisesOfClassroom with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostsAndExercisesOfClassroomMultiError, or nil if none found.
func (m *PostsAndExercisesOfClassroom) ValidateAll() error {
	return m.validate(true)
}

func (m *PostsAndExercisesOfClassroom) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := PostsAndExercisesOfClassroomValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 2 || l > 200 {
		err := PostsAndExercisesOfClassroomValidationError{
			field:  "Title",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 2 {
		err := PostsAndExercisesOfClassroomValidationError{
			field:  "Content",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassroomID() < 1 {
		err := PostsAndExercisesOfClassroomValidationError{
			field:  "ClassroomID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReportingStageID() < 1 {
		err := PostsAndExercisesOfClassroomValidationError{
			field:  "ReportingStageID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AuthorID

	if m.GetCreatedAt() == nil {
		err := PostsAndExercisesOfClassroomValidationError{
			field:  "CreatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() == nil {
		err := PostsAndExercisesOfClassroomValidationError{
			field:  "UpdatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _PostsAndExercisesOfClassroom_Type_InLookup[m.GetType()]; !ok {
		err := PostsAndExercisesOfClassroomValidationError{
			field:  "Type",
			reason: "value must be in list [post exercise]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Deadline != nil {

		if all {
			switch v := interface{}(m.GetDeadline()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PostsAndExercisesOfClassroomValidationError{
						field:  "Deadline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PostsAndExercisesOfClassroomValidationError{
						field:  "Deadline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeadline()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PostsAndExercisesOfClassroomValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Score != nil {

		if m.GetScore() < 0 {
			err := PostsAndExercisesOfClassroomValidationError{
				field:  "Score",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PostsAndExercisesOfClassroomMultiError(errors)
	}

	return nil
}

// PostsAndExercisesOfClassroomMultiError is an error wrapping multiple
// validation errors returned by PostsAndExercisesOfClassroom.ValidateAll() if
// the designated constraints aren't met.
type PostsAndExercisesOfClassroomMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostsAndExercisesOfClassroomMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostsAndExercisesOfClassroomMultiError) AllErrors() []error { return m }

// PostsAndExercisesOfClassroomValidationError is the validation error returned
// by PostsAndExercisesOfClassroom.Validate if the designated constraints
// aren't met.
type PostsAndExercisesOfClassroomValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostsAndExercisesOfClassroomValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostsAndExercisesOfClassroomValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostsAndExercisesOfClassroomValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostsAndExercisesOfClassroomValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostsAndExercisesOfClassroomValidationError) ErrorName() string {
	return "PostsAndExercisesOfClassroomValidationError"
}

// Error satisfies the builtin error interface
func (e PostsAndExercisesOfClassroomValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostsAndExercisesOfClassroom.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostsAndExercisesOfClassroomValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostsAndExercisesOfClassroomValidationError{}

var _PostsAndExercisesOfClassroom_Type_InLookup = map[string]struct{}{
	"post":     {},
	"exercise": {},
}

// Validate checks the field values on CreateClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateClassroomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateClassroomRequestMultiError, or nil if none found.
func (m *CreateClassroomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateClassroomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClassroom() == nil {
		err := CreateClassroomRequestValidationError{
			field:  "Classroom",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetClassroom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateClassroomRequestValidationError{
					field:  "Classroom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateClassroomRequestValidationError{
					field:  "Classroom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClassroom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClassroomRequestValidationError{
				field:  "Classroom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateClassroomRequestMultiError(errors)
	}

	return nil
}

// CreateClassroomRequestMultiError is an error wrapping multiple validation
// errors returned by CreateClassroomRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateClassroomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClassroomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClassroomRequestMultiError) AllErrors() []error { return m }

// CreateClassroomRequestValidationError is the validation error returned by
// CreateClassroomRequest.Validate if the designated constraints aren't met.
type CreateClassroomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClassroomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClassroomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClassroomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClassroomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClassroomRequestValidationError) ErrorName() string {
	return "CreateClassroomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClassroomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClassroomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClassroomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClassroomRequestValidationError{}

// Validate checks the field values on CreateClassroomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateClassroomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateClassroomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateClassroomResponseMultiError, or nil if none found.
func (m *CreateClassroomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateClassroomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := CreateClassroomResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateClassroomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateClassroomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClassroomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateClassroomResponseMultiError(errors)
	}

	return nil
}

// CreateClassroomResponseMultiError is an error wrapping multiple validation
// errors returned by CreateClassroomResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateClassroomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClassroomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClassroomResponseMultiError) AllErrors() []error { return m }

// CreateClassroomResponseValidationError is the validation error returned by
// CreateClassroomResponse.Validate if the designated constraints aren't met.
type CreateClassroomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClassroomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClassroomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClassroomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClassroomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClassroomResponseValidationError) ErrorName() string {
	return "CreateClassroomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClassroomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClassroomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClassroomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClassroomResponseValidationError{}

// Validate checks the field values on GetClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClassroomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClassroomRequestMultiError, or nil if none found.
func (m *GetClassroomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClassroomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetClassroomRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TitleSearch

	// no validation rules for SortColumn

	if len(errors) > 0 {
		return GetClassroomRequestMultiError(errors)
	}

	return nil
}

// GetClassroomRequestMultiError is an error wrapping multiple validation
// errors returned by GetClassroomRequest.ValidateAll() if the designated
// constraints aren't met.
type GetClassroomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClassroomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClassroomRequestMultiError) AllErrors() []error { return m }

// GetClassroomRequestValidationError is the validation error returned by
// GetClassroomRequest.Validate if the designated constraints aren't met.
type GetClassroomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClassroomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClassroomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClassroomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClassroomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClassroomRequestValidationError) ErrorName() string {
	return "GetClassroomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClassroomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClassroomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClassroomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClassroomRequestValidationError{}

// Validate checks the field values on GetClassroomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClassroomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClassroomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClassroomResponseMultiError, or nil if none found.
func (m *GetClassroomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClassroomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetClassroomResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClassroomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClassroomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClassroomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetClassroom() == nil {
		err := GetClassroomResponseValidationError{
			field:  "Classroom",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetClassroom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClassroomResponseValidationError{
					field:  "Classroom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClassroomResponseValidationError{
					field:  "Classroom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClassroom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClassroomResponseValidationError{
				field:  "Classroom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClassroomResponseMultiError(errors)
	}

	return nil
}

// GetClassroomResponseMultiError is an error wrapping multiple validation
// errors returned by GetClassroomResponse.ValidateAll() if the designated
// constraints aren't met.
type GetClassroomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClassroomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClassroomResponseMultiError) AllErrors() []error { return m }

// GetClassroomResponseValidationError is the validation error returned by
// GetClassroomResponse.Validate if the designated constraints aren't met.
type GetClassroomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClassroomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClassroomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClassroomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClassroomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClassroomResponseValidationError) ErrorName() string {
	return "GetClassroomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClassroomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClassroomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClassroomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClassroomResponseValidationError{}

// Validate checks the field values on CheckClassroomExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckClassroomExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckClassroomExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckClassroomExistsRequestMultiError, or nil if none found.
func (m *CheckClassroomExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckClassroomExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetClassroomID() < 1 {
		err := CheckClassroomExistsRequestValidationError{
			field:  "ClassroomID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckClassroomExistsRequestMultiError(errors)
	}

	return nil
}

// CheckClassroomExistsRequestMultiError is an error wrapping multiple
// validation errors returned by CheckClassroomExistsRequest.ValidateAll() if
// the designated constraints aren't met.
type CheckClassroomExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckClassroomExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckClassroomExistsRequestMultiError) AllErrors() []error { return m }

// CheckClassroomExistsRequestValidationError is the validation error returned
// by CheckClassroomExistsRequest.Validate if the designated constraints
// aren't met.
type CheckClassroomExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckClassroomExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckClassroomExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckClassroomExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckClassroomExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckClassroomExistsRequestValidationError) ErrorName() string {
	return "CheckClassroomExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckClassroomExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckClassroomExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckClassroomExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckClassroomExistsRequestValidationError{}

// Validate checks the field values on CheckClassroomExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckClassroomExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckClassroomExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckClassroomExistsResponseMultiError, or nil if none found.
func (m *CheckClassroomExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckClassroomExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckClassroomExistsResponseMultiError(errors)
	}

	return nil
}

// CheckClassroomExistsResponseMultiError is an error wrapping multiple
// validation errors returned by CheckClassroomExistsResponse.ValidateAll() if
// the designated constraints aren't met.
type CheckClassroomExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckClassroomExistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckClassroomExistsResponseMultiError) AllErrors() []error { return m }

// CheckClassroomExistsResponseValidationError is the validation error returned
// by CheckClassroomExistsResponse.Validate if the designated constraints
// aren't met.
type CheckClassroomExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckClassroomExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckClassroomExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckClassroomExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckClassroomExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckClassroomExistsResponseValidationError) ErrorName() string {
	return "CheckClassroomExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckClassroomExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckClassroomExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckClassroomExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckClassroomExistsResponseValidationError{}

// Validate checks the field values on UpdateClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateClassroomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClassroomRequestMultiError, or nil if none found.
func (m *UpdateClassroomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClassroomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateClassroomRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassroom() == nil {
		err := UpdateClassroomRequestValidationError{
			field:  "Classroom",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetClassroom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateClassroomRequestValidationError{
					field:  "Classroom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateClassroomRequestValidationError{
					field:  "Classroom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClassroom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClassroomRequestValidationError{
				field:  "Classroom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateClassroomRequestMultiError(errors)
	}

	return nil
}

// UpdateClassroomRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateClassroomRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateClassroomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClassroomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClassroomRequestMultiError) AllErrors() []error { return m }

// UpdateClassroomRequestValidationError is the validation error returned by
// UpdateClassroomRequest.Validate if the designated constraints aren't met.
type UpdateClassroomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClassroomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClassroomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClassroomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClassroomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClassroomRequestValidationError) ErrorName() string {
	return "UpdateClassroomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClassroomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClassroomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClassroomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClassroomRequestValidationError{}

// Validate checks the field values on UpdateClassroomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateClassroomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateClassroomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateClassroomResponseMultiError, or nil if none found.
func (m *UpdateClassroomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateClassroomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := UpdateClassroomResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateClassroomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateClassroomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateClassroomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateClassroomResponseMultiError(errors)
	}

	return nil
}

// UpdateClassroomResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateClassroomResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateClassroomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateClassroomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateClassroomResponseMultiError) AllErrors() []error { return m }

// UpdateClassroomResponseValidationError is the validation error returned by
// UpdateClassroomResponse.Validate if the designated constraints aren't met.
type UpdateClassroomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateClassroomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateClassroomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateClassroomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateClassroomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateClassroomResponseValidationError) ErrorName() string {
	return "UpdateClassroomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateClassroomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateClassroomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateClassroomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateClassroomResponseValidationError{}

// Validate checks the field values on DeleteClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteClassroomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteClassroomRequestMultiError, or nil if none found.
func (m *DeleteClassroomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteClassroomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteClassroomRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteClassroomRequestMultiError(errors)
	}

	return nil
}

// DeleteClassroomRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteClassroomRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteClassroomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteClassroomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteClassroomRequestMultiError) AllErrors() []error { return m }

// DeleteClassroomRequestValidationError is the validation error returned by
// DeleteClassroomRequest.Validate if the designated constraints aren't met.
type DeleteClassroomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClassroomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClassroomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClassroomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClassroomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClassroomRequestValidationError) ErrorName() string {
	return "DeleteClassroomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClassroomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClassroomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClassroomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClassroomRequestValidationError{}

// Validate checks the field values on DeleteClassroomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteClassroomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteClassroomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteClassroomResponseMultiError, or nil if none found.
func (m *DeleteClassroomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteClassroomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := DeleteClassroomResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteClassroomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteClassroomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteClassroomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteClassroomResponseMultiError(errors)
	}

	return nil
}

// DeleteClassroomResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteClassroomResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteClassroomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteClassroomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteClassroomResponseMultiError) AllErrors() []error { return m }

// DeleteClassroomResponseValidationError is the validation error returned by
// DeleteClassroomResponse.Validate if the designated constraints aren't met.
type DeleteClassroomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClassroomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClassroomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClassroomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClassroomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClassroomResponseValidationError) ErrorName() string {
	return "DeleteClassroomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClassroomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClassroomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClassroomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClassroomResponseValidationError{}

// Validate checks the field values on GetClassroomsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClassroomsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClassroomsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClassroomsRequestMultiError, or nil if none found.
func (m *GetClassroomsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClassroomsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for TitleSearch

	// no validation rules for SortColumn

	// no validation rules for IsDesc

	if len(errors) > 0 {
		return GetClassroomsRequestMultiError(errors)
	}

	return nil
}

// GetClassroomsRequestMultiError is an error wrapping multiple validation
// errors returned by GetClassroomsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetClassroomsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClassroomsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClassroomsRequestMultiError) AllErrors() []error { return m }

// GetClassroomsRequestValidationError is the validation error returned by
// GetClassroomsRequest.Validate if the designated constraints aren't met.
type GetClassroomsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClassroomsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClassroomsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClassroomsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClassroomsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClassroomsRequestValidationError) ErrorName() string {
	return "GetClassroomsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClassroomsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClassroomsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClassroomsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClassroomsRequestValidationError{}

// Validate checks the field values on GetClassroomsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClassroomsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClassroomsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClassroomsResponseMultiError, or nil if none found.
func (m *GetClassroomsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClassroomsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetClassroomsResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClassroomsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClassroomsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClassroomsResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTotalCount() < 0 {
		err := GetClassroomsResponseValidationError{
			field:  "TotalCount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetClassrooms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetClassroomsResponseValidationError{
						field:  fmt.Sprintf("Classrooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetClassroomsResponseValidationError{
						field:  fmt.Sprintf("Classrooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetClassroomsResponseValidationError{
					field:  fmt.Sprintf("Classrooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetClassroomsResponseMultiError(errors)
	}

	return nil
}

// GetClassroomsResponseMultiError is an error wrapping multiple validation
// errors returned by GetClassroomsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetClassroomsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClassroomsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClassroomsResponseMultiError) AllErrors() []error { return m }

// GetClassroomsResponseValidationError is the validation error returned by
// GetClassroomsResponse.Validate if the designated constraints aren't met.
type GetClassroomsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClassroomsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClassroomsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClassroomsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClassroomsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClassroomsResponseValidationError) ErrorName() string {
	return "GetClassroomsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClassroomsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClassroomsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClassroomsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClassroomsResponseValidationError{}
