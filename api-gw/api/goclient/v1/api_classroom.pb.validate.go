// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api_classroom.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ClassroomInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClassroomInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClassroomInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClassroomInputMultiError,
// or nil if none found.
func (m *ClassroomInput) ValidateAll() error {
	return m.validate(true)
}

func (m *ClassroomInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Status

	if len(errors) > 0 {
		return ClassroomInputMultiError(errors)
	}

	return nil
}

// ClassroomInputMultiError is an error wrapping multiple validation errors
// returned by ClassroomInput.ValidateAll() if the designated constraints
// aren't met.
type ClassroomInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClassroomInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClassroomInputMultiError) AllErrors() []error { return m }

// ClassroomInputValidationError is the validation error returned by
// ClassroomInput.Validate if the designated constraints aren't met.
type ClassroomInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClassroomInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClassroomInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClassroomInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClassroomInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClassroomInputValidationError) ErrorName() string { return "ClassroomInputValidationError" }

// Error satisfies the builtin error interface
func (e ClassroomInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClassroomInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClassroomInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClassroomInputValidationError{}

// Validate checks the field values on ClassroomResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClassroomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClassroomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClassroomResponseMultiError, or nil if none found.
func (m *ClassroomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClassroomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClassroomResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClassroomResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClassroomResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClassroomResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClassroomResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClassroomResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClassroomResponseMultiError(errors)
	}

	return nil
}

// ClassroomResponseMultiError is an error wrapping multiple validation errors
// returned by ClassroomResponse.ValidateAll() if the designated constraints
// aren't met.
type ClassroomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClassroomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClassroomResponseMultiError) AllErrors() []error { return m }

// ClassroomResponseValidationError is the validation error returned by
// ClassroomResponse.Validate if the designated constraints aren't met.
type ClassroomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClassroomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClassroomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClassroomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClassroomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClassroomResponseValidationError) ErrorName() string {
	return "ClassroomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClassroomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClassroomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClassroomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClassroomResponseValidationError{}

// Validate checks the field values on CreateClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateClassroomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateClassroomRequestMultiError, or nil if none found.
func (m *CreateClassroomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateClassroomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClassroom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateClassroomRequestValidationError{
					field:  "Classroom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateClassroomRequestValidationError{
					field:  "Classroom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClassroom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClassroomRequestValidationError{
				field:  "Classroom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateClassroomRequestMultiError(errors)
	}

	return nil
}

// CreateClassroomRequestMultiError is an error wrapping multiple validation
// errors returned by CreateClassroomRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateClassroomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClassroomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClassroomRequestMultiError) AllErrors() []error { return m }

// CreateClassroomRequestValidationError is the validation error returned by
// CreateClassroomRequest.Validate if the designated constraints aren't met.
type CreateClassroomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClassroomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClassroomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClassroomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClassroomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClassroomRequestValidationError) ErrorName() string {
	return "CreateClassroomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClassroomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClassroomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClassroomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClassroomRequestValidationError{}

// Validate checks the field values on CreateClassroomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateClassroomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateClassroomResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateClassroomResponseMultiError, or nil if none found.
func (m *CreateClassroomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateClassroomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateClassroomResponseMultiError(errors)
	}

	return nil
}

// CreateClassroomResponseMultiError is an error wrapping multiple validation
// errors returned by CreateClassroomResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateClassroomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClassroomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClassroomResponseMultiError) AllErrors() []error { return m }

// CreateClassroomResponseValidationError is the validation error returned by
// CreateClassroomResponse.Validate if the designated constraints aren't met.
type CreateClassroomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClassroomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClassroomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClassroomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClassroomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClassroomResponseValidationError) ErrorName() string {
	return "CreateClassroomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClassroomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClassroomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClassroomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClassroomResponseValidationError{}

// Validate checks the field values on GetClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClassroomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClassroomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClassroomRequestMultiError, or nil if none found.
func (m *GetClassroomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClassroomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetClassroomRequestMultiError(errors)
	}

	return nil
}

// GetClassroomRequestMultiError is an error wrapping multiple validation
// errors returned by GetClassroomRequest.ValidateAll() if the designated
// constraints aren't met.
type GetClassroomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClassroomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClassroomRequestMultiError) AllErrors() []error { return m }

// GetClassroomRequestValidationError is the validation error returned by
// GetClassroomRequest.Validate if the designated constraints aren't met.
type GetClassroomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClassroomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClassroomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClassroomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClassroomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClassroomRequestValidationError) ErrorName() string {
	return "GetClassroomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetClassroomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClassroomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClassroomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClassroomRequestValidationError{}

// Validate checks the field values on GetClassroomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetClassroomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClassroomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClassroomResponseMultiError, or nil if none found.
func (m *GetClassroomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClassroomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetClassroom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClassroomResponseValidationError{
					field:  "Classroom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClassroomResponseValidationError{
					field:  "Classroom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClassroom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClassroomResponseValidationError{
				field:  "Classroom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClassroomResponseMultiError(errors)
	}

	return nil
}

// GetClassroomResponseMultiError is an error wrapping multiple validation
// errors returned by GetClassroomResponse.ValidateAll() if the designated
// constraints aren't met.
type GetClassroomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClassroomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClassroomResponseMultiError) AllErrors() []error { return m }

// GetClassroomResponseValidationError is the validation error returned by
// GetClassroomResponse.Validate if the designated constraints aren't met.
type GetClassroomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClassroomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClassroomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClassroomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClassroomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClassroomResponseValidationError) ErrorName() string {
	return "GetClassroomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClassroomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClassroomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClassroomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClassroomResponseValidationError{}
