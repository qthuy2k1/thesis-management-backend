// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api_exercise.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonExerciseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonExerciseResponseMultiError, or nil if none found.
func (m *CommonExerciseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonExerciseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStatusCode() < 1 {
		err := CommonExerciseResponseValidationError{
			field:  "StatusCode",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) < 2 {
		err := CommonExerciseResponseValidationError{
			field:  "Message",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommonExerciseResponseMultiError(errors)
	}

	return nil
}

// CommonExerciseResponseMultiError is an error wrapping multiple validation
// errors returned by CommonExerciseResponse.ValidateAll() if the designated
// constraints aren't met.
type CommonExerciseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonExerciseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonExerciseResponseMultiError) AllErrors() []error { return m }

// CommonExerciseResponseValidationError is the validation error returned by
// CommonExerciseResponse.Validate if the designated constraints aren't met.
type CommonExerciseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonExerciseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonExerciseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonExerciseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonExerciseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonExerciseResponseValidationError) ErrorName() string {
	return "CommonExerciseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommonExerciseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonExerciseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonExerciseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonExerciseResponseValidationError{}

// Validate checks the field values on ExerciseInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExerciseInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExerciseInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExerciseInputMultiError, or
// nil if none found.
func (m *ExerciseInput) ValidateAll() error {
	return m.validate(true)
}

func (m *ExerciseInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 2 || l > 200 {
		err := ExerciseInputValidationError{
			field:  "Title",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContent()); l < 2 || l > 200 {
		err := ExerciseInputValidationError{
			field:  "Content",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassroomID() < 1 {
		err := ExerciseInputValidationError{
			field:  "ClassroomID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeadline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseInputValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseInputValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeadline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseInputValidationError{
				field:  "Deadline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetScore() < 0 {
		err := ExerciseInputValidationError{
			field:  "Score",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReportingStageID() < 1 {
		err := ExerciseInputValidationError{
			field:  "ReportingStageID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAuthorID() < 1 {
		err := ExerciseInputValidationError{
			field:  "AuthorID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExerciseInputMultiError(errors)
	}

	return nil
}

// ExerciseInputMultiError is an error wrapping multiple validation errors
// returned by ExerciseInput.ValidateAll() if the designated constraints
// aren't met.
type ExerciseInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseInputMultiError) AllErrors() []error { return m }

// ExerciseInputValidationError is the validation error returned by
// ExerciseInput.Validate if the designated constraints aren't met.
type ExerciseInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseInputValidationError) ErrorName() string { return "ExerciseInputValidationError" }

// Error satisfies the builtin error interface
func (e ExerciseInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExerciseInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseInputValidationError{}

// Validate checks the field values on ExerciseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExerciseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExerciseResponseMultiError, or nil if none found.
func (m *ExerciseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ExerciseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := ExerciseResponseValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 2 || l > 200 {
		err := ExerciseResponseValidationError{
			field:  "Title",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetContent()) < 2 {
		err := ExerciseResponseValidationError{
			field:  "Content",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetClassroomID() < 1 {
		err := ExerciseResponseValidationError{
			field:  "ClassroomID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDeadline()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExerciseResponseValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExerciseResponseValidationError{
					field:  "Deadline",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeadline()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExerciseResponseValidationError{
				field:  "Deadline",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetScore() < 0 {
		err := ExerciseResponseValidationError{
			field:  "Score",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReportingStageID() < 1 {
		err := ExerciseResponseValidationError{
			field:  "ReportingStageID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAuthorID() < 1 {
		err := ExerciseResponseValidationError{
			field:  "AuthorID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCreatedAt() == nil {
		err := ExerciseResponseValidationError{
			field:  "CreatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() == nil {
		err := ExerciseResponseValidationError{
			field:  "UpdatedAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExerciseResponseMultiError(errors)
	}

	return nil
}

// ExerciseResponseMultiError is an error wrapping multiple validation errors
// returned by ExerciseResponse.ValidateAll() if the designated constraints
// aren't met.
type ExerciseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExerciseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExerciseResponseMultiError) AllErrors() []error { return m }

// ExerciseResponseValidationError is the validation error returned by
// ExerciseResponse.Validate if the designated constraints aren't met.
type ExerciseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExerciseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExerciseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExerciseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExerciseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExerciseResponseValidationError) ErrorName() string { return "ExerciseResponseValidationError" }

// Error satisfies the builtin error interface
func (e ExerciseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExerciseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExerciseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExerciseResponseValidationError{}

// Validate checks the field values on CreateExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateExerciseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExerciseRequestMultiError, or nil if none found.
func (m *CreateExerciseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExerciseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetExercise() == nil {
		err := CreateExerciseRequestValidationError{
			field:  "Exercise",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExercise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateExerciseRequestValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateExerciseRequestValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExercise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateExerciseRequestValidationError{
				field:  "Exercise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateExerciseRequestMultiError(errors)
	}

	return nil
}

// CreateExerciseRequestMultiError is an error wrapping multiple validation
// errors returned by CreateExerciseRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateExerciseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExerciseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExerciseRequestMultiError) AllErrors() []error { return m }

// CreateExerciseRequestValidationError is the validation error returned by
// CreateExerciseRequest.Validate if the designated constraints aren't met.
type CreateExerciseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExerciseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExerciseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExerciseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExerciseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExerciseRequestValidationError) ErrorName() string {
	return "CreateExerciseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExerciseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExerciseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExerciseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExerciseRequestValidationError{}

// Validate checks the field values on CreateExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateExerciseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateExerciseResponseMultiError, or nil if none found.
func (m *CreateExerciseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateExerciseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := CreateExerciseResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateExerciseResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateExerciseResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateExerciseResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateExerciseResponseMultiError(errors)
	}

	return nil
}

// CreateExerciseResponseMultiError is an error wrapping multiple validation
// errors returned by CreateExerciseResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateExerciseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateExerciseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateExerciseResponseMultiError) AllErrors() []error { return m }

// CreateExerciseResponseValidationError is the validation error returned by
// CreateExerciseResponse.Validate if the designated constraints aren't met.
type CreateExerciseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateExerciseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateExerciseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateExerciseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateExerciseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateExerciseResponseValidationError) ErrorName() string {
	return "CreateExerciseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateExerciseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateExerciseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateExerciseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateExerciseResponseValidationError{}

// Validate checks the field values on GetExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExerciseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExerciseRequestMultiError, or nil if none found.
func (m *GetExerciseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExerciseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetExerciseRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetExerciseRequestMultiError(errors)
	}

	return nil
}

// GetExerciseRequestMultiError is an error wrapping multiple validation errors
// returned by GetExerciseRequest.ValidateAll() if the designated constraints
// aren't met.
type GetExerciseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExerciseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExerciseRequestMultiError) AllErrors() []error { return m }

// GetExerciseRequestValidationError is the validation error returned by
// GetExerciseRequest.Validate if the designated constraints aren't met.
type GetExerciseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExerciseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExerciseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExerciseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExerciseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExerciseRequestValidationError) ErrorName() string {
	return "GetExerciseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExerciseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExerciseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExerciseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExerciseRequestValidationError{}

// Validate checks the field values on GetExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExerciseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExerciseResponseMultiError, or nil if none found.
func (m *GetExerciseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExerciseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetExerciseResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetExerciseResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetExerciseResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetExerciseResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetExercise() == nil {
		err := GetExerciseResponseValidationError{
			field:  "Exercise",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExercise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetExerciseResponseValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetExerciseResponseValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExercise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetExerciseResponseValidationError{
				field:  "Exercise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetExerciseResponseMultiError(errors)
	}

	return nil
}

// GetExerciseResponseMultiError is an error wrapping multiple validation
// errors returned by GetExerciseResponse.ValidateAll() if the designated
// constraints aren't met.
type GetExerciseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExerciseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExerciseResponseMultiError) AllErrors() []error { return m }

// GetExerciseResponseValidationError is the validation error returned by
// GetExerciseResponse.Validate if the designated constraints aren't met.
type GetExerciseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExerciseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExerciseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExerciseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExerciseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExerciseResponseValidationError) ErrorName() string {
	return "GetExerciseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExerciseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExerciseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExerciseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExerciseResponseValidationError{}

// Validate checks the field values on UpdateExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateExerciseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateExerciseRequestMultiError, or nil if none found.
func (m *UpdateExerciseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExerciseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateExerciseRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExercise() == nil {
		err := UpdateExerciseRequestValidationError{
			field:  "Exercise",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetExercise()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExerciseRequestValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExerciseRequestValidationError{
					field:  "Exercise",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExercise()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExerciseRequestValidationError{
				field:  "Exercise",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateExerciseRequestMultiError(errors)
	}

	return nil
}

// UpdateExerciseRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateExerciseRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateExerciseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExerciseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExerciseRequestMultiError) AllErrors() []error { return m }

// UpdateExerciseRequestValidationError is the validation error returned by
// UpdateExerciseRequest.Validate if the designated constraints aren't met.
type UpdateExerciseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExerciseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExerciseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExerciseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExerciseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExerciseRequestValidationError) ErrorName() string {
	return "UpdateExerciseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExerciseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExerciseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExerciseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExerciseRequestValidationError{}

// Validate checks the field values on UpdateExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateExerciseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateExerciseResponseMultiError, or nil if none found.
func (m *UpdateExerciseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateExerciseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := UpdateExerciseResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateExerciseResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateExerciseResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateExerciseResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateExerciseResponseMultiError(errors)
	}

	return nil
}

// UpdateExerciseResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateExerciseResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateExerciseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateExerciseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateExerciseResponseMultiError) AllErrors() []error { return m }

// UpdateExerciseResponseValidationError is the validation error returned by
// UpdateExerciseResponse.Validate if the designated constraints aren't met.
type UpdateExerciseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateExerciseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateExerciseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateExerciseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateExerciseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateExerciseResponseValidationError) ErrorName() string {
	return "UpdateExerciseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateExerciseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateExerciseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateExerciseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateExerciseResponseValidationError{}

// Validate checks the field values on DeleteExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteExerciseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteExerciseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteExerciseRequestMultiError, or nil if none found.
func (m *DeleteExerciseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteExerciseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteExerciseRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteExerciseRequestMultiError(errors)
	}

	return nil
}

// DeleteExerciseRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteExerciseRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteExerciseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteExerciseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteExerciseRequestMultiError) AllErrors() []error { return m }

// DeleteExerciseRequestValidationError is the validation error returned by
// DeleteExerciseRequest.Validate if the designated constraints aren't met.
type DeleteExerciseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteExerciseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteExerciseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteExerciseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteExerciseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteExerciseRequestValidationError) ErrorName() string {
	return "DeleteExerciseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteExerciseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteExerciseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteExerciseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteExerciseRequestValidationError{}

// Validate checks the field values on DeleteExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteExerciseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteExerciseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteExerciseResponseMultiError, or nil if none found.
func (m *DeleteExerciseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteExerciseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := DeleteExerciseResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteExerciseResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteExerciseResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteExerciseResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteExerciseResponseMultiError(errors)
	}

	return nil
}

// DeleteExerciseResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteExerciseResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteExerciseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteExerciseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteExerciseResponseMultiError) AllErrors() []error { return m }

// DeleteExerciseResponseValidationError is the validation error returned by
// DeleteExerciseResponse.Validate if the designated constraints aren't met.
type DeleteExerciseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteExerciseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteExerciseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteExerciseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteExerciseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteExerciseResponseValidationError) ErrorName() string {
	return "DeleteExerciseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteExerciseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteExerciseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteExerciseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteExerciseResponseValidationError{}

// Validate checks the field values on GetExercisesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExercisesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExercisesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExercisesRequestMultiError, or nil if none found.
func (m *GetExercisesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExercisesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for TitleSearch

	// no validation rules for SortColumn

	// no validation rules for IsDesc

	if len(errors) > 0 {
		return GetExercisesRequestMultiError(errors)
	}

	return nil
}

// GetExercisesRequestMultiError is an error wrapping multiple validation
// errors returned by GetExercisesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetExercisesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExercisesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExercisesRequestMultiError) AllErrors() []error { return m }

// GetExercisesRequestValidationError is the validation error returned by
// GetExercisesRequest.Validate if the designated constraints aren't met.
type GetExercisesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExercisesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExercisesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExercisesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExercisesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExercisesRequestValidationError) ErrorName() string {
	return "GetExercisesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetExercisesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExercisesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExercisesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExercisesRequestValidationError{}

// Validate checks the field values on GetExercisesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetExercisesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetExercisesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetExercisesResponseMultiError, or nil if none found.
func (m *GetExercisesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetExercisesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetExercisesResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetExercisesResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetExercisesResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetExercisesResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTotalCount() < 0 {
		err := GetExercisesResponseValidationError{
			field:  "TotalCount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetExercises() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetExercisesResponseValidationError{
						field:  fmt.Sprintf("Exercises[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetExercisesResponseValidationError{
						field:  fmt.Sprintf("Exercises[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetExercisesResponseValidationError{
					field:  fmt.Sprintf("Exercises[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetExercisesResponseMultiError(errors)
	}

	return nil
}

// GetExercisesResponseMultiError is an error wrapping multiple validation
// errors returned by GetExercisesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetExercisesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetExercisesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetExercisesResponseMultiError) AllErrors() []error { return m }

// GetExercisesResponseValidationError is the validation error returned by
// GetExercisesResponse.Validate if the designated constraints aren't met.
type GetExercisesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExercisesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExercisesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExercisesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExercisesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExercisesResponseValidationError) ErrorName() string {
	return "GetExercisesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetExercisesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExercisesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExercisesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExercisesResponseValidationError{}

// Validate checks the field values on GetAllExercisesOfClassroomRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetAllExercisesOfClassroomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllExercisesOfClassroomRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetAllExercisesOfClassroomRequestMultiError, or nil if none found.
func (m *GetAllExercisesOfClassroomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllExercisesOfClassroomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for TitleSearch

	// no validation rules for SortColumn

	// no validation rules for IsDesc

	if m.GetClassroomID() < 1 {
		err := GetAllExercisesOfClassroomRequestValidationError{
			field:  "ClassroomID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAllExercisesOfClassroomRequestMultiError(errors)
	}

	return nil
}

// GetAllExercisesOfClassroomRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetAllExercisesOfClassroomRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllExercisesOfClassroomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllExercisesOfClassroomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllExercisesOfClassroomRequestMultiError) AllErrors() []error { return m }

// GetAllExercisesOfClassroomRequestValidationError is the validation error
// returned by GetAllExercisesOfClassroomRequest.Validate if the designated
// constraints aren't met.
type GetAllExercisesOfClassroomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllExercisesOfClassroomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllExercisesOfClassroomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllExercisesOfClassroomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllExercisesOfClassroomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllExercisesOfClassroomRequestValidationError) ErrorName() string {
	return "GetAllExercisesOfClassroomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllExercisesOfClassroomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllExercisesOfClassroomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllExercisesOfClassroomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllExercisesOfClassroomRequestValidationError{}

// Validate checks the field values on GetAllExercisesOfClassroomResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetAllExercisesOfClassroomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllExercisesOfClassroomResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetAllExercisesOfClassroomResponseMultiError, or nil if none found.
func (m *GetAllExercisesOfClassroomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllExercisesOfClassroomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetAllExercisesOfClassroomResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAllExercisesOfClassroomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAllExercisesOfClassroomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllExercisesOfClassroomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTotalCount() < 0 {
		err := GetAllExercisesOfClassroomResponseValidationError{
			field:  "TotalCount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetExercises() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllExercisesOfClassroomResponseValidationError{
						field:  fmt.Sprintf("Exercises[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllExercisesOfClassroomResponseValidationError{
						field:  fmt.Sprintf("Exercises[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllExercisesOfClassroomResponseValidationError{
					field:  fmt.Sprintf("Exercises[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllExercisesOfClassroomResponseMultiError(errors)
	}

	return nil
}

// GetAllExercisesOfClassroomResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetAllExercisesOfClassroomResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllExercisesOfClassroomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllExercisesOfClassroomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllExercisesOfClassroomResponseMultiError) AllErrors() []error { return m }

// GetAllExercisesOfClassroomResponseValidationError is the validation error
// returned by GetAllExercisesOfClassroomResponse.Validate if the designated
// constraints aren't met.
type GetAllExercisesOfClassroomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllExercisesOfClassroomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllExercisesOfClassroomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllExercisesOfClassroomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllExercisesOfClassroomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllExercisesOfClassroomResponseValidationError) ErrorName() string {
	return "GetAllExercisesOfClassroomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllExercisesOfClassroomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllExercisesOfClassroomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllExercisesOfClassroomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllExercisesOfClassroomResponseValidationError{}
