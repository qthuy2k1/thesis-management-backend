// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api_room.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonRoomResponseMultiError, or nil if none found.
func (m *CommonRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStatusCode() < 1 {
		err := CommonRoomResponseValidationError{
			field:  "StatusCode",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) < 2 {
		err := CommonRoomResponseValidationError{
			field:  "Message",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommonRoomResponseMultiError(errors)
	}

	return nil
}

// CommonRoomResponseMultiError is an error wrapping multiple validation errors
// returned by CommonRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type CommonRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonRoomResponseMultiError) AllErrors() []error { return m }

// CommonRoomResponseValidationError is the validation error returned by
// CommonRoomResponse.Validate if the designated constraints aren't met.
type CommonRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonRoomResponseValidationError) ErrorName() string {
	return "CommonRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommonRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonRoomResponseValidationError{}

// Validate checks the field values on RoomInput with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomInput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomInputMultiError, or nil
// if none found.
func (m *RoomInput) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for School

	// no validation rules for Description

	if len(errors) > 0 {
		return RoomInputMultiError(errors)
	}

	return nil
}

// RoomInputMultiError is an error wrapping multiple validation errors returned
// by RoomInput.ValidateAll() if the designated constraints aren't met.
type RoomInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomInputMultiError) AllErrors() []error { return m }

// RoomInputValidationError is the validation error returned by
// RoomInput.Validate if the designated constraints aren't met.
type RoomInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomInputValidationError) ErrorName() string { return "RoomInputValidationError" }

// Error satisfies the builtin error interface
func (e RoomInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomInputValidationError{}

// Validate checks the field values on RoomResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoomResponseMultiError, or
// nil if none found.
func (m *RoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for School

	// no validation rules for Description

	if len(errors) > 0 {
		return RoomResponseMultiError(errors)
	}

	return nil
}

// RoomResponseMultiError is an error wrapping multiple validation errors
// returned by RoomResponse.ValidateAll() if the designated constraints aren't met.
type RoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomResponseMultiError) AllErrors() []error { return m }

// RoomResponseValidationError is the validation error returned by
// RoomResponse.Validate if the designated constraints aren't met.
type RoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomResponseValidationError) ErrorName() string { return "RoomResponseValidationError" }

// Error satisfies the builtin error interface
func (e RoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomResponseValidationError{}

// Validate checks the field values on CreateRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomRequestMultiError, or nil if none found.
func (m *CreateRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRoom() == nil {
		err := CreateRoomRequestValidationError{
			field:  "Room",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoomRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoomRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoomRequestValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoomRequestMultiError(errors)
	}

	return nil
}

// CreateRoomRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomRequestMultiError) AllErrors() []error { return m }

// CreateRoomRequestValidationError is the validation error returned by
// CreateRoomRequest.Validate if the designated constraints aren't met.
type CreateRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomRequestValidationError) ErrorName() string {
	return "CreateRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomRequestValidationError{}

// Validate checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoomResponseMultiError, or nil if none found.
func (m *CreateRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := CreateRoomResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoomResponseMultiError(errors)
	}

	return nil
}

// CreateRoomResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoomResponseMultiError) AllErrors() []error { return m }

// CreateRoomResponseValidationError is the validation error returned by
// CreateRoomResponse.Validate if the designated constraints aren't met.
type CreateRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoomResponseValidationError) ErrorName() string {
	return "CreateRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoomResponseValidationError{}

// Validate checks the field values on GetRoomRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoomRequestMultiError,
// or nil if none found.
func (m *GetRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetRoomRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetRoomRequestMultiError(errors)
	}

	return nil
}

// GetRoomRequestMultiError is an error wrapping multiple validation errors
// returned by GetRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomRequestMultiError) AllErrors() []error { return m }

// GetRoomRequestValidationError is the validation error returned by
// GetRoomRequest.Validate if the designated constraints aren't met.
type GetRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomRequestValidationError) ErrorName() string { return "GetRoomRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomRequestValidationError{}

// Validate checks the field values on GetRoomResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomResponseMultiError, or nil if none found.
func (m *GetRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetRoomResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetRoom() == nil {
		err := GetRoomResponseValidationError{
			field:  "Room",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoomResponseValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoomResponseValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRoomResponseMultiError(errors)
	}

	return nil
}

// GetRoomResponseMultiError is an error wrapping multiple validation errors
// returned by GetRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomResponseMultiError) AllErrors() []error { return m }

// GetRoomResponseValidationError is the validation error returned by
// GetRoomResponse.Validate if the designated constraints aren't met.
type GetRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomResponseValidationError) ErrorName() string { return "GetRoomResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomResponseValidationError{}

// Validate checks the field values on UpdateRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoomRequestMultiError, or nil if none found.
func (m *UpdateRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateRoomRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetRoom() == nil {
		err := UpdateRoomRequestValidationError{
			field:  "Room",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoomRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoomRequestValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoomRequestValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoomRequestMultiError(errors)
	}

	return nil
}

// UpdateRoomRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoomRequestMultiError) AllErrors() []error { return m }

// UpdateRoomRequestValidationError is the validation error returned by
// UpdateRoomRequest.Validate if the designated constraints aren't met.
type UpdateRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoomRequestValidationError) ErrorName() string {
	return "UpdateRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoomRequestValidationError{}

// Validate checks the field values on UpdateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRoomResponseMultiError, or nil if none found.
func (m *UpdateRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := UpdateRoomResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRoomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRoomResponseMultiError(errors)
	}

	return nil
}

// UpdateRoomResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoomResponseMultiError) AllErrors() []error { return m }

// UpdateRoomResponseValidationError is the validation error returned by
// UpdateRoomResponse.Validate if the designated constraints aren't met.
type UpdateRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoomResponseValidationError) ErrorName() string {
	return "UpdateRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoomResponseValidationError{}

// Validate checks the field values on DeleteRoomRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoomRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoomRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoomRequestMultiError, or nil if none found.
func (m *DeleteRoomRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoomRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteRoomRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteRoomRequestMultiError(errors)
	}

	return nil
}

// DeleteRoomRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoomRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoomRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoomRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoomRequestMultiError) AllErrors() []error { return m }

// DeleteRoomRequestValidationError is the validation error returned by
// DeleteRoomRequest.Validate if the designated constraints aren't met.
type DeleteRoomRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoomRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoomRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoomRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoomRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoomRequestValidationError) ErrorName() string {
	return "DeleteRoomRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoomRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoomRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoomRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoomRequestValidationError{}

// Validate checks the field values on DeleteRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoomResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoomResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoomResponseMultiError, or nil if none found.
func (m *DeleteRoomResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoomResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := DeleteRoomResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteRoomResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteRoomResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteRoomResponseMultiError(errors)
	}

	return nil
}

// DeleteRoomResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoomResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoomResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoomResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoomResponseMultiError) AllErrors() []error { return m }

// DeleteRoomResponseValidationError is the validation error returned by
// DeleteRoomResponse.Validate if the designated constraints aren't met.
type DeleteRoomResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoomResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoomResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoomResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoomResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoomResponseValidationError) ErrorName() string {
	return "DeleteRoomResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoomResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoomResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoomResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoomResponseValidationError{}

// Validate checks the field values on GetRoomsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoomsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomsRequestMultiError, or nil if none found.
func (m *GetRoomsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.School != nil {
		// no validation rules for School
	}

	if len(errors) > 0 {
		return GetRoomsRequestMultiError(errors)
	}

	return nil
}

// GetRoomsRequestMultiError is an error wrapping multiple validation errors
// returned by GetRoomsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRoomsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomsRequestMultiError) AllErrors() []error { return m }

// GetRoomsRequestValidationError is the validation error returned by
// GetRoomsRequest.Validate if the designated constraints aren't met.
type GetRoomsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomsRequestValidationError) ErrorName() string { return "GetRoomsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRoomsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomsRequestValidationError{}

// Validate checks the field values on GetRoomsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoomsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoomsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoomsResponseMultiError, or nil if none found.
func (m *GetRoomsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoomsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetRoomsResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoomsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoomsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoomsResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTotalCount() < 0 {
		err := GetRoomsResponseValidationError{
			field:  "TotalCount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRooms() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRoomsResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRoomsResponseValidationError{
						field:  fmt.Sprintf("Rooms[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRoomsResponseValidationError{
					field:  fmt.Sprintf("Rooms[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRoomsResponseMultiError(errors)
	}

	return nil
}

// GetRoomsResponseMultiError is an error wrapping multiple validation errors
// returned by GetRoomsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRoomsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoomsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoomsResponseMultiError) AllErrors() []error { return m }

// GetRoomsResponseValidationError is the validation error returned by
// GetRoomsResponse.Validate if the designated constraints aren't met.
type GetRoomsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoomsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoomsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoomsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoomsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoomsResponseValidationError) ErrorName() string { return "GetRoomsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRoomsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoomsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoomsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoomsResponseValidationError{}
