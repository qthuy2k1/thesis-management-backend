// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api_user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_CreateUser_FullMethodName                   = "/api.user.v1.UserService/CreateUser"
	UserService_GetUser_FullMethodName                      = "/api.user.v1.UserService/GetUser"
	UserService_UpdateUser_FullMethodName                   = "/api.user.v1.UserService/UpdateUser"
	UserService_DeleteUser_FullMethodName                   = "/api.user.v1.UserService/DeleteUser"
	UserService_GetUsers_FullMethodName                     = "/api.user.v1.UserService/GetUsers"
	UserService_ApproveUserJoinClassroom_FullMethodName     = "/api.user.v1.UserService/ApproveUserJoinClassroom"
	UserService_CheckStatusUserJoinClassroom_FullMethodName = "/api.user.v1.UserService/CheckStatusUserJoinClassroom"
	UserService_UnsubscribeClassroom_FullMethodName         = "/api.user.v1.UserService/UnsubscribeClassroom"
	UserService_UpdateBasicUser_FullMethodName              = "/api.user.v1.UserService/UpdateBasicUser"
	UserService_GetAllLecturers_FullMethodName              = "/api.user.v1.UserService/GetAllLecturers"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	ApproveUserJoinClassroom(ctx context.Context, in *ApproveUserJoinClassroomRequest, opts ...grpc.CallOption) (*ApproveUserJoinClassroomResponse, error)
	CheckStatusUserJoinClassroom(ctx context.Context, in *CheckStatusUserJoinClassroomRequest, opts ...grpc.CallOption) (*CheckStatusUserJoinClassroomResponse, error)
	UnsubscribeClassroom(ctx context.Context, in *UnsubscribeClassroomRequest, opts ...grpc.CallOption) (*UnsubscribeClassroomResponse, error)
	UpdateBasicUser(ctx context.Context, in *UpdateBasicUserRequest, opts ...grpc.CallOption) (*UpdateBasicUserResponse, error)
	GetAllLecturers(ctx context.Context, in *GetAllLecturerRequest, opts ...grpc.CallOption) (*GetAllLecturerResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, UserService_GetUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ApproveUserJoinClassroom(ctx context.Context, in *ApproveUserJoinClassroomRequest, opts ...grpc.CallOption) (*ApproveUserJoinClassroomResponse, error) {
	out := new(ApproveUserJoinClassroomResponse)
	err := c.cc.Invoke(ctx, UserService_ApproveUserJoinClassroom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckStatusUserJoinClassroom(ctx context.Context, in *CheckStatusUserJoinClassroomRequest, opts ...grpc.CallOption) (*CheckStatusUserJoinClassroomResponse, error) {
	out := new(CheckStatusUserJoinClassroomResponse)
	err := c.cc.Invoke(ctx, UserService_CheckStatusUserJoinClassroom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnsubscribeClassroom(ctx context.Context, in *UnsubscribeClassroomRequest, opts ...grpc.CallOption) (*UnsubscribeClassroomResponse, error) {
	out := new(UnsubscribeClassroomResponse)
	err := c.cc.Invoke(ctx, UserService_UnsubscribeClassroom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateBasicUser(ctx context.Context, in *UpdateBasicUserRequest, opts ...grpc.CallOption) (*UpdateBasicUserResponse, error) {
	out := new(UpdateBasicUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateBasicUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAllLecturers(ctx context.Context, in *GetAllLecturerRequest, opts ...grpc.CallOption) (*GetAllLecturerResponse, error) {
	out := new(GetAllLecturerResponse)
	err := c.cc.Invoke(ctx, UserService_GetAllLecturers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	ApproveUserJoinClassroom(context.Context, *ApproveUserJoinClassroomRequest) (*ApproveUserJoinClassroomResponse, error)
	CheckStatusUserJoinClassroom(context.Context, *CheckStatusUserJoinClassroomRequest) (*CheckStatusUserJoinClassroomResponse, error)
	UnsubscribeClassroom(context.Context, *UnsubscribeClassroomRequest) (*UnsubscribeClassroomResponse, error)
	UpdateBasicUser(context.Context, *UpdateBasicUserRequest) (*UpdateBasicUserResponse, error)
	GetAllLecturers(context.Context, *GetAllLecturerRequest) (*GetAllLecturerResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServiceServer) ApproveUserJoinClassroom(context.Context, *ApproveUserJoinClassroomRequest) (*ApproveUserJoinClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveUserJoinClassroom not implemented")
}
func (UnimplementedUserServiceServer) CheckStatusUserJoinClassroom(context.Context, *CheckStatusUserJoinClassroomRequest) (*CheckStatusUserJoinClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatusUserJoinClassroom not implemented")
}
func (UnimplementedUserServiceServer) UnsubscribeClassroom(context.Context, *UnsubscribeClassroomRequest) (*UnsubscribeClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeClassroom not implemented")
}
func (UnimplementedUserServiceServer) UpdateBasicUser(context.Context, *UpdateBasicUserRequest) (*UpdateBasicUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasicUser not implemented")
}
func (UnimplementedUserServiceServer) GetAllLecturers(context.Context, *GetAllLecturerRequest) (*GetAllLecturerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLecturers not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ApproveUserJoinClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveUserJoinClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ApproveUserJoinClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ApproveUserJoinClassroom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ApproveUserJoinClassroom(ctx, req.(*ApproveUserJoinClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckStatusUserJoinClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStatusUserJoinClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckStatusUserJoinClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckStatusUserJoinClassroom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckStatusUserJoinClassroom(ctx, req.(*CheckStatusUserJoinClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnsubscribeClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnsubscribeClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnsubscribeClassroom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnsubscribeClassroom(ctx, req.(*UnsubscribeClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateBasicUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasicUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateBasicUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateBasicUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateBasicUser(ctx, req.(*UpdateBasicUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAllLecturers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLecturerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAllLecturers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAllLecturers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAllLecturers(ctx, req.(*GetAllLecturerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "ApproveUserJoinClassroom",
			Handler:    _UserService_ApproveUserJoinClassroom_Handler,
		},
		{
			MethodName: "CheckStatusUserJoinClassroom",
			Handler:    _UserService_CheckStatusUserJoinClassroom_Handler,
		},
		{
			MethodName: "UnsubscribeClassroom",
			Handler:    _UserService_UnsubscribeClassroom_Handler,
		},
		{
			MethodName: "UpdateBasicUser",
			Handler:    _UserService_UpdateBasicUser_Handler,
		},
		{
			MethodName: "GetAllLecturers",
			Handler:    _UserService_GetAllLecturers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_user.proto",
}
