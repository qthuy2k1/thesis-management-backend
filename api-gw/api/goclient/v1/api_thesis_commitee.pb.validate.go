// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api_thesis_commitee.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonCommiteeResponseMultiError, or nil if none found.
func (m *CommonCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStatusCode() < 1 {
		err := CommonCommiteeResponseValidationError{
			field:  "StatusCode",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMessage()) < 2 {
		err := CommonCommiteeResponseValidationError{
			field:  "Message",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommonCommiteeResponseMultiError(errors)
	}

	return nil
}

// CommonCommiteeResponseMultiError is an error wrapping multiple validation
// errors returned by CommonCommiteeResponse.ValidateAll() if the designated
// constraints aren't met.
type CommonCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonCommiteeResponseMultiError) AllErrors() []error { return m }

// CommonCommiteeResponseValidationError is the validation error returned by
// CommonCommiteeResponse.Validate if the designated constraints aren't met.
type CommonCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonCommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonCommiteeResponseValidationError) ErrorName() string {
	return "CommonCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommonCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonCommiteeResponseValidationError{}

// Validate checks the field values on CommiteeInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommiteeInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommiteeInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommiteeInputMultiError, or
// nil if none found.
func (m *CommiteeInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CommiteeInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommiteeInputValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommiteeInputValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommiteeInputValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetShift()) < 2 {
		err := CommiteeInputValidationError{
			field:  "Shift",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Time

	if len(errors) > 0 {
		return CommiteeInputMultiError(errors)
	}

	return nil
}

// CommiteeInputMultiError is an error wrapping multiple validation errors
// returned by CommiteeInput.ValidateAll() if the designated constraints
// aren't met.
type CommiteeInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommiteeInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommiteeInputMultiError) AllErrors() []error { return m }

// CommiteeInputValidationError is the validation error returned by
// CommiteeInput.Validate if the designated constraints aren't met.
type CommiteeInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommiteeInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommiteeInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommiteeInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommiteeInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommiteeInputValidationError) ErrorName() string { return "CommiteeInputValidationError" }

// Error satisfies the builtin error interface
func (e CommiteeInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommiteeInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommiteeInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommiteeInputValidationError{}

// Validate checks the field values on CommiteeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommiteeResponseMultiError, or nil if none found.
func (m *CommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := CommiteeResponseValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommiteeResponseValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommiteeResponseValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommiteeResponseValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetShift()) < 2 {
		err := CommiteeResponseValidationError{
			field:  "Shift",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoomID

	for idx, item := range m.GetLecturers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommiteeResponseValidationError{
						field:  fmt.Sprintf("Lecturers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommiteeResponseValidationError{
						field:  fmt.Sprintf("Lecturers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommiteeResponseValidationError{
					field:  fmt.Sprintf("Lecturers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStudent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CommiteeResponseValidationError{
						field:  fmt.Sprintf("Student[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CommiteeResponseValidationError{
						field:  fmt.Sprintf("Student[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CommiteeResponseValidationError{
					field:  fmt.Sprintf("Student[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CommiteeResponseMultiError(errors)
	}

	return nil
}

// CommiteeResponseMultiError is an error wrapping multiple validation errors
// returned by CommiteeResponse.ValidateAll() if the designated constraints
// aren't met.
type CommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommiteeResponseMultiError) AllErrors() []error { return m }

// CommiteeResponseValidationError is the validation error returned by
// CommiteeResponse.Validate if the designated constraints aren't met.
type CommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommiteeResponseValidationError) ErrorName() string { return "CommiteeResponseValidationError" }

// Error satisfies the builtin error interface
func (e CommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommiteeResponseValidationError{}

// Validate checks the field values on UserCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserCommiteeResponseMultiError, or nil if none found.
func (m *UserCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetClass()); l < 4 || l > 10 {
		err := UserCommiteeResponseValidationError{
			field:  "Class",
			reason: "value length must be between 4 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PhotoSrc

	if _, ok := _UserCommiteeResponse_Role_InLookup[m.GetRole()]; !ok {
		err := UserCommiteeResponseValidationError{
			field:  "Role",
			reason: "value must be in list [teacher student admin]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 200 {
		err := UserCommiteeResponseValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UserCommiteeResponseValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Major != nil {

		if utf8.RuneCountInString(m.GetMajor()) < 2 {
			err := UserCommiteeResponseValidationError{
				field:  "Major",
				reason: "value length must be at least 2 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Phone != nil {

		if l := utf8.RuneCountInString(m.GetPhone()); l < 10 || l > 11 {
			err := UserCommiteeResponseValidationError{
				field:  "Phone",
				reason: "value length must be between 10 and 11 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UserCommiteeResponseMultiError(errors)
	}

	return nil
}

func (m *UserCommiteeResponse) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserCommiteeResponse) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserCommiteeResponseMultiError is an error wrapping multiple validation
// errors returned by UserCommiteeResponse.ValidateAll() if the designated
// constraints aren't met.
type UserCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserCommiteeResponseMultiError) AllErrors() []error { return m }

// UserCommiteeResponseValidationError is the validation error returned by
// UserCommiteeResponse.Validate if the designated constraints aren't met.
type UserCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserCommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserCommiteeResponseValidationError) ErrorName() string {
	return "UserCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserCommiteeResponseValidationError{}

var _UserCommiteeResponse_Role_InLookup = map[string]struct{}{
	"teacher": {},
	"student": {},
	"admin":   {},
}

// Validate checks the field values on CreateCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommiteeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommiteeRequestMultiError, or nil if none found.
func (m *CreateCommiteeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommiteeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommitee() == nil {
		err := CreateCommiteeRequestValidationError{
			field:  "Commitee",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommitee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommiteeRequestValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommiteeRequestValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommitee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommiteeRequestValidationError{
				field:  "Commitee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommiteeRequestMultiError(errors)
	}

	return nil
}

// CreateCommiteeRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommiteeRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommiteeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommiteeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommiteeRequestMultiError) AllErrors() []error { return m }

// CreateCommiteeRequestValidationError is the validation error returned by
// CreateCommiteeRequest.Validate if the designated constraints aren't met.
type CreateCommiteeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommiteeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommiteeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommiteeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommiteeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommiteeRequestValidationError) ErrorName() string {
	return "CreateCommiteeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommiteeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommiteeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommiteeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommiteeRequestValidationError{}

// Validate checks the field values on CreateCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommiteeResponseMultiError, or nil if none found.
func (m *CreateCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := CreateCommiteeResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommiteeResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommiteeResponseMultiError(errors)
	}

	return nil
}

// CreateCommiteeResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCommiteeResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommiteeResponseMultiError) AllErrors() []error { return m }

// CreateCommiteeResponseValidationError is the validation error returned by
// CreateCommiteeResponse.Validate if the designated constraints aren't met.
type CreateCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommiteeResponseValidationError) ErrorName() string {
	return "CreateCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommiteeResponseValidationError{}

// Validate checks the field values on GetCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommiteeRequestMultiError, or nil if none found.
func (m *GetCommiteeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetCommiteeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCommiteeRequestMultiError(errors)
	}

	return nil
}

// GetCommiteeRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommiteeRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommiteeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteeRequestMultiError) AllErrors() []error { return m }

// GetCommiteeRequestValidationError is the validation error returned by
// GetCommiteeRequest.Validate if the designated constraints aren't met.
type GetCommiteeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteeRequestValidationError) ErrorName() string {
	return "GetCommiteeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteeRequestValidationError{}

// Validate checks the field values on GetCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommiteeResponseMultiError, or nil if none found.
func (m *GetCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetCommiteeResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommiteeResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCommitee() == nil {
		err := GetCommiteeResponseValidationError{
			field:  "Commitee",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommitee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommiteeResponseValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommiteeResponseValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommitee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommiteeResponseValidationError{
				field:  "Commitee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommiteeResponseMultiError(errors)
	}

	return nil
}

// GetCommiteeResponseMultiError is an error wrapping multiple validation
// errors returned by GetCommiteeResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteeResponseMultiError) AllErrors() []error { return m }

// GetCommiteeResponseValidationError is the validation error returned by
// GetCommiteeResponse.Validate if the designated constraints aren't met.
type GetCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteeResponseValidationError) ErrorName() string {
	return "GetCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteeResponseValidationError{}

// Validate checks the field values on UpdateCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommiteeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommiteeRequestMultiError, or nil if none found.
func (m *UpdateCommiteeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommiteeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateCommiteeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCommitee() == nil {
		err := UpdateCommiteeRequestValidationError{
			field:  "Commitee",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommitee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommiteeRequestValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommiteeRequestValidationError{
					field:  "Commitee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommitee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommiteeRequestValidationError{
				field:  "Commitee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCommiteeRequestMultiError(errors)
	}

	return nil
}

// UpdateCommiteeRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCommiteeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommiteeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommiteeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommiteeRequestMultiError) AllErrors() []error { return m }

// UpdateCommiteeRequestValidationError is the validation error returned by
// UpdateCommiteeRequest.Validate if the designated constraints aren't met.
type UpdateCommiteeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommiteeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommiteeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommiteeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommiteeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommiteeRequestValidationError) ErrorName() string {
	return "UpdateCommiteeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommiteeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommiteeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommiteeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommiteeRequestValidationError{}

// Validate checks the field values on UpdateCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCommiteeResponseMultiError, or nil if none found.
func (m *UpdateCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := UpdateCommiteeResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommiteeResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCommiteeResponseMultiError(errors)
	}

	return nil
}

// UpdateCommiteeResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCommiteeResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommiteeResponseMultiError) AllErrors() []error { return m }

// UpdateCommiteeResponseValidationError is the validation error returned by
// UpdateCommiteeResponse.Validate if the designated constraints aren't met.
type UpdateCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommiteeResponseValidationError) ErrorName() string {
	return "UpdateCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommiteeResponseValidationError{}

// Validate checks the field values on DeleteCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommiteeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommiteeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommiteeRequestMultiError, or nil if none found.
func (m *DeleteCommiteeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommiteeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteCommiteeRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCommiteeRequestMultiError(errors)
	}

	return nil
}

// DeleteCommiteeRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommiteeRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommiteeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommiteeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommiteeRequestMultiError) AllErrors() []error { return m }

// DeleteCommiteeRequestValidationError is the validation error returned by
// DeleteCommiteeRequest.Validate if the designated constraints aren't met.
type DeleteCommiteeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommiteeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommiteeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommiteeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommiteeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommiteeRequestValidationError) ErrorName() string {
	return "DeleteCommiteeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommiteeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommiteeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommiteeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommiteeRequestValidationError{}

// Validate checks the field values on DeleteCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommiteeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommiteeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommiteeResponseMultiError, or nil if none found.
func (m *DeleteCommiteeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommiteeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := DeleteCommiteeResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCommiteeResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCommiteeResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteCommiteeResponseMultiError(errors)
	}

	return nil
}

// DeleteCommiteeResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCommiteeResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommiteeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommiteeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommiteeResponseMultiError) AllErrors() []error { return m }

// DeleteCommiteeResponseValidationError is the validation error returned by
// DeleteCommiteeResponse.Validate if the designated constraints aren't met.
type DeleteCommiteeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommiteeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommiteeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommiteeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommiteeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommiteeResponseValidationError) ErrorName() string {
	return "DeleteCommiteeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommiteeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommiteeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommiteeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommiteeResponseValidationError{}

// Validate checks the field values on GetCommiteesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommiteesRequestMultiError, or nil if none found.
func (m *GetCommiteesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCommiteesRequestMultiError(errors)
	}

	return nil
}

// GetCommiteesRequestMultiError is an error wrapping multiple validation
// errors returned by GetCommiteesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCommiteesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteesRequestMultiError) AllErrors() []error { return m }

// GetCommiteesRequestValidationError is the validation error returned by
// GetCommiteesRequest.Validate if the designated constraints aren't met.
type GetCommiteesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteesRequestValidationError) ErrorName() string {
	return "GetCommiteesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteesRequestValidationError{}

// Validate checks the field values on GetCommiteesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommiteesResponseMultiError, or nil if none found.
func (m *GetCommiteesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetCommiteesResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommiteesResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommiteesResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommiteesResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTotalCount() < 0 {
		err := GetCommiteesResponseValidationError{
			field:  "TotalCount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCommitees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommiteesResponseValidationError{
						field:  fmt.Sprintf("Commitees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommiteesResponseValidationError{
						field:  fmt.Sprintf("Commitees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommiteesResponseValidationError{
					field:  fmt.Sprintf("Commitees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommiteesResponseMultiError(errors)
	}

	return nil
}

// GetCommiteesResponseMultiError is an error wrapping multiple validation
// errors returned by GetCommiteesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCommiteesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteesResponseMultiError) AllErrors() []error { return m }

// GetCommiteesResponseValidationError is the validation error returned by
// GetCommiteesResponse.Validate if the designated constraints aren't met.
type GetCommiteesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteesResponseValidationError) ErrorName() string {
	return "GetCommiteesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteesResponseValidationError{}

// Validate checks the field values on CommiteeUserDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommiteeUserDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommiteeUserDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommiteeUserDetailMultiError, or nil if none found.
func (m *CommiteeUserDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *CommiteeUserDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommiteeID() < 1 {
		err := CommiteeUserDetailValidationError{
			field:  "CommiteeID",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLecturerID()) < 2 {
		err := CommiteeUserDetailValidationError{
			field:  "LecturerID",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CommiteeUserDetailMultiError(errors)
	}

	return nil
}

// CommiteeUserDetailMultiError is an error wrapping multiple validation errors
// returned by CommiteeUserDetail.ValidateAll() if the designated constraints
// aren't met.
type CommiteeUserDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommiteeUserDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommiteeUserDetailMultiError) AllErrors() []error { return m }

// CommiteeUserDetailValidationError is the validation error returned by
// CommiteeUserDetail.Validate if the designated constraints aren't met.
type CommiteeUserDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommiteeUserDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommiteeUserDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommiteeUserDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommiteeUserDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommiteeUserDetailValidationError) ErrorName() string {
	return "CommiteeUserDetailValidationError"
}

// Error satisfies the builtin error interface
func (e CommiteeUserDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommiteeUserDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommiteeUserDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommiteeUserDetailValidationError{}

// Validate checks the field values on CreateCommiteeUserDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommiteeUserDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommiteeUserDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCommiteeUserDetailRequestMultiError, or nil if none found.
func (m *CreateCommiteeUserDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommiteeUserDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCommiteeUserDetail() == nil {
		err := CreateCommiteeUserDetailRequestValidationError{
			field:  "CommiteeUserDetail",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommiteeUserDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommiteeUserDetailRequestValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommiteeUserDetailRequestValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommiteeUserDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommiteeUserDetailRequestValidationError{
				field:  "CommiteeUserDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommiteeUserDetailRequestMultiError(errors)
	}

	return nil
}

// CreateCommiteeUserDetailRequestMultiError is an error wrapping multiple
// validation errors returned by CreateCommiteeUserDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateCommiteeUserDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommiteeUserDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommiteeUserDetailRequestMultiError) AllErrors() []error { return m }

// CreateCommiteeUserDetailRequestValidationError is the validation error
// returned by CreateCommiteeUserDetailRequest.Validate if the designated
// constraints aren't met.
type CreateCommiteeUserDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommiteeUserDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommiteeUserDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommiteeUserDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommiteeUserDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommiteeUserDetailRequestValidationError) ErrorName() string {
	return "CreateCommiteeUserDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommiteeUserDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommiteeUserDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommiteeUserDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommiteeUserDetailRequestValidationError{}

// Validate checks the field values on CreateCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateCommiteeUserDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateCommiteeUserDetailResponseMultiError, or nil if none found.
func (m *CreateCommiteeUserDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommiteeUserDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := CreateCommiteeUserDetailResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommiteeUserDetailResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommiteeUserDetailResponseMultiError(errors)
	}

	return nil
}

// CreateCommiteeUserDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateCommiteeUserDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommiteeUserDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommiteeUserDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommiteeUserDetailResponseMultiError) AllErrors() []error { return m }

// CreateCommiteeUserDetailResponseValidationError is the validation error
// returned by CreateCommiteeUserDetailResponse.Validate if the designated
// constraints aren't met.
type CreateCommiteeUserDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommiteeUserDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommiteeUserDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommiteeUserDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommiteeUserDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommiteeUserDetailResponseValidationError) ErrorName() string {
	return "CreateCommiteeUserDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommiteeUserDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommiteeUserDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommiteeUserDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommiteeUserDetailResponseValidationError{}

// Validate checks the field values on GetCommiteeUserDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteeUserDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteeUserDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommiteeUserDetailRequestMultiError, or nil if none found.
func (m *GetCommiteeUserDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteeUserDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := GetCommiteeUserDetailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCommiteeUserDetailRequestMultiError(errors)
	}

	return nil
}

// GetCommiteeUserDetailRequestMultiError is an error wrapping multiple
// validation errors returned by GetCommiteeUserDetailRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCommiteeUserDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteeUserDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteeUserDetailRequestMultiError) AllErrors() []error { return m }

// GetCommiteeUserDetailRequestValidationError is the validation error returned
// by GetCommiteeUserDetailRequest.Validate if the designated constraints
// aren't met.
type GetCommiteeUserDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteeUserDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteeUserDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteeUserDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteeUserDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteeUserDetailRequestValidationError) ErrorName() string {
	return "GetCommiteeUserDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteeUserDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteeUserDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteeUserDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteeUserDetailRequestValidationError{}

// Validate checks the field values on GetCommiteeUserDetailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteeUserDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCommiteeUserDetailResponseMultiError, or nil if none found.
func (m *GetCommiteeUserDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteeUserDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetCommiteeUserDetailResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommiteeUserDetailResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetCommiteeUserDetail() == nil {
		err := GetCommiteeUserDetailResponseValidationError{
			field:  "CommiteeUserDetail",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommiteeUserDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommiteeUserDetailResponseValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommiteeUserDetailResponseValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommiteeUserDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommiteeUserDetailResponseValidationError{
				field:  "CommiteeUserDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCommiteeUserDetailResponseMultiError(errors)
	}

	return nil
}

// GetCommiteeUserDetailResponseMultiError is an error wrapping multiple
// validation errors returned by GetCommiteeUserDetailResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCommiteeUserDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteeUserDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteeUserDetailResponseMultiError) AllErrors() []error { return m }

// GetCommiteeUserDetailResponseValidationError is the validation error
// returned by GetCommiteeUserDetailResponse.Validate if the designated
// constraints aren't met.
type GetCommiteeUserDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteeUserDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteeUserDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteeUserDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteeUserDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteeUserDetailResponseValidationError) ErrorName() string {
	return "GetCommiteeUserDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteeUserDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteeUserDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteeUserDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteeUserDetailResponseValidationError{}

// Validate checks the field values on UpdateCommiteeUserDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCommiteeUserDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommiteeUserDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCommiteeUserDetailRequestMultiError, or nil if none found.
func (m *UpdateCommiteeUserDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommiteeUserDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := UpdateCommiteeUserDetailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCommiteeUserDetail() == nil {
		err := UpdateCommiteeUserDetailRequestValidationError{
			field:  "CommiteeUserDetail",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCommiteeUserDetail()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommiteeUserDetailRequestValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommiteeUserDetailRequestValidationError{
					field:  "CommiteeUserDetail",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommiteeUserDetail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommiteeUserDetailRequestValidationError{
				field:  "CommiteeUserDetail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCommiteeUserDetailRequestMultiError(errors)
	}

	return nil
}

// UpdateCommiteeUserDetailRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateCommiteeUserDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateCommiteeUserDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommiteeUserDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommiteeUserDetailRequestMultiError) AllErrors() []error { return m }

// UpdateCommiteeUserDetailRequestValidationError is the validation error
// returned by UpdateCommiteeUserDetailRequest.Validate if the designated
// constraints aren't met.
type UpdateCommiteeUserDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommiteeUserDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommiteeUserDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommiteeUserDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommiteeUserDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommiteeUserDetailRequestValidationError) ErrorName() string {
	return "UpdateCommiteeUserDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommiteeUserDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommiteeUserDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommiteeUserDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommiteeUserDetailRequestValidationError{}

// Validate checks the field values on UpdateCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateCommiteeUserDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateCommiteeUserDetailResponseMultiError, or nil if none found.
func (m *UpdateCommiteeUserDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCommiteeUserDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := UpdateCommiteeUserDetailResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCommiteeUserDetailResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCommiteeUserDetailResponseMultiError(errors)
	}

	return nil
}

// UpdateCommiteeUserDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateCommiteeUserDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCommiteeUserDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCommiteeUserDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCommiteeUserDetailResponseMultiError) AllErrors() []error { return m }

// UpdateCommiteeUserDetailResponseValidationError is the validation error
// returned by UpdateCommiteeUserDetailResponse.Validate if the designated
// constraints aren't met.
type UpdateCommiteeUserDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCommiteeUserDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCommiteeUserDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCommiteeUserDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCommiteeUserDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCommiteeUserDetailResponseValidationError) ErrorName() string {
	return "UpdateCommiteeUserDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCommiteeUserDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCommiteeUserDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCommiteeUserDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCommiteeUserDetailResponseValidationError{}

// Validate checks the field values on DeleteCommiteeUserDetailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommiteeUserDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommiteeUserDetailRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCommiteeUserDetailRequestMultiError, or nil if none found.
func (m *DeleteCommiteeUserDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommiteeUserDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() < 1 {
		err := DeleteCommiteeUserDetailRequestValidationError{
			field:  "Id",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCommiteeUserDetailRequestMultiError(errors)
	}

	return nil
}

// DeleteCommiteeUserDetailRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCommiteeUserDetailRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteCommiteeUserDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommiteeUserDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommiteeUserDetailRequestMultiError) AllErrors() []error { return m }

// DeleteCommiteeUserDetailRequestValidationError is the validation error
// returned by DeleteCommiteeUserDetailRequest.Validate if the designated
// constraints aren't met.
type DeleteCommiteeUserDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommiteeUserDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommiteeUserDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommiteeUserDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommiteeUserDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommiteeUserDetailRequestValidationError) ErrorName() string {
	return "DeleteCommiteeUserDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommiteeUserDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommiteeUserDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommiteeUserDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommiteeUserDetailRequestValidationError{}

// Validate checks the field values on DeleteCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteCommiteeUserDetailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommiteeUserDetailResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteCommiteeUserDetailResponseMultiError, or nil if none found.
func (m *DeleteCommiteeUserDetailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommiteeUserDetailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := DeleteCommiteeUserDetailResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCommiteeUserDetailResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCommiteeUserDetailResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteCommiteeUserDetailResponseMultiError(errors)
	}

	return nil
}

// DeleteCommiteeUserDetailResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteCommiteeUserDetailResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommiteeUserDetailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommiteeUserDetailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommiteeUserDetailResponseMultiError) AllErrors() []error { return m }

// DeleteCommiteeUserDetailResponseValidationError is the validation error
// returned by DeleteCommiteeUserDetailResponse.Validate if the designated
// constraints aren't met.
type DeleteCommiteeUserDetailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommiteeUserDetailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommiteeUserDetailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommiteeUserDetailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommiteeUserDetailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommiteeUserDetailResponseValidationError) ErrorName() string {
	return "DeleteCommiteeUserDetailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommiteeUserDetailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommiteeUserDetailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommiteeUserDetailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommiteeUserDetailResponseValidationError{}

// Validate checks the field values on GetCommiteeUserDetailsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteeUserDetailsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteeUserDetailsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCommiteeUserDetailsRequestMultiError, or nil if none found.
func (m *GetCommiteeUserDetailsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteeUserDetailsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCommiteeUserDetailsRequestMultiError(errors)
	}

	return nil
}

// GetCommiteeUserDetailsRequestMultiError is an error wrapping multiple
// validation errors returned by GetCommiteeUserDetailsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetCommiteeUserDetailsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteeUserDetailsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteeUserDetailsRequestMultiError) AllErrors() []error { return m }

// GetCommiteeUserDetailsRequestValidationError is the validation error
// returned by GetCommiteeUserDetailsRequest.Validate if the designated
// constraints aren't met.
type GetCommiteeUserDetailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteeUserDetailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteeUserDetailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteeUserDetailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteeUserDetailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteeUserDetailsRequestValidationError) ErrorName() string {
	return "GetCommiteeUserDetailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteeUserDetailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteeUserDetailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteeUserDetailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteeUserDetailsRequestValidationError{}

// Validate checks the field values on GetCommiteeUserDetailsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommiteeUserDetailsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommiteeUserDetailsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCommiteeUserDetailsResponseMultiError, or nil if none found.
func (m *GetCommiteeUserDetailsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommiteeUserDetailsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetResponse() == nil {
		err := GetCommiteeUserDetailsResponseValidationError{
			field:  "Response",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommiteeUserDetailsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommiteeUserDetailsResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommiteeUserDetailsResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetTotalCount() < 0 {
		err := GetCommiteeUserDetailsResponseValidationError{
			field:  "TotalCount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetCommiteeUserDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommiteeUserDetailsResponseValidationError{
						field:  fmt.Sprintf("CommiteeUserDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommiteeUserDetailsResponseValidationError{
						field:  fmt.Sprintf("CommiteeUserDetails[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommiteeUserDetailsResponseValidationError{
					field:  fmt.Sprintf("CommiteeUserDetails[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommiteeUserDetailsResponseMultiError(errors)
	}

	return nil
}

// GetCommiteeUserDetailsResponseMultiError is an error wrapping multiple
// validation errors returned by GetCommiteeUserDetailsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCommiteeUserDetailsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommiteeUserDetailsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommiteeUserDetailsResponseMultiError) AllErrors() []error { return m }

// GetCommiteeUserDetailsResponseValidationError is the validation error
// returned by GetCommiteeUserDetailsResponse.Validate if the designated
// constraints aren't met.
type GetCommiteeUserDetailsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommiteeUserDetailsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommiteeUserDetailsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommiteeUserDetailsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommiteeUserDetailsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommiteeUserDetailsResponseValidationError) ErrorName() string {
	return "GetCommiteeUserDetailsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommiteeUserDetailsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommiteeUserDetailsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommiteeUserDetailsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommiteeUserDetailsResponseValidationError{}

// Validate checks the field values on ParamSchedule with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ParamSchedule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ParamSchedule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ParamScheduleMultiError, or
// nil if none found.
func (m *ParamSchedule) ValidateAll() error {
	return m.validate(true)
}

func (m *ParamSchedule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return ParamScheduleMultiError(errors)
	}

	return nil
}

// ParamScheduleMultiError is an error wrapping multiple validation errors
// returned by ParamSchedule.ValidateAll() if the designated constraints
// aren't met.
type ParamScheduleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ParamScheduleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ParamScheduleMultiError) AllErrors() []error { return m }

// ParamScheduleValidationError is the validation error returned by
// ParamSchedule.Validate if the designated constraints aren't met.
type ParamScheduleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ParamScheduleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ParamScheduleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ParamScheduleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ParamScheduleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ParamScheduleValidationError) ErrorName() string { return "ParamScheduleValidationError" }

// Error satisfies the builtin error interface
func (e ParamScheduleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sParamSchedule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ParamScheduleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ParamScheduleValidationError{}

// Validate checks the field values on TimeSlotItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeSlotItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeSlotItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeSlotItemMultiError, or
// nil if none found.
func (m *TimeSlotItem) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeSlotItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Date

	// no validation rules for Time

	// no validation rules for Shift

	if len(errors) > 0 {
		return TimeSlotItemMultiError(errors)
	}

	return nil
}

// TimeSlotItemMultiError is an error wrapping multiple validation errors
// returned by TimeSlotItem.ValidateAll() if the designated constraints aren't met.
type TimeSlotItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeSlotItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeSlotItemMultiError) AllErrors() []error { return m }

// TimeSlotItemValidationError is the validation error returned by
// TimeSlotItem.Validate if the designated constraints aren't met.
type TimeSlotItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeSlotItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeSlotItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeSlotItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeSlotItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeSlotItemValidationError) ErrorName() string { return "TimeSlotItemValidationError" }

// Error satisfies the builtin error interface
func (e TimeSlotItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeSlotItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeSlotItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeSlotItemValidationError{}

// Validate checks the field values on RoomScheduleInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RoomScheduleInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomScheduleInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomScheduleInputMultiError, or nil if none found.
func (m *RoomScheduleInput) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomScheduleInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for School

	// no validation rules for Description

	if len(errors) > 0 {
		return RoomScheduleInputMultiError(errors)
	}

	return nil
}

// RoomScheduleInputMultiError is an error wrapping multiple validation errors
// returned by RoomScheduleInput.ValidateAll() if the designated constraints
// aren't met.
type RoomScheduleInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomScheduleInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomScheduleInputMultiError) AllErrors() []error { return m }

// RoomScheduleInputValidationError is the validation error returned by
// RoomScheduleInput.Validate if the designated constraints aren't met.
type RoomScheduleInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomScheduleInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomScheduleInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomScheduleInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomScheduleInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomScheduleInputValidationError) ErrorName() string {
	return "RoomScheduleInputValidationError"
}

// Error satisfies the builtin error interface
func (e RoomScheduleInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomScheduleInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomScheduleInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomScheduleInputValidationError{}

// Validate checks the field values on TimeSlotForStudent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeSlotForStudent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeSlotForStudent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeSlotForStudentMultiError, or nil if none found.
func (m *TimeSlotForStudent) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeSlotForStudent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeSlotForStudentValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeSlotForStudentValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeSlotForStudentValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTimeSlots() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeSlotForStudentValidationError{
						field:  fmt.Sprintf("TimeSlots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeSlotForStudentValidationError{
						field:  fmt.Sprintf("TimeSlots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeSlotForStudentValidationError{
					field:  fmt.Sprintf("TimeSlots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TimeSlotForStudentMultiError(errors)
	}

	return nil
}

// TimeSlotForStudentMultiError is an error wrapping multiple validation errors
// returned by TimeSlotForStudent.ValidateAll() if the designated constraints
// aren't met.
type TimeSlotForStudentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeSlotForStudentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeSlotForStudentMultiError) AllErrors() []error { return m }

// TimeSlotForStudentValidationError is the validation error returned by
// TimeSlotForStudent.Validate if the designated constraints aren't met.
type TimeSlotForStudentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeSlotForStudentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeSlotForStudentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeSlotForStudentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeSlotForStudentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeSlotForStudentValidationError) ErrorName() string {
	return "TimeSlotForStudentValidationError"
}

// Error satisfies the builtin error interface
func (e TimeSlotForStudentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeSlotForStudent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeSlotForStudentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeSlotForStudentValidationError{}

// Validate checks the field values on ScheduleDef with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScheduleDef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScheduleDef with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScheduleDefMultiError, or
// nil if none found.
func (m *ScheduleDef) ValidateAll() error {
	return m.validate(true)
}

func (m *ScheduleDef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRoom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScheduleDefValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScheduleDefValidationError{
					field:  "Room",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRoom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScheduleDefValidationError{
				field:  "Room",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTimeSlots() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ScheduleDefValidationError{
						field:  fmt.Sprintf("TimeSlots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ScheduleDefValidationError{
						field:  fmt.Sprintf("TimeSlots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ScheduleDefValidationError{
					field:  fmt.Sprintf("TimeSlots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ScheduleDefMultiError(errors)
	}

	return nil
}

// ScheduleDefMultiError is an error wrapping multiple validation errors
// returned by ScheduleDef.ValidateAll() if the designated constraints aren't met.
type ScheduleDefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScheduleDefMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScheduleDefMultiError) AllErrors() []error { return m }

// ScheduleDefValidationError is the validation error returned by
// ScheduleDef.Validate if the designated constraints aren't met.
type ScheduleDefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScheduleDefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScheduleDefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScheduleDefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScheduleDefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScheduleDefValidationError) ErrorName() string { return "ScheduleDefValidationError" }

// Error satisfies the builtin error interface
func (e ScheduleDefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScheduleDef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScheduleDefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScheduleDefValidationError{}

// Validate checks the field values on UserScheduleInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserScheduleInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserScheduleInput with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserScheduleInputMultiError, or nil if none found.
func (m *UserScheduleInput) ValidateAll() error {
	return m.validate(true)
}

func (m *UserScheduleInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetClass()); l < 4 || l > 10 {
		err := UserScheduleInputValidationError{
			field:  "Class",
			reason: "value length must be between 4 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PhotoSrc

	if _, ok := _UserScheduleInput_Role_InLookup[m.GetRole()]; !ok {
		err := UserScheduleInputValidationError{
			field:  "Role",
			reason: "value must be in list [lecturer student admin]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 200 {
		err := UserScheduleInputValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UserScheduleInputValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Major != nil {

		if utf8.RuneCountInString(m.GetMajor()) < 2 {
			err := UserScheduleInputValidationError{
				field:  "Major",
				reason: "value length must be at least 2 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Phone != nil {

		if l := utf8.RuneCountInString(m.GetPhone()); l < 10 || l > 11 {
			err := UserScheduleInputValidationError{
				field:  "Phone",
				reason: "value length must be between 10 and 11 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UserScheduleInputMultiError(errors)
	}

	return nil
}

func (m *UserScheduleInput) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserScheduleInput) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserScheduleInputMultiError is an error wrapping multiple validation errors
// returned by UserScheduleInput.ValidateAll() if the designated constraints
// aren't met.
type UserScheduleInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserScheduleInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserScheduleInputMultiError) AllErrors() []error { return m }

// UserScheduleInputValidationError is the validation error returned by
// UserScheduleInput.Validate if the designated constraints aren't met.
type UserScheduleInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserScheduleInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserScheduleInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserScheduleInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserScheduleInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserScheduleInputValidationError) ErrorName() string {
	return "UserScheduleInputValidationError"
}

// Error satisfies the builtin error interface
func (e UserScheduleInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserScheduleInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserScheduleInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserScheduleInputValidationError{}

var _UserScheduleInput_Role_InLookup = map[string]struct{}{
	"lecturer": {},
	"student":  {},
	"admin":    {},
}

// Validate checks the field values on CouncilDef with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouncilDef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouncilDef with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouncilDefMultiError, or
// nil if none found.
func (m *CouncilDef) ValidateAll() error {
	return m.validate(true)
}

func (m *CouncilDef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetCouncil() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CouncilDefValidationError{
						field:  fmt.Sprintf("Council[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CouncilDefValidationError{
						field:  fmt.Sprintf("Council[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CouncilDefValidationError{
					field:  fmt.Sprintf("Council[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouncilDefValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouncilDefValidationError{
					field:  "Schedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouncilDefValidationError{
				field:  "Schedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CouncilDefMultiError(errors)
	}

	return nil
}

// CouncilDefMultiError is an error wrapping multiple validation errors
// returned by CouncilDef.ValidateAll() if the designated constraints aren't met.
type CouncilDefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouncilDefMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouncilDefMultiError) AllErrors() []error { return m }

// CouncilDefValidationError is the validation error returned by
// CouncilDef.Validate if the designated constraints aren't met.
type CouncilDefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouncilDefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouncilDefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouncilDefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouncilDefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouncilDefValidationError) ErrorName() string { return "CouncilDefValidationError" }

// Error satisfies the builtin error interface
func (e CouncilDefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouncilDef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouncilDefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouncilDefValidationError{}

// Validate checks the field values on ThesisDef with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ThesisDef) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThesisDef with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ThesisDefMultiError, or nil
// if none found.
func (m *ThesisDef) ValidateAll() error {
	return m.validate(true)
}

func (m *ThesisDef) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	for idx, item := range m.GetThesis() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ThesisDefValidationError{
						field:  fmt.Sprintf("Thesis[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ThesisDefValidationError{
						field:  fmt.Sprintf("Thesis[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ThesisDefValidationError{
					field:  fmt.Sprintf("Thesis[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Fitness

	if len(errors) > 0 {
		return ThesisDefMultiError(errors)
	}

	return nil
}

// ThesisDefMultiError is an error wrapping multiple validation errors returned
// by ThesisDef.ValidateAll() if the designated constraints aren't met.
type ThesisDefMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThesisDefMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThesisDefMultiError) AllErrors() []error { return m }

// ThesisDefValidationError is the validation error returned by
// ThesisDef.Validate if the designated constraints aren't met.
type ThesisDefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThesisDefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThesisDefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThesisDefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThesisDefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThesisDefValidationError) ErrorName() string { return "ThesisDefValidationError" }

// Error satisfies the builtin error interface
func (e ThesisDefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThesisDef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThesisDefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThesisDefValidationError{}

// Validate checks the field values on RoomScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RoomScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoomScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RoomScheduleResponseMultiError, or nil if none found.
func (m *RoomScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RoomScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for School

	// no validation rules for Description

	if len(errors) > 0 {
		return RoomScheduleResponseMultiError(errors)
	}

	return nil
}

// RoomScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by RoomScheduleResponse.ValidateAll() if the designated
// constraints aren't met.
type RoomScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoomScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoomScheduleResponseMultiError) AllErrors() []error { return m }

// RoomScheduleResponseValidationError is the validation error returned by
// RoomScheduleResponse.Validate if the designated constraints aren't met.
type RoomScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoomScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoomScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoomScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoomScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoomScheduleResponseValidationError) ErrorName() string {
	return "RoomScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RoomScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoomScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoomScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoomScheduleResponseValidationError{}

// Validate checks the field values on CouncilInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CouncilInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouncilInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CouncilInputMultiError, or
// nil if none found.
func (m *CouncilInput) ValidateAll() error {
	return m.validate(true)
}

func (m *CouncilInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LecturerID

	// no validation rules for ThesisID

	if len(errors) > 0 {
		return CouncilInputMultiError(errors)
	}

	return nil
}

// CouncilInputMultiError is an error wrapping multiple validation errors
// returned by CouncilInput.ValidateAll() if the designated constraints aren't met.
type CouncilInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouncilInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouncilInputMultiError) AllErrors() []error { return m }

// CouncilInputValidationError is the validation error returned by
// CouncilInput.Validate if the designated constraints aren't met.
type CouncilInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouncilInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouncilInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouncilInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouncilInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouncilInputValidationError) ErrorName() string { return "CouncilInputValidationError" }

// Error satisfies the builtin error interface
func (e CouncilInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouncilInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouncilInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouncilInputValidationError{}

// Validate checks the field values on CouncilResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CouncilResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CouncilResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CouncilResponseMultiError, or nil if none found.
func (m *CouncilResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CouncilResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for LecturerID

	// no validation rules for ThesisID

	if len(errors) > 0 {
		return CouncilResponseMultiError(errors)
	}

	return nil
}

// CouncilResponseMultiError is an error wrapping multiple validation errors
// returned by CouncilResponse.ValidateAll() if the designated constraints
// aren't met.
type CouncilResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouncilResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouncilResponseMultiError) AllErrors() []error { return m }

// CouncilResponseValidationError is the validation error returned by
// CouncilResponse.Validate if the designated constraints aren't met.
type CouncilResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouncilResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouncilResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouncilResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouncilResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouncilResponseValidationError) ErrorName() string { return "CouncilResponseValidationError" }

// Error satisfies the builtin error interface
func (e CouncilResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCouncilResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouncilResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouncilResponseValidationError{}

// Validate checks the field values on CreateCouncilRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCouncilRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCouncilRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCouncilRequestMultiError, or nil if none found.
func (m *CreateCouncilRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCouncilRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCouncil()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCouncilRequestValidationError{
					field:  "Council",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCouncilRequestValidationError{
					field:  "Council",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCouncil()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCouncilRequestValidationError{
				field:  "Council",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCouncilRequestMultiError(errors)
	}

	return nil
}

// CreateCouncilRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCouncilRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCouncilRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCouncilRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCouncilRequestMultiError) AllErrors() []error { return m }

// CreateCouncilRequestValidationError is the validation error returned by
// CreateCouncilRequest.Validate if the designated constraints aren't met.
type CreateCouncilRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCouncilRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCouncilRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCouncilRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCouncilRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCouncilRequestValidationError) ErrorName() string {
	return "CreateCouncilRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCouncilRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCouncilRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCouncilRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCouncilRequestValidationError{}

// Validate checks the field values on CreateCouncilResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCouncilResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCouncilResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCouncilResponseMultiError, or nil if none found.
func (m *CreateCouncilResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCouncilResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCouncilResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCouncilResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCouncilResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCouncilResponseMultiError(errors)
	}

	return nil
}

// CreateCouncilResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCouncilResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCouncilResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCouncilResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCouncilResponseMultiError) AllErrors() []error { return m }

// CreateCouncilResponseValidationError is the validation error returned by
// CreateCouncilResponse.Validate if the designated constraints aren't met.
type CreateCouncilResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCouncilResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCouncilResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCouncilResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCouncilResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCouncilResponseValidationError) ErrorName() string {
	return "CreateCouncilResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCouncilResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCouncilResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCouncilResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCouncilResponseValidationError{}

// Validate checks the field values on GetCouncilRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCouncilRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouncilRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouncilRequestMultiError, or nil if none found.
func (m *GetCouncilRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouncilRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCouncilRequestMultiError(errors)
	}

	return nil
}

// GetCouncilRequestMultiError is an error wrapping multiple validation errors
// returned by GetCouncilRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCouncilRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouncilRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouncilRequestMultiError) AllErrors() []error { return m }

// GetCouncilRequestValidationError is the validation error returned by
// GetCouncilRequest.Validate if the designated constraints aren't met.
type GetCouncilRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouncilRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouncilRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouncilRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouncilRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouncilRequestValidationError) ErrorName() string {
	return "GetCouncilRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouncilRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouncilRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouncilRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouncilRequestValidationError{}

// Validate checks the field values on GetCouncilResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCouncilResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouncilResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouncilResponseMultiError, or nil if none found.
func (m *GetCouncilResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouncilResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCouncil()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCouncilResponseValidationError{
					field:  "Council",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCouncilResponseValidationError{
					field:  "Council",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCouncil()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCouncilResponseValidationError{
				field:  "Council",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCouncilResponseMultiError(errors)
	}

	return nil
}

// GetCouncilResponseMultiError is an error wrapping multiple validation errors
// returned by GetCouncilResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCouncilResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouncilResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouncilResponseMultiError) AllErrors() []error { return m }

// GetCouncilResponseValidationError is the validation error returned by
// GetCouncilResponse.Validate if the designated constraints aren't met.
type GetCouncilResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouncilResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouncilResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouncilResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouncilResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouncilResponseValidationError) ErrorName() string {
	return "GetCouncilResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouncilResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouncilResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouncilResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouncilResponseValidationError{}

// Validate checks the field values on GetCouncilsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCouncilsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouncilsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouncilsRequestMultiError, or nil if none found.
func (m *GetCouncilsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouncilsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCouncilsRequestMultiError(errors)
	}

	return nil
}

// GetCouncilsRequestMultiError is an error wrapping multiple validation errors
// returned by GetCouncilsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCouncilsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouncilsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouncilsRequestMultiError) AllErrors() []error { return m }

// GetCouncilsRequestValidationError is the validation error returned by
// GetCouncilsRequest.Validate if the designated constraints aren't met.
type GetCouncilsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouncilsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouncilsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouncilsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouncilsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouncilsRequestValidationError) ErrorName() string {
	return "GetCouncilsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouncilsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouncilsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouncilsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouncilsRequestValidationError{}

// Validate checks the field values on GetCouncilsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCouncilsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouncilsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouncilsResponseMultiError, or nil if none found.
func (m *GetCouncilsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouncilsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCouncils() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCouncilsResponseValidationError{
						field:  fmt.Sprintf("Councils[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCouncilsResponseValidationError{
						field:  fmt.Sprintf("Councils[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCouncilsResponseValidationError{
					field:  fmt.Sprintf("Councils[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCouncilsResponseMultiError(errors)
	}

	return nil
}

// GetCouncilsResponseMultiError is an error wrapping multiple validation
// errors returned by GetCouncilsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCouncilsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouncilsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouncilsResponseMultiError) AllErrors() []error { return m }

// GetCouncilsResponseValidationError is the validation error returned by
// GetCouncilsResponse.Validate if the designated constraints aren't met.
type GetCouncilsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouncilsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouncilsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouncilsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouncilsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouncilsResponseValidationError) ErrorName() string {
	return "GetCouncilsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouncilsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouncilsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouncilsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouncilsResponseValidationError{}
