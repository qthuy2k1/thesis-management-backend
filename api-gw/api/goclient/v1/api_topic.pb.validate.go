// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api_topic.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CommonTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CommonTopicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CommonTopicResponseMultiError, or nil if none found.
func (m *CommonTopicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonTopicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StatusCode

	// no validation rules for Message

	if len(errors) > 0 {
		return CommonTopicResponseMultiError(errors)
	}

	return nil
}

// CommonTopicResponseMultiError is an error wrapping multiple validation
// errors returned by CommonTopicResponse.ValidateAll() if the designated
// constraints aren't met.
type CommonTopicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonTopicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonTopicResponseMultiError) AllErrors() []error { return m }

// CommonTopicResponseValidationError is the validation error returned by
// CommonTopicResponse.Validate if the designated constraints aren't met.
type CommonTopicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonTopicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonTopicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonTopicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonTopicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonTopicResponseValidationError) ErrorName() string {
	return "CommonTopicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CommonTopicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonTopicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonTopicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonTopicResponseValidationError{}

// Validate checks the field values on UserTopicInput with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserTopicInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserTopicInput with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserTopicInputMultiError,
// or nil if none found.
func (m *UserTopicInput) ValidateAll() error {
	return m.validate(true)
}

func (m *UserTopicInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PhotoSrc

	if _, ok := _UserTopicInput_Role_InLookup[m.GetRole()]; !ok {
		err := UserTopicInputValidationError{
			field:  "Role",
			reason: "value must be in list [lecturer student admin]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 200 {
		err := UserTopicInputValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UserTopicInputValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Class != nil {

		if l := utf8.RuneCountInString(m.GetClass()); l < 4 || l > 10 {
			err := UserTopicInputValidationError{
				field:  "Class",
				reason: "value length must be between 4 and 10 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Major != nil {

		if utf8.RuneCountInString(m.GetMajor()) < 2 {
			err := UserTopicInputValidationError{
				field:  "Major",
				reason: "value length must be at least 2 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Phone != nil {

		if l := utf8.RuneCountInString(m.GetPhone()); l < 10 || l > 11 {
			err := UserTopicInputValidationError{
				field:  "Phone",
				reason: "value length must be between 10 and 11 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Password != nil {

		if utf8.RuneCountInString(m.GetPassword()) < 2 {
			err := UserTopicInputValidationError{
				field:  "Password",
				reason: "value length must be at least 2 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UserTopicInputMultiError(errors)
	}

	return nil
}

func (m *UserTopicInput) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserTopicInput) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserTopicInputMultiError is an error wrapping multiple validation errors
// returned by UserTopicInput.ValidateAll() if the designated constraints
// aren't met.
type UserTopicInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserTopicInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserTopicInputMultiError) AllErrors() []error { return m }

// UserTopicInputValidationError is the validation error returned by
// UserTopicInput.Validate if the designated constraints aren't met.
type UserTopicInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTopicInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTopicInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTopicInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTopicInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTopicInputValidationError) ErrorName() string { return "UserTopicInputValidationError" }

// Error satisfies the builtin error interface
func (e UserTopicInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserTopicInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTopicInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTopicInputValidationError{}

var _UserTopicInput_Role_InLookup = map[string]struct{}{
	"lecturer": {},
	"student":  {},
	"admin":    {},
}

// Validate checks the field values on TopicInput with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TopicInput) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicInput with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TopicInputMultiError, or
// nil if none found.
func (m *TopicInput) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicInput) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for TypeTopic

	// no validation rules for MemberQuantity

	// no validation rules for StudentID

	// no validation rules for MemberEmail

	// no validation rules for Description

	if len(errors) > 0 {
		return TopicInputMultiError(errors)
	}

	return nil
}

// TopicInputMultiError is an error wrapping multiple validation errors
// returned by TopicInput.ValidateAll() if the designated constraints aren't met.
type TopicInputMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicInputMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicInputMultiError) AllErrors() []error { return m }

// TopicInputValidationError is the validation error returned by
// TopicInput.Validate if the designated constraints aren't met.
type TopicInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicInputValidationError) ErrorName() string { return "TopicInputValidationError" }

// Error satisfies the builtin error interface
func (e TopicInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicInputValidationError{}

// Validate checks the field values on TopicResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TopicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopicResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TopicResponseMultiError, or
// nil if none found.
func (m *TopicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TopicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for TypeTopic

	// no validation rules for MemberQuantity

	if all {
		switch v := interface{}(m.GetStudent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TopicResponseValidationError{
					field:  "Student",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TopicResponseValidationError{
					field:  "Student",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TopicResponseValidationError{
				field:  "Student",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MemberEmail

	// no validation rules for Description

	if len(errors) > 0 {
		return TopicResponseMultiError(errors)
	}

	return nil
}

// TopicResponseMultiError is an error wrapping multiple validation errors
// returned by TopicResponse.ValidateAll() if the designated constraints
// aren't met.
type TopicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopicResponseMultiError) AllErrors() []error { return m }

// TopicResponseValidationError is the validation error returned by
// TopicResponse.Validate if the designated constraints aren't met.
type TopicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopicResponseValidationError) ErrorName() string { return "TopicResponseValidationError" }

// Error satisfies the builtin error interface
func (e TopicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopicResponseValidationError{}

// Validate checks the field values on CreateTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTopicRequestMultiError, or nil if none found.
func (m *CreateTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTopic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTopicRequestValidationError{
					field:  "Topic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTopicRequestValidationError{
					field:  "Topic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTopic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTopicRequestValidationError{
				field:  "Topic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTopicRequestMultiError(errors)
	}

	return nil
}

// CreateTopicRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTopicRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTopicRequestMultiError) AllErrors() []error { return m }

// CreateTopicRequestValidationError is the validation error returned by
// CreateTopicRequest.Validate if the designated constraints aren't met.
type CreateTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTopicRequestValidationError) ErrorName() string {
	return "CreateTopicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTopicRequestValidationError{}

// Validate checks the field values on CreateTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTopicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTopicResponseMultiError, or nil if none found.
func (m *CreateTopicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTopicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTopicResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTopicResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTopicResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTopicResponseMultiError(errors)
	}

	return nil
}

// CreateTopicResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTopicResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTopicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTopicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTopicResponseMultiError) AllErrors() []error { return m }

// CreateTopicResponseValidationError is the validation error returned by
// CreateTopicResponse.Validate if the designated constraints aren't met.
type CreateTopicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTopicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTopicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTopicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTopicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTopicResponseValidationError) ErrorName() string {
	return "CreateTopicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTopicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTopicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTopicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTopicResponseValidationError{}

// Validate checks the field values on GetTopicRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTopicRequestMultiError, or nil if none found.
func (m *GetTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudentID

	if len(errors) > 0 {
		return GetTopicRequestMultiError(errors)
	}

	return nil
}

// GetTopicRequestMultiError is an error wrapping multiple validation errors
// returned by GetTopicRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopicRequestMultiError) AllErrors() []error { return m }

// GetTopicRequestValidationError is the validation error returned by
// GetTopicRequest.Validate if the designated constraints aren't met.
type GetTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopicRequestValidationError) ErrorName() string { return "GetTopicRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopicRequestValidationError{}

// Validate checks the field values on GetTopicResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTopicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTopicResponseMultiError, or nil if none found.
func (m *GetTopicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTopicResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTopicResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTopicResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTopic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTopicResponseValidationError{
					field:  "Topic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTopicResponseValidationError{
					field:  "Topic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTopic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTopicResponseValidationError{
				field:  "Topic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTopicResponseMultiError(errors)
	}

	return nil
}

// GetTopicResponseMultiError is an error wrapping multiple validation errors
// returned by GetTopicResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTopicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopicResponseMultiError) AllErrors() []error { return m }

// GetTopicResponseValidationError is the validation error returned by
// GetTopicResponse.Validate if the designated constraints aren't met.
type GetTopicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopicResponseValidationError) ErrorName() string { return "GetTopicResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTopicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopicResponseValidationError{}

// Validate checks the field values on CheckTopicExistsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckTopicExistsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckTopicExistsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckTopicExistsRequestMultiError, or nil if none found.
func (m *CheckTopicExistsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckTopicExistsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TopicID

	if len(errors) > 0 {
		return CheckTopicExistsRequestMultiError(errors)
	}

	return nil
}

// CheckTopicExistsRequestMultiError is an error wrapping multiple validation
// errors returned by CheckTopicExistsRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckTopicExistsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckTopicExistsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckTopicExistsRequestMultiError) AllErrors() []error { return m }

// CheckTopicExistsRequestValidationError is the validation error returned by
// CheckTopicExistsRequest.Validate if the designated constraints aren't met.
type CheckTopicExistsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckTopicExistsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckTopicExistsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckTopicExistsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckTopicExistsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckTopicExistsRequestValidationError) ErrorName() string {
	return "CheckTopicExistsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckTopicExistsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckTopicExistsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckTopicExistsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckTopicExistsRequestValidationError{}

// Validate checks the field values on CheckTopicExistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckTopicExistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckTopicExistsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckTopicExistsResponseMultiError, or nil if none found.
func (m *CheckTopicExistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckTopicExistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return CheckTopicExistsResponseMultiError(errors)
	}

	return nil
}

// CheckTopicExistsResponseMultiError is an error wrapping multiple validation
// errors returned by CheckTopicExistsResponse.ValidateAll() if the designated
// constraints aren't met.
type CheckTopicExistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckTopicExistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckTopicExistsResponseMultiError) AllErrors() []error { return m }

// CheckTopicExistsResponseValidationError is the validation error returned by
// CheckTopicExistsResponse.Validate if the designated constraints aren't met.
type CheckTopicExistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckTopicExistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckTopicExistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckTopicExistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckTopicExistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckTopicExistsResponseValidationError) ErrorName() string {
	return "CheckTopicExistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckTopicExistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckTopicExistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckTopicExistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckTopicExistsResponseValidationError{}

// Validate checks the field values on UpdateTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTopicRequestMultiError, or nil if none found.
func (m *UpdateTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetTopic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTopicRequestValidationError{
					field:  "Topic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTopicRequestValidationError{
					field:  "Topic",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTopic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTopicRequestValidationError{
				field:  "Topic",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTopicRequestMultiError(errors)
	}

	return nil
}

// UpdateTopicRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateTopicRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTopicRequestMultiError) AllErrors() []error { return m }

// UpdateTopicRequestValidationError is the validation error returned by
// UpdateTopicRequest.Validate if the designated constraints aren't met.
type UpdateTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTopicRequestValidationError) ErrorName() string {
	return "UpdateTopicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTopicRequestValidationError{}

// Validate checks the field values on UpdateTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTopicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTopicResponseMultiError, or nil if none found.
func (m *UpdateTopicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTopicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTopicResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTopicResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTopicResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTopicResponseMultiError(errors)
	}

	return nil
}

// UpdateTopicResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTopicResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTopicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTopicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTopicResponseMultiError) AllErrors() []error { return m }

// UpdateTopicResponseValidationError is the validation error returned by
// UpdateTopicResponse.Validate if the designated constraints aren't met.
type UpdateTopicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTopicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTopicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTopicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTopicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTopicResponseValidationError) ErrorName() string {
	return "UpdateTopicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTopicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTopicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTopicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTopicResponseValidationError{}

// Validate checks the field values on DeleteTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTopicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTopicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTopicRequestMultiError, or nil if none found.
func (m *DeleteTopicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTopicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTopicRequestMultiError(errors)
	}

	return nil
}

// DeleteTopicRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTopicRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTopicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTopicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTopicRequestMultiError) AllErrors() []error { return m }

// DeleteTopicRequestValidationError is the validation error returned by
// DeleteTopicRequest.Validate if the designated constraints aren't met.
type DeleteTopicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTopicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTopicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTopicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTopicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTopicRequestValidationError) ErrorName() string {
	return "DeleteTopicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTopicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTopicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTopicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTopicRequestValidationError{}

// Validate checks the field values on DeleteTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTopicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTopicResponseMultiError, or nil if none found.
func (m *DeleteTopicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTopicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteTopicResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteTopicResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteTopicResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteTopicResponseMultiError(errors)
	}

	return nil
}

// DeleteTopicResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTopicResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTopicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTopicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTopicResponseMultiError) AllErrors() []error { return m }

// DeleteTopicResponseValidationError is the validation error returned by
// DeleteTopicResponse.Validate if the designated constraints aren't met.
type DeleteTopicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTopicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTopicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTopicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTopicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTopicResponseValidationError) ErrorName() string {
	return "DeleteTopicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTopicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTopicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTopicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTopicResponseValidationError{}

// Validate checks the field values on UserTopicResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserTopicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserTopicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserTopicResponseMultiError, or nil if none found.
func (m *UserTopicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserTopicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetClass()); l < 4 || l > 10 {
		err := UserTopicResponseValidationError{
			field:  "Class",
			reason: "value length must be between 4 and 10 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PhotoSrc

	if _, ok := _UserTopicResponse_Role_InLookup[m.GetRole()]; !ok {
		err := UserTopicResponseValidationError{
			field:  "Role",
			reason: "value must be in list [teacher student admin]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 2 || l > 200 {
		err := UserTopicResponseValidationError{
			field:  "Name",
			reason: "value length must be between 2 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UserTopicResponseValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Major != nil {

		if utf8.RuneCountInString(m.GetMajor()) < 2 {
			err := UserTopicResponseValidationError{
				field:  "Major",
				reason: "value length must be at least 2 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Phone != nil {

		if l := utf8.RuneCountInString(m.GetPhone()); l < 10 || l > 11 {
			err := UserTopicResponseValidationError{
				field:  "Phone",
				reason: "value length must be between 10 and 11 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UserTopicResponseMultiError(errors)
	}

	return nil
}

func (m *UserTopicResponse) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UserTopicResponse) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UserTopicResponseMultiError is an error wrapping multiple validation errors
// returned by UserTopicResponse.ValidateAll() if the designated constraints
// aren't met.
type UserTopicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserTopicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserTopicResponseMultiError) AllErrors() []error { return m }

// UserTopicResponseValidationError is the validation error returned by
// UserTopicResponse.Validate if the designated constraints aren't met.
type UserTopicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTopicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTopicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTopicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTopicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTopicResponseValidationError) ErrorName() string {
	return "UserTopicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserTopicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserTopicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTopicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTopicResponseValidationError{}

var _UserTopicResponse_Role_InLookup = map[string]struct{}{
	"teacher": {},
	"student": {},
	"admin":   {},
}

// Validate checks the field values on GetTopicsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTopicsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTopicsRequestMultiError, or nil if none found.
func (m *GetTopicsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopicsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTopicsRequestMultiError(errors)
	}

	return nil
}

// GetTopicsRequestMultiError is an error wrapping multiple validation errors
// returned by GetTopicsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTopicsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopicsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopicsRequestMultiError) AllErrors() []error { return m }

// GetTopicsRequestValidationError is the validation error returned by
// GetTopicsRequest.Validate if the designated constraints aren't met.
type GetTopicsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopicsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopicsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopicsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopicsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopicsRequestValidationError) ErrorName() string { return "GetTopicsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTopicsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopicsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopicsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopicsRequestValidationError{}

// Validate checks the field values on GetTopicsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTopicsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTopicsResponseMultiError, or nil if none found.
func (m *GetTopicsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopicsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTopicsResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTopicsResponseValidationError{
						field:  fmt.Sprintf("Topics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTopicsResponseValidationError{
					field:  fmt.Sprintf("Topics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTopicsResponseMultiError(errors)
	}

	return nil
}

// GetTopicsResponseMultiError is an error wrapping multiple validation errors
// returned by GetTopicsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTopicsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopicsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopicsResponseMultiError) AllErrors() []error { return m }

// GetTopicsResponseValidationError is the validation error returned by
// GetTopicsResponse.Validate if the designated constraints aren't met.
type GetTopicsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopicsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopicsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopicsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopicsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopicsResponseValidationError) ErrorName() string {
	return "GetTopicsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTopicsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopicsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopicsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopicsResponseValidationError{}
