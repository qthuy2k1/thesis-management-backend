// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: api_reporting_stage.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReportingStageService_CreateReportingStage_FullMethodName = "/api.category.v1.ReportingStageService/CreateReportingStage"
	ReportingStageService_GetReportingStage_FullMethodName    = "/api.category.v1.ReportingStageService/GetReportingStage"
	ReportingStageService_UpdateReportingStage_FullMethodName = "/api.category.v1.ReportingStageService/UpdateReportingStage"
	ReportingStageService_DeleteReportingStage_FullMethodName = "/api.category.v1.ReportingStageService/DeleteReportingStage"
	ReportingStageService_GetReportingStages_FullMethodName   = "/api.category.v1.ReportingStageService/GetReportingStages"
)

// ReportingStageServiceClient is the client API for ReportingStageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportingStageServiceClient interface {
	CreateReportingStage(ctx context.Context, in *CreateReportingStageRequest, opts ...grpc.CallOption) (*CreateReportingStageResponse, error)
	GetReportingStage(ctx context.Context, in *GetReportingStageRequest, opts ...grpc.CallOption) (*GetReportingStageResponse, error)
	UpdateReportingStage(ctx context.Context, in *UpdateReportingStageRequest, opts ...grpc.CallOption) (*UpdateReportingStageResponse, error)
	DeleteReportingStage(ctx context.Context, in *DeleteReportingStageRequest, opts ...grpc.CallOption) (*DeleteReportingStageResponse, error)
	GetReportingStages(ctx context.Context, in *GetReportingStagesRequest, opts ...grpc.CallOption) (*GetReportingStagesResponse, error)
}

type reportingStageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportingStageServiceClient(cc grpc.ClientConnInterface) ReportingStageServiceClient {
	return &reportingStageServiceClient{cc}
}

func (c *reportingStageServiceClient) CreateReportingStage(ctx context.Context, in *CreateReportingStageRequest, opts ...grpc.CallOption) (*CreateReportingStageResponse, error) {
	out := new(CreateReportingStageResponse)
	err := c.cc.Invoke(ctx, ReportingStageService_CreateReportingStage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingStageServiceClient) GetReportingStage(ctx context.Context, in *GetReportingStageRequest, opts ...grpc.CallOption) (*GetReportingStageResponse, error) {
	out := new(GetReportingStageResponse)
	err := c.cc.Invoke(ctx, ReportingStageService_GetReportingStage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingStageServiceClient) UpdateReportingStage(ctx context.Context, in *UpdateReportingStageRequest, opts ...grpc.CallOption) (*UpdateReportingStageResponse, error) {
	out := new(UpdateReportingStageResponse)
	err := c.cc.Invoke(ctx, ReportingStageService_UpdateReportingStage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingStageServiceClient) DeleteReportingStage(ctx context.Context, in *DeleteReportingStageRequest, opts ...grpc.CallOption) (*DeleteReportingStageResponse, error) {
	out := new(DeleteReportingStageResponse)
	err := c.cc.Invoke(ctx, ReportingStageService_DeleteReportingStage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingStageServiceClient) GetReportingStages(ctx context.Context, in *GetReportingStagesRequest, opts ...grpc.CallOption) (*GetReportingStagesResponse, error) {
	out := new(GetReportingStagesResponse)
	err := c.cc.Invoke(ctx, ReportingStageService_GetReportingStages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportingStageServiceServer is the server API for ReportingStageService service.
// All implementations must embed UnimplementedReportingStageServiceServer
// for forward compatibility
type ReportingStageServiceServer interface {
	CreateReportingStage(context.Context, *CreateReportingStageRequest) (*CreateReportingStageResponse, error)
	GetReportingStage(context.Context, *GetReportingStageRequest) (*GetReportingStageResponse, error)
	UpdateReportingStage(context.Context, *UpdateReportingStageRequest) (*UpdateReportingStageResponse, error)
	DeleteReportingStage(context.Context, *DeleteReportingStageRequest) (*DeleteReportingStageResponse, error)
	GetReportingStages(context.Context, *GetReportingStagesRequest) (*GetReportingStagesResponse, error)
	mustEmbedUnimplementedReportingStageServiceServer()
}

// UnimplementedReportingStageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReportingStageServiceServer struct {
}

func (UnimplementedReportingStageServiceServer) CreateReportingStage(context.Context, *CreateReportingStageRequest) (*CreateReportingStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReportingStage not implemented")
}
func (UnimplementedReportingStageServiceServer) GetReportingStage(context.Context, *GetReportingStageRequest) (*GetReportingStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportingStage not implemented")
}
func (UnimplementedReportingStageServiceServer) UpdateReportingStage(context.Context, *UpdateReportingStageRequest) (*UpdateReportingStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReportingStage not implemented")
}
func (UnimplementedReportingStageServiceServer) DeleteReportingStage(context.Context, *DeleteReportingStageRequest) (*DeleteReportingStageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReportingStage not implemented")
}
func (UnimplementedReportingStageServiceServer) GetReportingStages(context.Context, *GetReportingStagesRequest) (*GetReportingStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReportingStages not implemented")
}
func (UnimplementedReportingStageServiceServer) mustEmbedUnimplementedReportingStageServiceServer() {}

// UnsafeReportingStageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportingStageServiceServer will
// result in compilation errors.
type UnsafeReportingStageServiceServer interface {
	mustEmbedUnimplementedReportingStageServiceServer()
}

func RegisterReportingStageServiceServer(s grpc.ServiceRegistrar, srv ReportingStageServiceServer) {
	s.RegisterService(&ReportingStageService_ServiceDesc, srv)
}

func _ReportingStageService_CreateReportingStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReportingStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingStageServiceServer).CreateReportingStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingStageService_CreateReportingStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingStageServiceServer).CreateReportingStage(ctx, req.(*CreateReportingStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingStageService_GetReportingStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportingStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingStageServiceServer).GetReportingStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingStageService_GetReportingStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingStageServiceServer).GetReportingStage(ctx, req.(*GetReportingStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingStageService_UpdateReportingStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReportingStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingStageServiceServer).UpdateReportingStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingStageService_UpdateReportingStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingStageServiceServer).UpdateReportingStage(ctx, req.(*UpdateReportingStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingStageService_DeleteReportingStage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReportingStageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingStageServiceServer).DeleteReportingStage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingStageService_DeleteReportingStage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingStageServiceServer).DeleteReportingStage(ctx, req.(*DeleteReportingStageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingStageService_GetReportingStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReportingStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingStageServiceServer).GetReportingStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingStageService_GetReportingStages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingStageServiceServer).GetReportingStages(ctx, req.(*GetReportingStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportingStageService_ServiceDesc is the grpc.ServiceDesc for ReportingStageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportingStageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.category.v1.ReportingStageService",
	HandlerType: (*ReportingStageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReportingStage",
			Handler:    _ReportingStageService_CreateReportingStage_Handler,
		},
		{
			MethodName: "GetReportingStage",
			Handler:    _ReportingStageService_GetReportingStage_Handler,
		},
		{
			MethodName: "UpdateReportingStage",
			Handler:    _ReportingStageService_UpdateReportingStage_Handler,
		},
		{
			MethodName: "DeleteReportingStage",
			Handler:    _ReportingStageService_DeleteReportingStage_Handler,
		},
		{
			MethodName: "GetReportingStages",
			Handler:    _ReportingStageService_GetReportingStages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_reporting_stage.proto",
}
